
RFID_Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005ba0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001a8  00800060  00005ba0  00005c34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800208  00800208  00005ddc  2**0
                  ALLOC
  3 .stab         000039c0  00000000  00000000  00005ddc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fdb  00000000  00000000  0000979c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000a777  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000020e  00000000  00000000  0000a937  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000268b  00000000  00000000  0000ab45  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014d1  00000000  00000000  0000d1d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012ab  00000000  00000000  0000e6a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000f94c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fb  00000000  00000000  0000fb2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a0a  00000000  00000000  0000fe27  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010831  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      24:	0c 94 91 09 	jmp	0x1322	; 0x1322 <__vector_9>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 6c 24 	jmp	0x48d8	; 0x48d8 <__vector_11>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <__lesf2+0xa>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__CCP__+0x8>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <__mulsf3+0x162>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__SREG__+0x31>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z+
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__SREG__+0x75>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <_fpadd_parts+0x1e8>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__SREG__+0xbd>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <__fixunssfsi+0x2e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d8 e0       	ldi	r29, 0x08	; 8
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	12 e0       	ldi	r17, 0x02	; 2
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	e0 ea       	ldi	r30, 0xA0	; 160
     162:	fb e5       	ldi	r31, 0x5B	; 91
     164:	02 c0       	rjmp	.+4      	; 0x16a <.do_copy_data_start>

00000166 <.do_copy_data_loop>:
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0

0000016a <.do_copy_data_start>:
     16a:	a8 30       	cpi	r26, 0x08	; 8
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <.do_copy_data_loop>

00000170 <__do_clear_bss>:
     170:	12 e0       	ldi	r17, 0x02	; 2
     172:	a8 e0       	ldi	r26, 0x08	; 8
     174:	b2 e0       	ldi	r27, 0x02	; 2
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	ac 31       	cpi	r26, 0x1C	; 28
     17c:	b1 07       	cpc	r27, r17
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <main>
     184:	0c 94 ce 2d 	jmp	0x5b9c	; 0x5b9c <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <__fixunssfsi>:
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	7b 01       	movw	r14, r22
     196:	8c 01       	movw	r16, r24
     198:	20 e0       	ldi	r18, 0x00	; 0
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	40 e0       	ldi	r20, 0x00	; 0
     19e:	5f e4       	ldi	r21, 0x4F	; 79
     1a0:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gesf2>
     1a4:	88 23       	and	r24, r24
     1a6:	8c f0       	brlt	.+34     	; 0x1ca <__fixunssfsi+0x3e>
     1a8:	c8 01       	movw	r24, r16
     1aa:	b7 01       	movw	r22, r14
     1ac:	20 e0       	ldi	r18, 0x00	; 0
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	40 e0       	ldi	r20, 0x00	; 0
     1b2:	5f e4       	ldi	r21, 0x4F	; 79
     1b4:	0e 94 3e 02 	call	0x47c	; 0x47c <__subsf3>
     1b8:	0e 94 60 05 	call	0xac0	; 0xac0 <__fixsfsi>
     1bc:	9b 01       	movw	r18, r22
     1be:	ac 01       	movw	r20, r24
     1c0:	20 50       	subi	r18, 0x00	; 0
     1c2:	30 40       	sbci	r19, 0x00	; 0
     1c4:	40 40       	sbci	r20, 0x00	; 0
     1c6:	50 48       	sbci	r21, 0x80	; 128
     1c8:	06 c0       	rjmp	.+12     	; 0x1d6 <__fixunssfsi+0x4a>
     1ca:	c8 01       	movw	r24, r16
     1cc:	b7 01       	movw	r22, r14
     1ce:	0e 94 60 05 	call	0xac0	; 0xac0 <__fixsfsi>
     1d2:	9b 01       	movw	r18, r22
     1d4:	ac 01       	movw	r20, r24
     1d6:	b9 01       	movw	r22, r18
     1d8:	ca 01       	movw	r24, r20
     1da:	1f 91       	pop	r17
     1dc:	0f 91       	pop	r16
     1de:	ff 90       	pop	r15
     1e0:	ef 90       	pop	r14
     1e2:	08 95       	ret

000001e4 <_fpadd_parts>:
     1e4:	a0 e0       	ldi	r26, 0x00	; 0
     1e6:	b0 e0       	ldi	r27, 0x00	; 0
     1e8:	e8 ef       	ldi	r30, 0xF8	; 248
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	0c 94 9b 28 	jmp	0x5136	; 0x5136 <__prologue_saves__>
     1f0:	dc 01       	movw	r26, r24
     1f2:	2b 01       	movw	r4, r22
     1f4:	fa 01       	movw	r30, r20
     1f6:	9c 91       	ld	r25, X
     1f8:	92 30       	cpi	r25, 0x02	; 2
     1fa:	08 f4       	brcc	.+2      	; 0x1fe <_fpadd_parts+0x1a>
     1fc:	39 c1       	rjmp	.+626    	; 0x470 <_fpadd_parts+0x28c>
     1fe:	eb 01       	movw	r28, r22
     200:	88 81       	ld	r24, Y
     202:	82 30       	cpi	r24, 0x02	; 2
     204:	08 f4       	brcc	.+2      	; 0x208 <_fpadd_parts+0x24>
     206:	33 c1       	rjmp	.+614    	; 0x46e <_fpadd_parts+0x28a>
     208:	94 30       	cpi	r25, 0x04	; 4
     20a:	69 f4       	brne	.+26     	; 0x226 <_fpadd_parts+0x42>
     20c:	84 30       	cpi	r24, 0x04	; 4
     20e:	09 f0       	breq	.+2      	; 0x212 <_fpadd_parts+0x2e>
     210:	2f c1       	rjmp	.+606    	; 0x470 <_fpadd_parts+0x28c>
     212:	11 96       	adiw	r26, 0x01	; 1
     214:	9c 91       	ld	r25, X
     216:	11 97       	sbiw	r26, 0x01	; 1
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	98 17       	cp	r25, r24
     21c:	09 f4       	brne	.+2      	; 0x220 <_fpadd_parts+0x3c>
     21e:	28 c1       	rjmp	.+592    	; 0x470 <_fpadd_parts+0x28c>
     220:	a0 ef       	ldi	r26, 0xF0	; 240
     222:	b0 e0       	ldi	r27, 0x00	; 0
     224:	25 c1       	rjmp	.+586    	; 0x470 <_fpadd_parts+0x28c>
     226:	84 30       	cpi	r24, 0x04	; 4
     228:	09 f4       	brne	.+2      	; 0x22c <_fpadd_parts+0x48>
     22a:	21 c1       	rjmp	.+578    	; 0x46e <_fpadd_parts+0x28a>
     22c:	82 30       	cpi	r24, 0x02	; 2
     22e:	a9 f4       	brne	.+42     	; 0x25a <_fpadd_parts+0x76>
     230:	92 30       	cpi	r25, 0x02	; 2
     232:	09 f0       	breq	.+2      	; 0x236 <_fpadd_parts+0x52>
     234:	1d c1       	rjmp	.+570    	; 0x470 <_fpadd_parts+0x28c>
     236:	9a 01       	movw	r18, r20
     238:	ad 01       	movw	r20, r26
     23a:	88 e0       	ldi	r24, 0x08	; 8
     23c:	ea 01       	movw	r28, r20
     23e:	09 90       	ld	r0, Y+
     240:	ae 01       	movw	r20, r28
     242:	e9 01       	movw	r28, r18
     244:	09 92       	st	Y+, r0
     246:	9e 01       	movw	r18, r28
     248:	81 50       	subi	r24, 0x01	; 1
     24a:	c1 f7       	brne	.-16     	; 0x23c <_fpadd_parts+0x58>
     24c:	e2 01       	movw	r28, r4
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	11 96       	adiw	r26, 0x01	; 1
     252:	9c 91       	ld	r25, X
     254:	89 23       	and	r24, r25
     256:	81 83       	std	Z+1, r24	; 0x01
     258:	08 c1       	rjmp	.+528    	; 0x46a <_fpadd_parts+0x286>
     25a:	92 30       	cpi	r25, 0x02	; 2
     25c:	09 f4       	brne	.+2      	; 0x260 <_fpadd_parts+0x7c>
     25e:	07 c1       	rjmp	.+526    	; 0x46e <_fpadd_parts+0x28a>
     260:	12 96       	adiw	r26, 0x02	; 2
     262:	2d 90       	ld	r2, X+
     264:	3c 90       	ld	r3, X
     266:	13 97       	sbiw	r26, 0x03	; 3
     268:	eb 01       	movw	r28, r22
     26a:	8a 81       	ldd	r24, Y+2	; 0x02
     26c:	9b 81       	ldd	r25, Y+3	; 0x03
     26e:	14 96       	adiw	r26, 0x04	; 4
     270:	ad 90       	ld	r10, X+
     272:	bd 90       	ld	r11, X+
     274:	cd 90       	ld	r12, X+
     276:	dc 90       	ld	r13, X
     278:	17 97       	sbiw	r26, 0x07	; 7
     27a:	ec 80       	ldd	r14, Y+4	; 0x04
     27c:	fd 80       	ldd	r15, Y+5	; 0x05
     27e:	0e 81       	ldd	r16, Y+6	; 0x06
     280:	1f 81       	ldd	r17, Y+7	; 0x07
     282:	91 01       	movw	r18, r2
     284:	28 1b       	sub	r18, r24
     286:	39 0b       	sbc	r19, r25
     288:	b9 01       	movw	r22, r18
     28a:	37 ff       	sbrs	r19, 7
     28c:	04 c0       	rjmp	.+8      	; 0x296 <_fpadd_parts+0xb2>
     28e:	66 27       	eor	r22, r22
     290:	77 27       	eor	r23, r23
     292:	62 1b       	sub	r22, r18
     294:	73 0b       	sbc	r23, r19
     296:	60 32       	cpi	r22, 0x20	; 32
     298:	71 05       	cpc	r23, r1
     29a:	0c f0       	brlt	.+2      	; 0x29e <_fpadd_parts+0xba>
     29c:	61 c0       	rjmp	.+194    	; 0x360 <_fpadd_parts+0x17c>
     29e:	12 16       	cp	r1, r18
     2a0:	13 06       	cpc	r1, r19
     2a2:	6c f5       	brge	.+90     	; 0x2fe <_fpadd_parts+0x11a>
     2a4:	37 01       	movw	r6, r14
     2a6:	48 01       	movw	r8, r16
     2a8:	06 2e       	mov	r0, r22
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <_fpadd_parts+0xd0>
     2ac:	96 94       	lsr	r9
     2ae:	87 94       	ror	r8
     2b0:	77 94       	ror	r7
     2b2:	67 94       	ror	r6
     2b4:	0a 94       	dec	r0
     2b6:	d2 f7       	brpl	.-12     	; 0x2ac <_fpadd_parts+0xc8>
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	40 e0       	ldi	r20, 0x00	; 0
     2be:	50 e0       	ldi	r21, 0x00	; 0
     2c0:	04 c0       	rjmp	.+8      	; 0x2ca <_fpadd_parts+0xe6>
     2c2:	22 0f       	add	r18, r18
     2c4:	33 1f       	adc	r19, r19
     2c6:	44 1f       	adc	r20, r20
     2c8:	55 1f       	adc	r21, r21
     2ca:	6a 95       	dec	r22
     2cc:	d2 f7       	brpl	.-12     	; 0x2c2 <_fpadd_parts+0xde>
     2ce:	21 50       	subi	r18, 0x01	; 1
     2d0:	30 40       	sbci	r19, 0x00	; 0
     2d2:	40 40       	sbci	r20, 0x00	; 0
     2d4:	50 40       	sbci	r21, 0x00	; 0
     2d6:	2e 21       	and	r18, r14
     2d8:	3f 21       	and	r19, r15
     2da:	40 23       	and	r20, r16
     2dc:	51 23       	and	r21, r17
     2de:	21 15       	cp	r18, r1
     2e0:	31 05       	cpc	r19, r1
     2e2:	41 05       	cpc	r20, r1
     2e4:	51 05       	cpc	r21, r1
     2e6:	21 f0       	breq	.+8      	; 0x2f0 <_fpadd_parts+0x10c>
     2e8:	21 e0       	ldi	r18, 0x01	; 1
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	40 e0       	ldi	r20, 0x00	; 0
     2ee:	50 e0       	ldi	r21, 0x00	; 0
     2f0:	79 01       	movw	r14, r18
     2f2:	8a 01       	movw	r16, r20
     2f4:	e6 28       	or	r14, r6
     2f6:	f7 28       	or	r15, r7
     2f8:	08 29       	or	r16, r8
     2fa:	19 29       	or	r17, r9
     2fc:	3c c0       	rjmp	.+120    	; 0x376 <_fpadd_parts+0x192>
     2fe:	23 2b       	or	r18, r19
     300:	d1 f1       	breq	.+116    	; 0x376 <_fpadd_parts+0x192>
     302:	26 0e       	add	r2, r22
     304:	37 1e       	adc	r3, r23
     306:	35 01       	movw	r6, r10
     308:	46 01       	movw	r8, r12
     30a:	06 2e       	mov	r0, r22
     30c:	04 c0       	rjmp	.+8      	; 0x316 <_fpadd_parts+0x132>
     30e:	96 94       	lsr	r9
     310:	87 94       	ror	r8
     312:	77 94       	ror	r7
     314:	67 94       	ror	r6
     316:	0a 94       	dec	r0
     318:	d2 f7       	brpl	.-12     	; 0x30e <_fpadd_parts+0x12a>
     31a:	21 e0       	ldi	r18, 0x01	; 1
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	40 e0       	ldi	r20, 0x00	; 0
     320:	50 e0       	ldi	r21, 0x00	; 0
     322:	04 c0       	rjmp	.+8      	; 0x32c <_fpadd_parts+0x148>
     324:	22 0f       	add	r18, r18
     326:	33 1f       	adc	r19, r19
     328:	44 1f       	adc	r20, r20
     32a:	55 1f       	adc	r21, r21
     32c:	6a 95       	dec	r22
     32e:	d2 f7       	brpl	.-12     	; 0x324 <_fpadd_parts+0x140>
     330:	21 50       	subi	r18, 0x01	; 1
     332:	30 40       	sbci	r19, 0x00	; 0
     334:	40 40       	sbci	r20, 0x00	; 0
     336:	50 40       	sbci	r21, 0x00	; 0
     338:	2a 21       	and	r18, r10
     33a:	3b 21       	and	r19, r11
     33c:	4c 21       	and	r20, r12
     33e:	5d 21       	and	r21, r13
     340:	21 15       	cp	r18, r1
     342:	31 05       	cpc	r19, r1
     344:	41 05       	cpc	r20, r1
     346:	51 05       	cpc	r21, r1
     348:	21 f0       	breq	.+8      	; 0x352 <_fpadd_parts+0x16e>
     34a:	21 e0       	ldi	r18, 0x01	; 1
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	40 e0       	ldi	r20, 0x00	; 0
     350:	50 e0       	ldi	r21, 0x00	; 0
     352:	59 01       	movw	r10, r18
     354:	6a 01       	movw	r12, r20
     356:	a6 28       	or	r10, r6
     358:	b7 28       	or	r11, r7
     35a:	c8 28       	or	r12, r8
     35c:	d9 28       	or	r13, r9
     35e:	0b c0       	rjmp	.+22     	; 0x376 <_fpadd_parts+0x192>
     360:	82 15       	cp	r24, r2
     362:	93 05       	cpc	r25, r3
     364:	2c f0       	brlt	.+10     	; 0x370 <_fpadd_parts+0x18c>
     366:	1c 01       	movw	r2, r24
     368:	aa 24       	eor	r10, r10
     36a:	bb 24       	eor	r11, r11
     36c:	65 01       	movw	r12, r10
     36e:	03 c0       	rjmp	.+6      	; 0x376 <_fpadd_parts+0x192>
     370:	ee 24       	eor	r14, r14
     372:	ff 24       	eor	r15, r15
     374:	87 01       	movw	r16, r14
     376:	11 96       	adiw	r26, 0x01	; 1
     378:	9c 91       	ld	r25, X
     37a:	d2 01       	movw	r26, r4
     37c:	11 96       	adiw	r26, 0x01	; 1
     37e:	8c 91       	ld	r24, X
     380:	98 17       	cp	r25, r24
     382:	09 f4       	brne	.+2      	; 0x386 <_fpadd_parts+0x1a2>
     384:	45 c0       	rjmp	.+138    	; 0x410 <_fpadd_parts+0x22c>
     386:	99 23       	and	r25, r25
     388:	39 f0       	breq	.+14     	; 0x398 <_fpadd_parts+0x1b4>
     38a:	a8 01       	movw	r20, r16
     38c:	97 01       	movw	r18, r14
     38e:	2a 19       	sub	r18, r10
     390:	3b 09       	sbc	r19, r11
     392:	4c 09       	sbc	r20, r12
     394:	5d 09       	sbc	r21, r13
     396:	06 c0       	rjmp	.+12     	; 0x3a4 <_fpadd_parts+0x1c0>
     398:	a6 01       	movw	r20, r12
     39a:	95 01       	movw	r18, r10
     39c:	2e 19       	sub	r18, r14
     39e:	3f 09       	sbc	r19, r15
     3a0:	40 0b       	sbc	r20, r16
     3a2:	51 0b       	sbc	r21, r17
     3a4:	57 fd       	sbrc	r21, 7
     3a6:	08 c0       	rjmp	.+16     	; 0x3b8 <_fpadd_parts+0x1d4>
     3a8:	11 82       	std	Z+1, r1	; 0x01
     3aa:	33 82       	std	Z+3, r3	; 0x03
     3ac:	22 82       	std	Z+2, r2	; 0x02
     3ae:	24 83       	std	Z+4, r18	; 0x04
     3b0:	35 83       	std	Z+5, r19	; 0x05
     3b2:	46 83       	std	Z+6, r20	; 0x06
     3b4:	57 83       	std	Z+7, r21	; 0x07
     3b6:	1d c0       	rjmp	.+58     	; 0x3f2 <_fpadd_parts+0x20e>
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	81 83       	std	Z+1, r24	; 0x01
     3bc:	33 82       	std	Z+3, r3	; 0x03
     3be:	22 82       	std	Z+2, r2	; 0x02
     3c0:	88 27       	eor	r24, r24
     3c2:	99 27       	eor	r25, r25
     3c4:	dc 01       	movw	r26, r24
     3c6:	82 1b       	sub	r24, r18
     3c8:	93 0b       	sbc	r25, r19
     3ca:	a4 0b       	sbc	r26, r20
     3cc:	b5 0b       	sbc	r27, r21
     3ce:	84 83       	std	Z+4, r24	; 0x04
     3d0:	95 83       	std	Z+5, r25	; 0x05
     3d2:	a6 83       	std	Z+6, r26	; 0x06
     3d4:	b7 83       	std	Z+7, r27	; 0x07
     3d6:	0d c0       	rjmp	.+26     	; 0x3f2 <_fpadd_parts+0x20e>
     3d8:	22 0f       	add	r18, r18
     3da:	33 1f       	adc	r19, r19
     3dc:	44 1f       	adc	r20, r20
     3de:	55 1f       	adc	r21, r21
     3e0:	24 83       	std	Z+4, r18	; 0x04
     3e2:	35 83       	std	Z+5, r19	; 0x05
     3e4:	46 83       	std	Z+6, r20	; 0x06
     3e6:	57 83       	std	Z+7, r21	; 0x07
     3e8:	82 81       	ldd	r24, Z+2	; 0x02
     3ea:	93 81       	ldd	r25, Z+3	; 0x03
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	93 83       	std	Z+3, r25	; 0x03
     3f0:	82 83       	std	Z+2, r24	; 0x02
     3f2:	24 81       	ldd	r18, Z+4	; 0x04
     3f4:	35 81       	ldd	r19, Z+5	; 0x05
     3f6:	46 81       	ldd	r20, Z+6	; 0x06
     3f8:	57 81       	ldd	r21, Z+7	; 0x07
     3fa:	da 01       	movw	r26, r20
     3fc:	c9 01       	movw	r24, r18
     3fe:	01 97       	sbiw	r24, 0x01	; 1
     400:	a1 09       	sbc	r26, r1
     402:	b1 09       	sbc	r27, r1
     404:	8f 5f       	subi	r24, 0xFF	; 255
     406:	9f 4f       	sbci	r25, 0xFF	; 255
     408:	af 4f       	sbci	r26, 0xFF	; 255
     40a:	bf 43       	sbci	r27, 0x3F	; 63
     40c:	28 f3       	brcs	.-54     	; 0x3d8 <_fpadd_parts+0x1f4>
     40e:	0b c0       	rjmp	.+22     	; 0x426 <_fpadd_parts+0x242>
     410:	91 83       	std	Z+1, r25	; 0x01
     412:	33 82       	std	Z+3, r3	; 0x03
     414:	22 82       	std	Z+2, r2	; 0x02
     416:	ea 0c       	add	r14, r10
     418:	fb 1c       	adc	r15, r11
     41a:	0c 1d       	adc	r16, r12
     41c:	1d 1d       	adc	r17, r13
     41e:	e4 82       	std	Z+4, r14	; 0x04
     420:	f5 82       	std	Z+5, r15	; 0x05
     422:	06 83       	std	Z+6, r16	; 0x06
     424:	17 83       	std	Z+7, r17	; 0x07
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	80 83       	st	Z, r24
     42a:	24 81       	ldd	r18, Z+4	; 0x04
     42c:	35 81       	ldd	r19, Z+5	; 0x05
     42e:	46 81       	ldd	r20, Z+6	; 0x06
     430:	57 81       	ldd	r21, Z+7	; 0x07
     432:	57 ff       	sbrs	r21, 7
     434:	1a c0       	rjmp	.+52     	; 0x46a <_fpadd_parts+0x286>
     436:	c9 01       	movw	r24, r18
     438:	aa 27       	eor	r26, r26
     43a:	97 fd       	sbrc	r25, 7
     43c:	a0 95       	com	r26
     43e:	ba 2f       	mov	r27, r26
     440:	81 70       	andi	r24, 0x01	; 1
     442:	90 70       	andi	r25, 0x00	; 0
     444:	a0 70       	andi	r26, 0x00	; 0
     446:	b0 70       	andi	r27, 0x00	; 0
     448:	56 95       	lsr	r21
     44a:	47 95       	ror	r20
     44c:	37 95       	ror	r19
     44e:	27 95       	ror	r18
     450:	82 2b       	or	r24, r18
     452:	93 2b       	or	r25, r19
     454:	a4 2b       	or	r26, r20
     456:	b5 2b       	or	r27, r21
     458:	84 83       	std	Z+4, r24	; 0x04
     45a:	95 83       	std	Z+5, r25	; 0x05
     45c:	a6 83       	std	Z+6, r26	; 0x06
     45e:	b7 83       	std	Z+7, r27	; 0x07
     460:	82 81       	ldd	r24, Z+2	; 0x02
     462:	93 81       	ldd	r25, Z+3	; 0x03
     464:	01 96       	adiw	r24, 0x01	; 1
     466:	93 83       	std	Z+3, r25	; 0x03
     468:	82 83       	std	Z+2, r24	; 0x02
     46a:	df 01       	movw	r26, r30
     46c:	01 c0       	rjmp	.+2      	; 0x470 <_fpadd_parts+0x28c>
     46e:	d2 01       	movw	r26, r4
     470:	cd 01       	movw	r24, r26
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
     476:	e2 e1       	ldi	r30, 0x12	; 18
     478:	0c 94 b7 28 	jmp	0x516e	; 0x516e <__epilogue_restores__>

0000047c <__subsf3>:
     47c:	a0 e2       	ldi	r26, 0x20	; 32
     47e:	b0 e0       	ldi	r27, 0x00	; 0
     480:	e4 e4       	ldi	r30, 0x44	; 68
     482:	f2 e0       	ldi	r31, 0x02	; 2
     484:	0c 94 a7 28 	jmp	0x514e	; 0x514e <__prologue_saves__+0x18>
     488:	69 83       	std	Y+1, r22	; 0x01
     48a:	7a 83       	std	Y+2, r23	; 0x02
     48c:	8b 83       	std	Y+3, r24	; 0x03
     48e:	9c 83       	std	Y+4, r25	; 0x04
     490:	2d 83       	std	Y+5, r18	; 0x05
     492:	3e 83       	std	Y+6, r19	; 0x06
     494:	4f 83       	std	Y+7, r20	; 0x07
     496:	58 87       	std	Y+8, r21	; 0x08
     498:	e9 e0       	ldi	r30, 0x09	; 9
     49a:	ee 2e       	mov	r14, r30
     49c:	f1 2c       	mov	r15, r1
     49e:	ec 0e       	add	r14, r28
     4a0:	fd 1e       	adc	r15, r29
     4a2:	ce 01       	movw	r24, r28
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	b7 01       	movw	r22, r14
     4a8:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     4ac:	8e 01       	movw	r16, r28
     4ae:	0f 5e       	subi	r16, 0xEF	; 239
     4b0:	1f 4f       	sbci	r17, 0xFF	; 255
     4b2:	ce 01       	movw	r24, r28
     4b4:	05 96       	adiw	r24, 0x05	; 5
     4b6:	b8 01       	movw	r22, r16
     4b8:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     4bc:	8a 89       	ldd	r24, Y+18	; 0x12
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	89 27       	eor	r24, r25
     4c2:	8a 8b       	std	Y+18, r24	; 0x12
     4c4:	c7 01       	movw	r24, r14
     4c6:	b8 01       	movw	r22, r16
     4c8:	ae 01       	movw	r20, r28
     4ca:	47 5e       	subi	r20, 0xE7	; 231
     4cc:	5f 4f       	sbci	r21, 0xFF	; 255
     4ce:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     4d2:	0e 94 03 06 	call	0xc06	; 0xc06 <__pack_f>
     4d6:	a0 96       	adiw	r28, 0x20	; 32
     4d8:	e6 e0       	ldi	r30, 0x06	; 6
     4da:	0c 94 c3 28 	jmp	0x5186	; 0x5186 <__epilogue_restores__+0x18>

000004de <__addsf3>:
     4de:	a0 e2       	ldi	r26, 0x20	; 32
     4e0:	b0 e0       	ldi	r27, 0x00	; 0
     4e2:	e5 e7       	ldi	r30, 0x75	; 117
     4e4:	f2 e0       	ldi	r31, 0x02	; 2
     4e6:	0c 94 a7 28 	jmp	0x514e	; 0x514e <__prologue_saves__+0x18>
     4ea:	69 83       	std	Y+1, r22	; 0x01
     4ec:	7a 83       	std	Y+2, r23	; 0x02
     4ee:	8b 83       	std	Y+3, r24	; 0x03
     4f0:	9c 83       	std	Y+4, r25	; 0x04
     4f2:	2d 83       	std	Y+5, r18	; 0x05
     4f4:	3e 83       	std	Y+6, r19	; 0x06
     4f6:	4f 83       	std	Y+7, r20	; 0x07
     4f8:	58 87       	std	Y+8, r21	; 0x08
     4fa:	f9 e0       	ldi	r31, 0x09	; 9
     4fc:	ef 2e       	mov	r14, r31
     4fe:	f1 2c       	mov	r15, r1
     500:	ec 0e       	add	r14, r28
     502:	fd 1e       	adc	r15, r29
     504:	ce 01       	movw	r24, r28
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	b7 01       	movw	r22, r14
     50a:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     50e:	8e 01       	movw	r16, r28
     510:	0f 5e       	subi	r16, 0xEF	; 239
     512:	1f 4f       	sbci	r17, 0xFF	; 255
     514:	ce 01       	movw	r24, r28
     516:	05 96       	adiw	r24, 0x05	; 5
     518:	b8 01       	movw	r22, r16
     51a:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     51e:	c7 01       	movw	r24, r14
     520:	b8 01       	movw	r22, r16
     522:	ae 01       	movw	r20, r28
     524:	47 5e       	subi	r20, 0xE7	; 231
     526:	5f 4f       	sbci	r21, 0xFF	; 255
     528:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     52c:	0e 94 03 06 	call	0xc06	; 0xc06 <__pack_f>
     530:	a0 96       	adiw	r28, 0x20	; 32
     532:	e6 e0       	ldi	r30, 0x06	; 6
     534:	0c 94 c3 28 	jmp	0x5186	; 0x5186 <__epilogue_restores__+0x18>

00000538 <__mulsf3>:
     538:	a0 e2       	ldi	r26, 0x20	; 32
     53a:	b0 e0       	ldi	r27, 0x00	; 0
     53c:	e2 ea       	ldi	r30, 0xA2	; 162
     53e:	f2 e0       	ldi	r31, 0x02	; 2
     540:	0c 94 9b 28 	jmp	0x5136	; 0x5136 <__prologue_saves__>
     544:	69 83       	std	Y+1, r22	; 0x01
     546:	7a 83       	std	Y+2, r23	; 0x02
     548:	8b 83       	std	Y+3, r24	; 0x03
     54a:	9c 83       	std	Y+4, r25	; 0x04
     54c:	2d 83       	std	Y+5, r18	; 0x05
     54e:	3e 83       	std	Y+6, r19	; 0x06
     550:	4f 83       	std	Y+7, r20	; 0x07
     552:	58 87       	std	Y+8, r21	; 0x08
     554:	ce 01       	movw	r24, r28
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	be 01       	movw	r22, r28
     55a:	67 5f       	subi	r22, 0xF7	; 247
     55c:	7f 4f       	sbci	r23, 0xFF	; 255
     55e:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     562:	ce 01       	movw	r24, r28
     564:	05 96       	adiw	r24, 0x05	; 5
     566:	be 01       	movw	r22, r28
     568:	6f 5e       	subi	r22, 0xEF	; 239
     56a:	7f 4f       	sbci	r23, 0xFF	; 255
     56c:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     570:	99 85       	ldd	r25, Y+9	; 0x09
     572:	92 30       	cpi	r25, 0x02	; 2
     574:	88 f0       	brcs	.+34     	; 0x598 <__mulsf3+0x60>
     576:	89 89       	ldd	r24, Y+17	; 0x11
     578:	82 30       	cpi	r24, 0x02	; 2
     57a:	c8 f0       	brcs	.+50     	; 0x5ae <__mulsf3+0x76>
     57c:	94 30       	cpi	r25, 0x04	; 4
     57e:	19 f4       	brne	.+6      	; 0x586 <__mulsf3+0x4e>
     580:	82 30       	cpi	r24, 0x02	; 2
     582:	51 f4       	brne	.+20     	; 0x598 <__mulsf3+0x60>
     584:	04 c0       	rjmp	.+8      	; 0x58e <__mulsf3+0x56>
     586:	84 30       	cpi	r24, 0x04	; 4
     588:	29 f4       	brne	.+10     	; 0x594 <__mulsf3+0x5c>
     58a:	92 30       	cpi	r25, 0x02	; 2
     58c:	81 f4       	brne	.+32     	; 0x5ae <__mulsf3+0x76>
     58e:	80 ef       	ldi	r24, 0xF0	; 240
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	c6 c0       	rjmp	.+396    	; 0x720 <__mulsf3+0x1e8>
     594:	92 30       	cpi	r25, 0x02	; 2
     596:	49 f4       	brne	.+18     	; 0x5aa <__mulsf3+0x72>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	9a 85       	ldd	r25, Y+10	; 0x0a
     59c:	8a 89       	ldd	r24, Y+18	; 0x12
     59e:	98 13       	cpse	r25, r24
     5a0:	21 e0       	ldi	r18, 0x01	; 1
     5a2:	2a 87       	std	Y+10, r18	; 0x0a
     5a4:	ce 01       	movw	r24, r28
     5a6:	09 96       	adiw	r24, 0x09	; 9
     5a8:	bb c0       	rjmp	.+374    	; 0x720 <__mulsf3+0x1e8>
     5aa:	82 30       	cpi	r24, 0x02	; 2
     5ac:	49 f4       	brne	.+18     	; 0x5c0 <__mulsf3+0x88>
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b2:	8a 89       	ldd	r24, Y+18	; 0x12
     5b4:	98 13       	cpse	r25, r24
     5b6:	21 e0       	ldi	r18, 0x01	; 1
     5b8:	2a 8b       	std	Y+18, r18	; 0x12
     5ba:	ce 01       	movw	r24, r28
     5bc:	41 96       	adiw	r24, 0x11	; 17
     5be:	b0 c0       	rjmp	.+352    	; 0x720 <__mulsf3+0x1e8>
     5c0:	2d 84       	ldd	r2, Y+13	; 0x0d
     5c2:	3e 84       	ldd	r3, Y+14	; 0x0e
     5c4:	4f 84       	ldd	r4, Y+15	; 0x0f
     5c6:	58 88       	ldd	r5, Y+16	; 0x10
     5c8:	6d 88       	ldd	r6, Y+21	; 0x15
     5ca:	7e 88       	ldd	r7, Y+22	; 0x16
     5cc:	8f 88       	ldd	r8, Y+23	; 0x17
     5ce:	98 8c       	ldd	r9, Y+24	; 0x18
     5d0:	ee 24       	eor	r14, r14
     5d2:	ff 24       	eor	r15, r15
     5d4:	87 01       	movw	r16, r14
     5d6:	aa 24       	eor	r10, r10
     5d8:	bb 24       	eor	r11, r11
     5da:	65 01       	movw	r12, r10
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	70 e0       	ldi	r23, 0x00	; 0
     5e4:	e0 e0       	ldi	r30, 0x00	; 0
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	c1 01       	movw	r24, r2
     5ea:	81 70       	andi	r24, 0x01	; 1
     5ec:	90 70       	andi	r25, 0x00	; 0
     5ee:	89 2b       	or	r24, r25
     5f0:	e9 f0       	breq	.+58     	; 0x62c <__mulsf3+0xf4>
     5f2:	e6 0c       	add	r14, r6
     5f4:	f7 1c       	adc	r15, r7
     5f6:	08 1d       	adc	r16, r8
     5f8:	19 1d       	adc	r17, r9
     5fa:	9a 01       	movw	r18, r20
     5fc:	ab 01       	movw	r20, r22
     5fe:	2a 0d       	add	r18, r10
     600:	3b 1d       	adc	r19, r11
     602:	4c 1d       	adc	r20, r12
     604:	5d 1d       	adc	r21, r13
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	a0 e0       	ldi	r26, 0x00	; 0
     60c:	b0 e0       	ldi	r27, 0x00	; 0
     60e:	e6 14       	cp	r14, r6
     610:	f7 04       	cpc	r15, r7
     612:	08 05       	cpc	r16, r8
     614:	19 05       	cpc	r17, r9
     616:	20 f4       	brcc	.+8      	; 0x620 <__mulsf3+0xe8>
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	a0 e0       	ldi	r26, 0x00	; 0
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	ba 01       	movw	r22, r20
     622:	a9 01       	movw	r20, r18
     624:	48 0f       	add	r20, r24
     626:	59 1f       	adc	r21, r25
     628:	6a 1f       	adc	r22, r26
     62a:	7b 1f       	adc	r23, r27
     62c:	aa 0c       	add	r10, r10
     62e:	bb 1c       	adc	r11, r11
     630:	cc 1c       	adc	r12, r12
     632:	dd 1c       	adc	r13, r13
     634:	97 fe       	sbrs	r9, 7
     636:	08 c0       	rjmp	.+16     	; 0x648 <__mulsf3+0x110>
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	a0 e0       	ldi	r26, 0x00	; 0
     63e:	b0 e0       	ldi	r27, 0x00	; 0
     640:	a8 2a       	or	r10, r24
     642:	b9 2a       	or	r11, r25
     644:	ca 2a       	or	r12, r26
     646:	db 2a       	or	r13, r27
     648:	31 96       	adiw	r30, 0x01	; 1
     64a:	e0 32       	cpi	r30, 0x20	; 32
     64c:	f1 05       	cpc	r31, r1
     64e:	49 f0       	breq	.+18     	; 0x662 <__mulsf3+0x12a>
     650:	66 0c       	add	r6, r6
     652:	77 1c       	adc	r7, r7
     654:	88 1c       	adc	r8, r8
     656:	99 1c       	adc	r9, r9
     658:	56 94       	lsr	r5
     65a:	47 94       	ror	r4
     65c:	37 94       	ror	r3
     65e:	27 94       	ror	r2
     660:	c3 cf       	rjmp	.-122    	; 0x5e8 <__mulsf3+0xb0>
     662:	fa 85       	ldd	r31, Y+10	; 0x0a
     664:	ea 89       	ldd	r30, Y+18	; 0x12
     666:	2b 89       	ldd	r18, Y+19	; 0x13
     668:	3c 89       	ldd	r19, Y+20	; 0x14
     66a:	8b 85       	ldd	r24, Y+11	; 0x0b
     66c:	9c 85       	ldd	r25, Y+12	; 0x0c
     66e:	28 0f       	add	r18, r24
     670:	39 1f       	adc	r19, r25
     672:	2e 5f       	subi	r18, 0xFE	; 254
     674:	3f 4f       	sbci	r19, 0xFF	; 255
     676:	17 c0       	rjmp	.+46     	; 0x6a6 <__mulsf3+0x16e>
     678:	ca 01       	movw	r24, r20
     67a:	81 70       	andi	r24, 0x01	; 1
     67c:	90 70       	andi	r25, 0x00	; 0
     67e:	89 2b       	or	r24, r25
     680:	61 f0       	breq	.+24     	; 0x69a <__mulsf3+0x162>
     682:	16 95       	lsr	r17
     684:	07 95       	ror	r16
     686:	f7 94       	ror	r15
     688:	e7 94       	ror	r14
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	a0 e0       	ldi	r26, 0x00	; 0
     690:	b0 e8       	ldi	r27, 0x80	; 128
     692:	e8 2a       	or	r14, r24
     694:	f9 2a       	or	r15, r25
     696:	0a 2b       	or	r16, r26
     698:	1b 2b       	or	r17, r27
     69a:	76 95       	lsr	r23
     69c:	67 95       	ror	r22
     69e:	57 95       	ror	r21
     6a0:	47 95       	ror	r20
     6a2:	2f 5f       	subi	r18, 0xFF	; 255
     6a4:	3f 4f       	sbci	r19, 0xFF	; 255
     6a6:	77 fd       	sbrc	r23, 7
     6a8:	e7 cf       	rjmp	.-50     	; 0x678 <__mulsf3+0x140>
     6aa:	0c c0       	rjmp	.+24     	; 0x6c4 <__mulsf3+0x18c>
     6ac:	44 0f       	add	r20, r20
     6ae:	55 1f       	adc	r21, r21
     6b0:	66 1f       	adc	r22, r22
     6b2:	77 1f       	adc	r23, r23
     6b4:	17 fd       	sbrc	r17, 7
     6b6:	41 60       	ori	r20, 0x01	; 1
     6b8:	ee 0c       	add	r14, r14
     6ba:	ff 1c       	adc	r15, r15
     6bc:	00 1f       	adc	r16, r16
     6be:	11 1f       	adc	r17, r17
     6c0:	21 50       	subi	r18, 0x01	; 1
     6c2:	30 40       	sbci	r19, 0x00	; 0
     6c4:	40 30       	cpi	r20, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	59 07       	cpc	r21, r25
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	69 07       	cpc	r22, r25
     6ce:	90 e4       	ldi	r25, 0x40	; 64
     6d0:	79 07       	cpc	r23, r25
     6d2:	60 f3       	brcs	.-40     	; 0x6ac <__mulsf3+0x174>
     6d4:	2b 8f       	std	Y+27, r18	; 0x1b
     6d6:	3c 8f       	std	Y+28, r19	; 0x1c
     6d8:	db 01       	movw	r26, r22
     6da:	ca 01       	movw	r24, r20
     6dc:	8f 77       	andi	r24, 0x7F	; 127
     6de:	90 70       	andi	r25, 0x00	; 0
     6e0:	a0 70       	andi	r26, 0x00	; 0
     6e2:	b0 70       	andi	r27, 0x00	; 0
     6e4:	80 34       	cpi	r24, 0x40	; 64
     6e6:	91 05       	cpc	r25, r1
     6e8:	a1 05       	cpc	r26, r1
     6ea:	b1 05       	cpc	r27, r1
     6ec:	61 f4       	brne	.+24     	; 0x706 <__mulsf3+0x1ce>
     6ee:	47 fd       	sbrc	r20, 7
     6f0:	0a c0       	rjmp	.+20     	; 0x706 <__mulsf3+0x1ce>
     6f2:	e1 14       	cp	r14, r1
     6f4:	f1 04       	cpc	r15, r1
     6f6:	01 05       	cpc	r16, r1
     6f8:	11 05       	cpc	r17, r1
     6fa:	29 f0       	breq	.+10     	; 0x706 <__mulsf3+0x1ce>
     6fc:	40 5c       	subi	r20, 0xC0	; 192
     6fe:	5f 4f       	sbci	r21, 0xFF	; 255
     700:	6f 4f       	sbci	r22, 0xFF	; 255
     702:	7f 4f       	sbci	r23, 0xFF	; 255
     704:	40 78       	andi	r20, 0x80	; 128
     706:	1a 8e       	std	Y+26, r1	; 0x1a
     708:	fe 17       	cp	r31, r30
     70a:	11 f0       	breq	.+4      	; 0x710 <__mulsf3+0x1d8>
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	8a 8f       	std	Y+26, r24	; 0x1a
     710:	4d 8f       	std	Y+29, r20	; 0x1d
     712:	5e 8f       	std	Y+30, r21	; 0x1e
     714:	6f 8f       	std	Y+31, r22	; 0x1f
     716:	78 a3       	std	Y+32, r23	; 0x20
     718:	83 e0       	ldi	r24, 0x03	; 3
     71a:	89 8f       	std	Y+25, r24	; 0x19
     71c:	ce 01       	movw	r24, r28
     71e:	49 96       	adiw	r24, 0x19	; 25
     720:	0e 94 03 06 	call	0xc06	; 0xc06 <__pack_f>
     724:	a0 96       	adiw	r28, 0x20	; 32
     726:	e2 e1       	ldi	r30, 0x12	; 18
     728:	0c 94 b7 28 	jmp	0x516e	; 0x516e <__epilogue_restores__>

0000072c <__divsf3>:
     72c:	a8 e1       	ldi	r26, 0x18	; 24
     72e:	b0 e0       	ldi	r27, 0x00	; 0
     730:	ec e9       	ldi	r30, 0x9C	; 156
     732:	f3 e0       	ldi	r31, 0x03	; 3
     734:	0c 94 a3 28 	jmp	0x5146	; 0x5146 <__prologue_saves__+0x10>
     738:	69 83       	std	Y+1, r22	; 0x01
     73a:	7a 83       	std	Y+2, r23	; 0x02
     73c:	8b 83       	std	Y+3, r24	; 0x03
     73e:	9c 83       	std	Y+4, r25	; 0x04
     740:	2d 83       	std	Y+5, r18	; 0x05
     742:	3e 83       	std	Y+6, r19	; 0x06
     744:	4f 83       	std	Y+7, r20	; 0x07
     746:	58 87       	std	Y+8, r21	; 0x08
     748:	b9 e0       	ldi	r27, 0x09	; 9
     74a:	eb 2e       	mov	r14, r27
     74c:	f1 2c       	mov	r15, r1
     74e:	ec 0e       	add	r14, r28
     750:	fd 1e       	adc	r15, r29
     752:	ce 01       	movw	r24, r28
     754:	01 96       	adiw	r24, 0x01	; 1
     756:	b7 01       	movw	r22, r14
     758:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     75c:	8e 01       	movw	r16, r28
     75e:	0f 5e       	subi	r16, 0xEF	; 239
     760:	1f 4f       	sbci	r17, 0xFF	; 255
     762:	ce 01       	movw	r24, r28
     764:	05 96       	adiw	r24, 0x05	; 5
     766:	b8 01       	movw	r22, r16
     768:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     76c:	29 85       	ldd	r18, Y+9	; 0x09
     76e:	22 30       	cpi	r18, 0x02	; 2
     770:	08 f4       	brcc	.+2      	; 0x774 <__divsf3+0x48>
     772:	7e c0       	rjmp	.+252    	; 0x870 <__stack+0x11>
     774:	39 89       	ldd	r19, Y+17	; 0x11
     776:	32 30       	cpi	r19, 0x02	; 2
     778:	10 f4       	brcc	.+4      	; 0x77e <__divsf3+0x52>
     77a:	b8 01       	movw	r22, r16
     77c:	7c c0       	rjmp	.+248    	; 0x876 <__stack+0x17>
     77e:	8a 85       	ldd	r24, Y+10	; 0x0a
     780:	9a 89       	ldd	r25, Y+18	; 0x12
     782:	89 27       	eor	r24, r25
     784:	8a 87       	std	Y+10, r24	; 0x0a
     786:	24 30       	cpi	r18, 0x04	; 4
     788:	11 f0       	breq	.+4      	; 0x78e <__divsf3+0x62>
     78a:	22 30       	cpi	r18, 0x02	; 2
     78c:	31 f4       	brne	.+12     	; 0x79a <__divsf3+0x6e>
     78e:	23 17       	cp	r18, r19
     790:	09 f0       	breq	.+2      	; 0x794 <__divsf3+0x68>
     792:	6e c0       	rjmp	.+220    	; 0x870 <__stack+0x11>
     794:	60 ef       	ldi	r22, 0xF0	; 240
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	6e c0       	rjmp	.+220    	; 0x876 <__stack+0x17>
     79a:	34 30       	cpi	r19, 0x04	; 4
     79c:	39 f4       	brne	.+14     	; 0x7ac <__divsf3+0x80>
     79e:	1d 86       	std	Y+13, r1	; 0x0d
     7a0:	1e 86       	std	Y+14, r1	; 0x0e
     7a2:	1f 86       	std	Y+15, r1	; 0x0f
     7a4:	18 8a       	std	Y+16, r1	; 0x10
     7a6:	1c 86       	std	Y+12, r1	; 0x0c
     7a8:	1b 86       	std	Y+11, r1	; 0x0b
     7aa:	04 c0       	rjmp	.+8      	; 0x7b4 <__divsf3+0x88>
     7ac:	32 30       	cpi	r19, 0x02	; 2
     7ae:	21 f4       	brne	.+8      	; 0x7b8 <__divsf3+0x8c>
     7b0:	84 e0       	ldi	r24, 0x04	; 4
     7b2:	89 87       	std	Y+9, r24	; 0x09
     7b4:	b7 01       	movw	r22, r14
     7b6:	5f c0       	rjmp	.+190    	; 0x876 <__stack+0x17>
     7b8:	2b 85       	ldd	r18, Y+11	; 0x0b
     7ba:	3c 85       	ldd	r19, Y+12	; 0x0c
     7bc:	8b 89       	ldd	r24, Y+19	; 0x13
     7be:	9c 89       	ldd	r25, Y+20	; 0x14
     7c0:	28 1b       	sub	r18, r24
     7c2:	39 0b       	sbc	r19, r25
     7c4:	3c 87       	std	Y+12, r19	; 0x0c
     7c6:	2b 87       	std	Y+11, r18	; 0x0b
     7c8:	ed 84       	ldd	r14, Y+13	; 0x0d
     7ca:	fe 84       	ldd	r15, Y+14	; 0x0e
     7cc:	0f 85       	ldd	r16, Y+15	; 0x0f
     7ce:	18 89       	ldd	r17, Y+16	; 0x10
     7d0:	ad 88       	ldd	r10, Y+21	; 0x15
     7d2:	be 88       	ldd	r11, Y+22	; 0x16
     7d4:	cf 88       	ldd	r12, Y+23	; 0x17
     7d6:	d8 8c       	ldd	r13, Y+24	; 0x18
     7d8:	ea 14       	cp	r14, r10
     7da:	fb 04       	cpc	r15, r11
     7dc:	0c 05       	cpc	r16, r12
     7de:	1d 05       	cpc	r17, r13
     7e0:	40 f4       	brcc	.+16     	; 0x7f2 <__divsf3+0xc6>
     7e2:	ee 0c       	add	r14, r14
     7e4:	ff 1c       	adc	r15, r15
     7e6:	00 1f       	adc	r16, r16
     7e8:	11 1f       	adc	r17, r17
     7ea:	21 50       	subi	r18, 0x01	; 1
     7ec:	30 40       	sbci	r19, 0x00	; 0
     7ee:	3c 87       	std	Y+12, r19	; 0x0c
     7f0:	2b 87       	std	Y+11, r18	; 0x0b
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	40 e0       	ldi	r20, 0x00	; 0
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	a0 e0       	ldi	r26, 0x00	; 0
     800:	b0 e4       	ldi	r27, 0x40	; 64
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	ea 14       	cp	r14, r10
     808:	fb 04       	cpc	r15, r11
     80a:	0c 05       	cpc	r16, r12
     80c:	1d 05       	cpc	r17, r13
     80e:	40 f0       	brcs	.+16     	; 0x820 <__divsf3+0xf4>
     810:	28 2b       	or	r18, r24
     812:	39 2b       	or	r19, r25
     814:	4a 2b       	or	r20, r26
     816:	5b 2b       	or	r21, r27
     818:	ea 18       	sub	r14, r10
     81a:	fb 08       	sbc	r15, r11
     81c:	0c 09       	sbc	r16, r12
     81e:	1d 09       	sbc	r17, r13
     820:	b6 95       	lsr	r27
     822:	a7 95       	ror	r26
     824:	97 95       	ror	r25
     826:	87 95       	ror	r24
     828:	ee 0c       	add	r14, r14
     82a:	ff 1c       	adc	r15, r15
     82c:	00 1f       	adc	r16, r16
     82e:	11 1f       	adc	r17, r17
     830:	6f 5f       	subi	r22, 0xFF	; 255
     832:	7f 4f       	sbci	r23, 0xFF	; 255
     834:	6f 31       	cpi	r22, 0x1F	; 31
     836:	71 05       	cpc	r23, r1
     838:	31 f7       	brne	.-52     	; 0x806 <__divsf3+0xda>
     83a:	da 01       	movw	r26, r20
     83c:	c9 01       	movw	r24, r18
     83e:	8f 77       	andi	r24, 0x7F	; 127
     840:	90 70       	andi	r25, 0x00	; 0
     842:	a0 70       	andi	r26, 0x00	; 0
     844:	b0 70       	andi	r27, 0x00	; 0
     846:	80 34       	cpi	r24, 0x40	; 64
     848:	91 05       	cpc	r25, r1
     84a:	a1 05       	cpc	r26, r1
     84c:	b1 05       	cpc	r27, r1
     84e:	61 f4       	brne	.+24     	; 0x868 <__stack+0x9>
     850:	27 fd       	sbrc	r18, 7
     852:	0a c0       	rjmp	.+20     	; 0x868 <__stack+0x9>
     854:	e1 14       	cp	r14, r1
     856:	f1 04       	cpc	r15, r1
     858:	01 05       	cpc	r16, r1
     85a:	11 05       	cpc	r17, r1
     85c:	29 f0       	breq	.+10     	; 0x868 <__stack+0x9>
     85e:	20 5c       	subi	r18, 0xC0	; 192
     860:	3f 4f       	sbci	r19, 0xFF	; 255
     862:	4f 4f       	sbci	r20, 0xFF	; 255
     864:	5f 4f       	sbci	r21, 0xFF	; 255
     866:	20 78       	andi	r18, 0x80	; 128
     868:	2d 87       	std	Y+13, r18	; 0x0d
     86a:	3e 87       	std	Y+14, r19	; 0x0e
     86c:	4f 87       	std	Y+15, r20	; 0x0f
     86e:	58 8b       	std	Y+16, r21	; 0x10
     870:	be 01       	movw	r22, r28
     872:	67 5f       	subi	r22, 0xF7	; 247
     874:	7f 4f       	sbci	r23, 0xFF	; 255
     876:	cb 01       	movw	r24, r22
     878:	0e 94 03 06 	call	0xc06	; 0xc06 <__pack_f>
     87c:	68 96       	adiw	r28, 0x18	; 24
     87e:	ea e0       	ldi	r30, 0x0A	; 10
     880:	0c 94 bf 28 	jmp	0x517e	; 0x517e <__epilogue_restores__+0x10>

00000884 <__gtsf2>:
     884:	a8 e1       	ldi	r26, 0x18	; 24
     886:	b0 e0       	ldi	r27, 0x00	; 0
     888:	e8 e4       	ldi	r30, 0x48	; 72
     88a:	f4 e0       	ldi	r31, 0x04	; 4
     88c:	0c 94 a7 28 	jmp	0x514e	; 0x514e <__prologue_saves__+0x18>
     890:	69 83       	std	Y+1, r22	; 0x01
     892:	7a 83       	std	Y+2, r23	; 0x02
     894:	8b 83       	std	Y+3, r24	; 0x03
     896:	9c 83       	std	Y+4, r25	; 0x04
     898:	2d 83       	std	Y+5, r18	; 0x05
     89a:	3e 83       	std	Y+6, r19	; 0x06
     89c:	4f 83       	std	Y+7, r20	; 0x07
     89e:	58 87       	std	Y+8, r21	; 0x08
     8a0:	89 e0       	ldi	r24, 0x09	; 9
     8a2:	e8 2e       	mov	r14, r24
     8a4:	f1 2c       	mov	r15, r1
     8a6:	ec 0e       	add	r14, r28
     8a8:	fd 1e       	adc	r15, r29
     8aa:	ce 01       	movw	r24, r28
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	b7 01       	movw	r22, r14
     8b0:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     8b4:	8e 01       	movw	r16, r28
     8b6:	0f 5e       	subi	r16, 0xEF	; 239
     8b8:	1f 4f       	sbci	r17, 0xFF	; 255
     8ba:	ce 01       	movw	r24, r28
     8bc:	05 96       	adiw	r24, 0x05	; 5
     8be:	b8 01       	movw	r22, r16
     8c0:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     8c4:	89 85       	ldd	r24, Y+9	; 0x09
     8c6:	82 30       	cpi	r24, 0x02	; 2
     8c8:	40 f0       	brcs	.+16     	; 0x8da <__gtsf2+0x56>
     8ca:	89 89       	ldd	r24, Y+17	; 0x11
     8cc:	82 30       	cpi	r24, 0x02	; 2
     8ce:	28 f0       	brcs	.+10     	; 0x8da <__gtsf2+0x56>
     8d0:	c7 01       	movw	r24, r14
     8d2:	b8 01       	movw	r22, r16
     8d4:	0e 94 50 07 	call	0xea0	; 0xea0 <__fpcmp_parts_f>
     8d8:	01 c0       	rjmp	.+2      	; 0x8dc <__gtsf2+0x58>
     8da:	8f ef       	ldi	r24, 0xFF	; 255
     8dc:	68 96       	adiw	r28, 0x18	; 24
     8de:	e6 e0       	ldi	r30, 0x06	; 6
     8e0:	0c 94 c3 28 	jmp	0x5186	; 0x5186 <__epilogue_restores__+0x18>

000008e4 <__gesf2>:
     8e4:	a8 e1       	ldi	r26, 0x18	; 24
     8e6:	b0 e0       	ldi	r27, 0x00	; 0
     8e8:	e8 e7       	ldi	r30, 0x78	; 120
     8ea:	f4 e0       	ldi	r31, 0x04	; 4
     8ec:	0c 94 a7 28 	jmp	0x514e	; 0x514e <__prologue_saves__+0x18>
     8f0:	69 83       	std	Y+1, r22	; 0x01
     8f2:	7a 83       	std	Y+2, r23	; 0x02
     8f4:	8b 83       	std	Y+3, r24	; 0x03
     8f6:	9c 83       	std	Y+4, r25	; 0x04
     8f8:	2d 83       	std	Y+5, r18	; 0x05
     8fa:	3e 83       	std	Y+6, r19	; 0x06
     8fc:	4f 83       	std	Y+7, r20	; 0x07
     8fe:	58 87       	std	Y+8, r21	; 0x08
     900:	89 e0       	ldi	r24, 0x09	; 9
     902:	e8 2e       	mov	r14, r24
     904:	f1 2c       	mov	r15, r1
     906:	ec 0e       	add	r14, r28
     908:	fd 1e       	adc	r15, r29
     90a:	ce 01       	movw	r24, r28
     90c:	01 96       	adiw	r24, 0x01	; 1
     90e:	b7 01       	movw	r22, r14
     910:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     914:	8e 01       	movw	r16, r28
     916:	0f 5e       	subi	r16, 0xEF	; 239
     918:	1f 4f       	sbci	r17, 0xFF	; 255
     91a:	ce 01       	movw	r24, r28
     91c:	05 96       	adiw	r24, 0x05	; 5
     91e:	b8 01       	movw	r22, r16
     920:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     924:	89 85       	ldd	r24, Y+9	; 0x09
     926:	82 30       	cpi	r24, 0x02	; 2
     928:	40 f0       	brcs	.+16     	; 0x93a <__gesf2+0x56>
     92a:	89 89       	ldd	r24, Y+17	; 0x11
     92c:	82 30       	cpi	r24, 0x02	; 2
     92e:	28 f0       	brcs	.+10     	; 0x93a <__gesf2+0x56>
     930:	c7 01       	movw	r24, r14
     932:	b8 01       	movw	r22, r16
     934:	0e 94 50 07 	call	0xea0	; 0xea0 <__fpcmp_parts_f>
     938:	01 c0       	rjmp	.+2      	; 0x93c <__gesf2+0x58>
     93a:	8f ef       	ldi	r24, 0xFF	; 255
     93c:	68 96       	adiw	r28, 0x18	; 24
     93e:	e6 e0       	ldi	r30, 0x06	; 6
     940:	0c 94 c3 28 	jmp	0x5186	; 0x5186 <__epilogue_restores__+0x18>

00000944 <__ltsf2>:
     944:	a8 e1       	ldi	r26, 0x18	; 24
     946:	b0 e0       	ldi	r27, 0x00	; 0
     948:	e8 ea       	ldi	r30, 0xA8	; 168
     94a:	f4 e0       	ldi	r31, 0x04	; 4
     94c:	0c 94 a7 28 	jmp	0x514e	; 0x514e <__prologue_saves__+0x18>
     950:	69 83       	std	Y+1, r22	; 0x01
     952:	7a 83       	std	Y+2, r23	; 0x02
     954:	8b 83       	std	Y+3, r24	; 0x03
     956:	9c 83       	std	Y+4, r25	; 0x04
     958:	2d 83       	std	Y+5, r18	; 0x05
     95a:	3e 83       	std	Y+6, r19	; 0x06
     95c:	4f 83       	std	Y+7, r20	; 0x07
     95e:	58 87       	std	Y+8, r21	; 0x08
     960:	89 e0       	ldi	r24, 0x09	; 9
     962:	e8 2e       	mov	r14, r24
     964:	f1 2c       	mov	r15, r1
     966:	ec 0e       	add	r14, r28
     968:	fd 1e       	adc	r15, r29
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	b7 01       	movw	r22, r14
     970:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     974:	8e 01       	movw	r16, r28
     976:	0f 5e       	subi	r16, 0xEF	; 239
     978:	1f 4f       	sbci	r17, 0xFF	; 255
     97a:	ce 01       	movw	r24, r28
     97c:	05 96       	adiw	r24, 0x05	; 5
     97e:	b8 01       	movw	r22, r16
     980:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     984:	89 85       	ldd	r24, Y+9	; 0x09
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	40 f0       	brcs	.+16     	; 0x99a <__ltsf2+0x56>
     98a:	89 89       	ldd	r24, Y+17	; 0x11
     98c:	82 30       	cpi	r24, 0x02	; 2
     98e:	28 f0       	brcs	.+10     	; 0x99a <__ltsf2+0x56>
     990:	c7 01       	movw	r24, r14
     992:	b8 01       	movw	r22, r16
     994:	0e 94 50 07 	call	0xea0	; 0xea0 <__fpcmp_parts_f>
     998:	01 c0       	rjmp	.+2      	; 0x99c <__ltsf2+0x58>
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	68 96       	adiw	r28, 0x18	; 24
     99e:	e6 e0       	ldi	r30, 0x06	; 6
     9a0:	0c 94 c3 28 	jmp	0x5186	; 0x5186 <__epilogue_restores__+0x18>

000009a4 <__lesf2>:
     9a4:	a8 e1       	ldi	r26, 0x18	; 24
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	e8 ed       	ldi	r30, 0xD8	; 216
     9aa:	f4 e0       	ldi	r31, 0x04	; 4
     9ac:	0c 94 a7 28 	jmp	0x514e	; 0x514e <__prologue_saves__+0x18>
     9b0:	69 83       	std	Y+1, r22	; 0x01
     9b2:	7a 83       	std	Y+2, r23	; 0x02
     9b4:	8b 83       	std	Y+3, r24	; 0x03
     9b6:	9c 83       	std	Y+4, r25	; 0x04
     9b8:	2d 83       	std	Y+5, r18	; 0x05
     9ba:	3e 83       	std	Y+6, r19	; 0x06
     9bc:	4f 83       	std	Y+7, r20	; 0x07
     9be:	58 87       	std	Y+8, r21	; 0x08
     9c0:	89 e0       	ldi	r24, 0x09	; 9
     9c2:	e8 2e       	mov	r14, r24
     9c4:	f1 2c       	mov	r15, r1
     9c6:	ec 0e       	add	r14, r28
     9c8:	fd 1e       	adc	r15, r29
     9ca:	ce 01       	movw	r24, r28
     9cc:	01 96       	adiw	r24, 0x01	; 1
     9ce:	b7 01       	movw	r22, r14
     9d0:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     9d4:	8e 01       	movw	r16, r28
     9d6:	0f 5e       	subi	r16, 0xEF	; 239
     9d8:	1f 4f       	sbci	r17, 0xFF	; 255
     9da:	ce 01       	movw	r24, r28
     9dc:	05 96       	adiw	r24, 0x05	; 5
     9de:	b8 01       	movw	r22, r16
     9e0:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     9e4:	89 85       	ldd	r24, Y+9	; 0x09
     9e6:	82 30       	cpi	r24, 0x02	; 2
     9e8:	40 f0       	brcs	.+16     	; 0x9fa <__lesf2+0x56>
     9ea:	89 89       	ldd	r24, Y+17	; 0x11
     9ec:	82 30       	cpi	r24, 0x02	; 2
     9ee:	28 f0       	brcs	.+10     	; 0x9fa <__lesf2+0x56>
     9f0:	c7 01       	movw	r24, r14
     9f2:	b8 01       	movw	r22, r16
     9f4:	0e 94 50 07 	call	0xea0	; 0xea0 <__fpcmp_parts_f>
     9f8:	01 c0       	rjmp	.+2      	; 0x9fc <__lesf2+0x58>
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	68 96       	adiw	r28, 0x18	; 24
     9fe:	e6 e0       	ldi	r30, 0x06	; 6
     a00:	0c 94 c3 28 	jmp	0x5186	; 0x5186 <__epilogue_restores__+0x18>

00000a04 <__floatsisf>:
     a04:	a8 e0       	ldi	r26, 0x08	; 8
     a06:	b0 e0       	ldi	r27, 0x00	; 0
     a08:	e8 e0       	ldi	r30, 0x08	; 8
     a0a:	f5 e0       	ldi	r31, 0x05	; 5
     a0c:	0c 94 a4 28 	jmp	0x5148	; 0x5148 <__prologue_saves__+0x12>
     a10:	9b 01       	movw	r18, r22
     a12:	ac 01       	movw	r20, r24
     a14:	83 e0       	ldi	r24, 0x03	; 3
     a16:	89 83       	std	Y+1, r24	; 0x01
     a18:	da 01       	movw	r26, r20
     a1a:	c9 01       	movw	r24, r18
     a1c:	88 27       	eor	r24, r24
     a1e:	b7 fd       	sbrc	r27, 7
     a20:	83 95       	inc	r24
     a22:	99 27       	eor	r25, r25
     a24:	aa 27       	eor	r26, r26
     a26:	bb 27       	eor	r27, r27
     a28:	b8 2e       	mov	r11, r24
     a2a:	21 15       	cp	r18, r1
     a2c:	31 05       	cpc	r19, r1
     a2e:	41 05       	cpc	r20, r1
     a30:	51 05       	cpc	r21, r1
     a32:	19 f4       	brne	.+6      	; 0xa3a <__floatsisf+0x36>
     a34:	82 e0       	ldi	r24, 0x02	; 2
     a36:	89 83       	std	Y+1, r24	; 0x01
     a38:	3a c0       	rjmp	.+116    	; 0xaae <__floatsisf+0xaa>
     a3a:	88 23       	and	r24, r24
     a3c:	a9 f0       	breq	.+42     	; 0xa68 <__floatsisf+0x64>
     a3e:	20 30       	cpi	r18, 0x00	; 0
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	38 07       	cpc	r19, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	48 07       	cpc	r20, r24
     a48:	80 e8       	ldi	r24, 0x80	; 128
     a4a:	58 07       	cpc	r21, r24
     a4c:	29 f4       	brne	.+10     	; 0xa58 <__floatsisf+0x54>
     a4e:	60 e0       	ldi	r22, 0x00	; 0
     a50:	70 e0       	ldi	r23, 0x00	; 0
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	9f ec       	ldi	r25, 0xCF	; 207
     a56:	30 c0       	rjmp	.+96     	; 0xab8 <__floatsisf+0xb4>
     a58:	ee 24       	eor	r14, r14
     a5a:	ff 24       	eor	r15, r15
     a5c:	87 01       	movw	r16, r14
     a5e:	e2 1a       	sub	r14, r18
     a60:	f3 0a       	sbc	r15, r19
     a62:	04 0b       	sbc	r16, r20
     a64:	15 0b       	sbc	r17, r21
     a66:	02 c0       	rjmp	.+4      	; 0xa6c <__floatsisf+0x68>
     a68:	79 01       	movw	r14, r18
     a6a:	8a 01       	movw	r16, r20
     a6c:	8e e1       	ldi	r24, 0x1E	; 30
     a6e:	c8 2e       	mov	r12, r24
     a70:	d1 2c       	mov	r13, r1
     a72:	dc 82       	std	Y+4, r13	; 0x04
     a74:	cb 82       	std	Y+3, r12	; 0x03
     a76:	ed 82       	std	Y+5, r14	; 0x05
     a78:	fe 82       	std	Y+6, r15	; 0x06
     a7a:	0f 83       	std	Y+7, r16	; 0x07
     a7c:	18 87       	std	Y+8, r17	; 0x08
     a7e:	c8 01       	movw	r24, r16
     a80:	b7 01       	movw	r22, r14
     a82:	0e 94 b4 05 	call	0xb68	; 0xb68 <__clzsi2>
     a86:	01 97       	sbiw	r24, 0x01	; 1
     a88:	18 16       	cp	r1, r24
     a8a:	19 06       	cpc	r1, r25
     a8c:	84 f4       	brge	.+32     	; 0xaae <__floatsisf+0xaa>
     a8e:	08 2e       	mov	r0, r24
     a90:	04 c0       	rjmp	.+8      	; 0xa9a <__floatsisf+0x96>
     a92:	ee 0c       	add	r14, r14
     a94:	ff 1c       	adc	r15, r15
     a96:	00 1f       	adc	r16, r16
     a98:	11 1f       	adc	r17, r17
     a9a:	0a 94       	dec	r0
     a9c:	d2 f7       	brpl	.-12     	; 0xa92 <__floatsisf+0x8e>
     a9e:	ed 82       	std	Y+5, r14	; 0x05
     aa0:	fe 82       	std	Y+6, r15	; 0x06
     aa2:	0f 83       	std	Y+7, r16	; 0x07
     aa4:	18 87       	std	Y+8, r17	; 0x08
     aa6:	c8 1a       	sub	r12, r24
     aa8:	d9 0a       	sbc	r13, r25
     aaa:	dc 82       	std	Y+4, r13	; 0x04
     aac:	cb 82       	std	Y+3, r12	; 0x03
     aae:	ba 82       	std	Y+2, r11	; 0x02
     ab0:	ce 01       	movw	r24, r28
     ab2:	01 96       	adiw	r24, 0x01	; 1
     ab4:	0e 94 03 06 	call	0xc06	; 0xc06 <__pack_f>
     ab8:	28 96       	adiw	r28, 0x08	; 8
     aba:	e9 e0       	ldi	r30, 0x09	; 9
     abc:	0c 94 c0 28 	jmp	0x5180	; 0x5180 <__epilogue_restores__+0x12>

00000ac0 <__fixsfsi>:
     ac0:	ac e0       	ldi	r26, 0x0C	; 12
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	e6 e6       	ldi	r30, 0x66	; 102
     ac6:	f5 e0       	ldi	r31, 0x05	; 5
     ac8:	0c 94 ab 28 	jmp	0x5156	; 0x5156 <__prologue_saves__+0x20>
     acc:	69 83       	std	Y+1, r22	; 0x01
     ace:	7a 83       	std	Y+2, r23	; 0x02
     ad0:	8b 83       	std	Y+3, r24	; 0x03
     ad2:	9c 83       	std	Y+4, r25	; 0x04
     ad4:	ce 01       	movw	r24, r28
     ad6:	01 96       	adiw	r24, 0x01	; 1
     ad8:	be 01       	movw	r22, r28
     ada:	6b 5f       	subi	r22, 0xFB	; 251
     adc:	7f 4f       	sbci	r23, 0xFF	; 255
     ade:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     ae2:	8d 81       	ldd	r24, Y+5	; 0x05
     ae4:	82 30       	cpi	r24, 0x02	; 2
     ae6:	61 f1       	breq	.+88     	; 0xb40 <__fixsfsi+0x80>
     ae8:	82 30       	cpi	r24, 0x02	; 2
     aea:	50 f1       	brcs	.+84     	; 0xb40 <__fixsfsi+0x80>
     aec:	84 30       	cpi	r24, 0x04	; 4
     aee:	21 f4       	brne	.+8      	; 0xaf8 <__fixsfsi+0x38>
     af0:	8e 81       	ldd	r24, Y+6	; 0x06
     af2:	88 23       	and	r24, r24
     af4:	51 f1       	breq	.+84     	; 0xb4a <__fixsfsi+0x8a>
     af6:	2e c0       	rjmp	.+92     	; 0xb54 <__fixsfsi+0x94>
     af8:	2f 81       	ldd	r18, Y+7	; 0x07
     afa:	38 85       	ldd	r19, Y+8	; 0x08
     afc:	37 fd       	sbrc	r19, 7
     afe:	20 c0       	rjmp	.+64     	; 0xb40 <__fixsfsi+0x80>
     b00:	6e 81       	ldd	r22, Y+6	; 0x06
     b02:	2f 31       	cpi	r18, 0x1F	; 31
     b04:	31 05       	cpc	r19, r1
     b06:	1c f0       	brlt	.+6      	; 0xb0e <__fixsfsi+0x4e>
     b08:	66 23       	and	r22, r22
     b0a:	f9 f0       	breq	.+62     	; 0xb4a <__fixsfsi+0x8a>
     b0c:	23 c0       	rjmp	.+70     	; 0xb54 <__fixsfsi+0x94>
     b0e:	8e e1       	ldi	r24, 0x1E	; 30
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	82 1b       	sub	r24, r18
     b14:	93 0b       	sbc	r25, r19
     b16:	29 85       	ldd	r18, Y+9	; 0x09
     b18:	3a 85       	ldd	r19, Y+10	; 0x0a
     b1a:	4b 85       	ldd	r20, Y+11	; 0x0b
     b1c:	5c 85       	ldd	r21, Y+12	; 0x0c
     b1e:	04 c0       	rjmp	.+8      	; 0xb28 <__fixsfsi+0x68>
     b20:	56 95       	lsr	r21
     b22:	47 95       	ror	r20
     b24:	37 95       	ror	r19
     b26:	27 95       	ror	r18
     b28:	8a 95       	dec	r24
     b2a:	d2 f7       	brpl	.-12     	; 0xb20 <__fixsfsi+0x60>
     b2c:	66 23       	and	r22, r22
     b2e:	b1 f0       	breq	.+44     	; 0xb5c <__fixsfsi+0x9c>
     b30:	50 95       	com	r21
     b32:	40 95       	com	r20
     b34:	30 95       	com	r19
     b36:	21 95       	neg	r18
     b38:	3f 4f       	sbci	r19, 0xFF	; 255
     b3a:	4f 4f       	sbci	r20, 0xFF	; 255
     b3c:	5f 4f       	sbci	r21, 0xFF	; 255
     b3e:	0e c0       	rjmp	.+28     	; 0xb5c <__fixsfsi+0x9c>
     b40:	20 e0       	ldi	r18, 0x00	; 0
     b42:	30 e0       	ldi	r19, 0x00	; 0
     b44:	40 e0       	ldi	r20, 0x00	; 0
     b46:	50 e0       	ldi	r21, 0x00	; 0
     b48:	09 c0       	rjmp	.+18     	; 0xb5c <__fixsfsi+0x9c>
     b4a:	2f ef       	ldi	r18, 0xFF	; 255
     b4c:	3f ef       	ldi	r19, 0xFF	; 255
     b4e:	4f ef       	ldi	r20, 0xFF	; 255
     b50:	5f e7       	ldi	r21, 0x7F	; 127
     b52:	04 c0       	rjmp	.+8      	; 0xb5c <__fixsfsi+0x9c>
     b54:	20 e0       	ldi	r18, 0x00	; 0
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	40 e0       	ldi	r20, 0x00	; 0
     b5a:	50 e8       	ldi	r21, 0x80	; 128
     b5c:	b9 01       	movw	r22, r18
     b5e:	ca 01       	movw	r24, r20
     b60:	2c 96       	adiw	r28, 0x0c	; 12
     b62:	e2 e0       	ldi	r30, 0x02	; 2
     b64:	0c 94 c7 28 	jmp	0x518e	; 0x518e <__epilogue_restores__+0x20>

00000b68 <__clzsi2>:
     b68:	ef 92       	push	r14
     b6a:	ff 92       	push	r15
     b6c:	0f 93       	push	r16
     b6e:	1f 93       	push	r17
     b70:	7b 01       	movw	r14, r22
     b72:	8c 01       	movw	r16, r24
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	e8 16       	cp	r14, r24
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	f8 06       	cpc	r15, r24
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	08 07       	cpc	r16, r24
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	18 07       	cpc	r17, r24
     b84:	88 f4       	brcc	.+34     	; 0xba8 <__clzsi2+0x40>
     b86:	8f ef       	ldi	r24, 0xFF	; 255
     b88:	e8 16       	cp	r14, r24
     b8a:	f1 04       	cpc	r15, r1
     b8c:	01 05       	cpc	r16, r1
     b8e:	11 05       	cpc	r17, r1
     b90:	31 f0       	breq	.+12     	; 0xb9e <__clzsi2+0x36>
     b92:	28 f0       	brcs	.+10     	; 0xb9e <__clzsi2+0x36>
     b94:	88 e0       	ldi	r24, 0x08	; 8
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	a0 e0       	ldi	r26, 0x00	; 0
     b9a:	b0 e0       	ldi	r27, 0x00	; 0
     b9c:	17 c0       	rjmp	.+46     	; 0xbcc <__clzsi2+0x64>
     b9e:	80 e0       	ldi	r24, 0x00	; 0
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	a0 e0       	ldi	r26, 0x00	; 0
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	12 c0       	rjmp	.+36     	; 0xbcc <__clzsi2+0x64>
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	e8 16       	cp	r14, r24
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	f8 06       	cpc	r15, r24
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	08 07       	cpc	r16, r24
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	18 07       	cpc	r17, r24
     bb8:	28 f0       	brcs	.+10     	; 0xbc4 <__clzsi2+0x5c>
     bba:	88 e1       	ldi	r24, 0x18	; 24
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e0       	ldi	r26, 0x00	; 0
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	04 c0       	rjmp	.+8      	; 0xbcc <__clzsi2+0x64>
     bc4:	80 e1       	ldi	r24, 0x10	; 16
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	a0 e0       	ldi	r26, 0x00	; 0
     bca:	b0 e0       	ldi	r27, 0x00	; 0
     bcc:	20 e2       	ldi	r18, 0x20	; 32
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	40 e0       	ldi	r20, 0x00	; 0
     bd2:	50 e0       	ldi	r21, 0x00	; 0
     bd4:	28 1b       	sub	r18, r24
     bd6:	39 0b       	sbc	r19, r25
     bd8:	4a 0b       	sbc	r20, r26
     bda:	5b 0b       	sbc	r21, r27
     bdc:	04 c0       	rjmp	.+8      	; 0xbe6 <__clzsi2+0x7e>
     bde:	16 95       	lsr	r17
     be0:	07 95       	ror	r16
     be2:	f7 94       	ror	r15
     be4:	e7 94       	ror	r14
     be6:	8a 95       	dec	r24
     be8:	d2 f7       	brpl	.-12     	; 0xbde <__clzsi2+0x76>
     bea:	f7 01       	movw	r30, r14
     bec:	e8 50       	subi	r30, 0x08	; 8
     bee:	ff 4f       	sbci	r31, 0xFF	; 255
     bf0:	80 81       	ld	r24, Z
     bf2:	28 1b       	sub	r18, r24
     bf4:	31 09       	sbc	r19, r1
     bf6:	41 09       	sbc	r20, r1
     bf8:	51 09       	sbc	r21, r1
     bfa:	c9 01       	movw	r24, r18
     bfc:	1f 91       	pop	r17
     bfe:	0f 91       	pop	r16
     c00:	ff 90       	pop	r15
     c02:	ef 90       	pop	r14
     c04:	08 95       	ret

00000c06 <__pack_f>:
     c06:	df 92       	push	r13
     c08:	ef 92       	push	r14
     c0a:	ff 92       	push	r15
     c0c:	0f 93       	push	r16
     c0e:	1f 93       	push	r17
     c10:	fc 01       	movw	r30, r24
     c12:	e4 80       	ldd	r14, Z+4	; 0x04
     c14:	f5 80       	ldd	r15, Z+5	; 0x05
     c16:	06 81       	ldd	r16, Z+6	; 0x06
     c18:	17 81       	ldd	r17, Z+7	; 0x07
     c1a:	d1 80       	ldd	r13, Z+1	; 0x01
     c1c:	80 81       	ld	r24, Z
     c1e:	82 30       	cpi	r24, 0x02	; 2
     c20:	48 f4       	brcc	.+18     	; 0xc34 <__pack_f+0x2e>
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	a0 e1       	ldi	r26, 0x10	; 16
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e8 2a       	or	r14, r24
     c2c:	f9 2a       	or	r15, r25
     c2e:	0a 2b       	or	r16, r26
     c30:	1b 2b       	or	r17, r27
     c32:	a5 c0       	rjmp	.+330    	; 0xd7e <__pack_f+0x178>
     c34:	84 30       	cpi	r24, 0x04	; 4
     c36:	09 f4       	brne	.+2      	; 0xc3a <__pack_f+0x34>
     c38:	9f c0       	rjmp	.+318    	; 0xd78 <__pack_f+0x172>
     c3a:	82 30       	cpi	r24, 0x02	; 2
     c3c:	21 f4       	brne	.+8      	; 0xc46 <__pack_f+0x40>
     c3e:	ee 24       	eor	r14, r14
     c40:	ff 24       	eor	r15, r15
     c42:	87 01       	movw	r16, r14
     c44:	05 c0       	rjmp	.+10     	; 0xc50 <__pack_f+0x4a>
     c46:	e1 14       	cp	r14, r1
     c48:	f1 04       	cpc	r15, r1
     c4a:	01 05       	cpc	r16, r1
     c4c:	11 05       	cpc	r17, r1
     c4e:	19 f4       	brne	.+6      	; 0xc56 <__pack_f+0x50>
     c50:	e0 e0       	ldi	r30, 0x00	; 0
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	96 c0       	rjmp	.+300    	; 0xd82 <__pack_f+0x17c>
     c56:	62 81       	ldd	r22, Z+2	; 0x02
     c58:	73 81       	ldd	r23, Z+3	; 0x03
     c5a:	9f ef       	ldi	r25, 0xFF	; 255
     c5c:	62 38       	cpi	r22, 0x82	; 130
     c5e:	79 07       	cpc	r23, r25
     c60:	0c f0       	brlt	.+2      	; 0xc64 <__pack_f+0x5e>
     c62:	5b c0       	rjmp	.+182    	; 0xd1a <__pack_f+0x114>
     c64:	22 e8       	ldi	r18, 0x82	; 130
     c66:	3f ef       	ldi	r19, 0xFF	; 255
     c68:	26 1b       	sub	r18, r22
     c6a:	37 0b       	sbc	r19, r23
     c6c:	2a 31       	cpi	r18, 0x1A	; 26
     c6e:	31 05       	cpc	r19, r1
     c70:	2c f0       	brlt	.+10     	; 0xc7c <__pack_f+0x76>
     c72:	20 e0       	ldi	r18, 0x00	; 0
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	40 e0       	ldi	r20, 0x00	; 0
     c78:	50 e0       	ldi	r21, 0x00	; 0
     c7a:	2a c0       	rjmp	.+84     	; 0xcd0 <__pack_f+0xca>
     c7c:	b8 01       	movw	r22, r16
     c7e:	a7 01       	movw	r20, r14
     c80:	02 2e       	mov	r0, r18
     c82:	04 c0       	rjmp	.+8      	; 0xc8c <__pack_f+0x86>
     c84:	76 95       	lsr	r23
     c86:	67 95       	ror	r22
     c88:	57 95       	ror	r21
     c8a:	47 95       	ror	r20
     c8c:	0a 94       	dec	r0
     c8e:	d2 f7       	brpl	.-12     	; 0xc84 <__pack_f+0x7e>
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	a0 e0       	ldi	r26, 0x00	; 0
     c96:	b0 e0       	ldi	r27, 0x00	; 0
     c98:	04 c0       	rjmp	.+8      	; 0xca2 <__pack_f+0x9c>
     c9a:	88 0f       	add	r24, r24
     c9c:	99 1f       	adc	r25, r25
     c9e:	aa 1f       	adc	r26, r26
     ca0:	bb 1f       	adc	r27, r27
     ca2:	2a 95       	dec	r18
     ca4:	d2 f7       	brpl	.-12     	; 0xc9a <__pack_f+0x94>
     ca6:	01 97       	sbiw	r24, 0x01	; 1
     ca8:	a1 09       	sbc	r26, r1
     caa:	b1 09       	sbc	r27, r1
     cac:	8e 21       	and	r24, r14
     cae:	9f 21       	and	r25, r15
     cb0:	a0 23       	and	r26, r16
     cb2:	b1 23       	and	r27, r17
     cb4:	00 97       	sbiw	r24, 0x00	; 0
     cb6:	a1 05       	cpc	r26, r1
     cb8:	b1 05       	cpc	r27, r1
     cba:	21 f0       	breq	.+8      	; 0xcc4 <__pack_f+0xbe>
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	a0 e0       	ldi	r26, 0x00	; 0
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	9a 01       	movw	r18, r20
     cc6:	ab 01       	movw	r20, r22
     cc8:	28 2b       	or	r18, r24
     cca:	39 2b       	or	r19, r25
     ccc:	4a 2b       	or	r20, r26
     cce:	5b 2b       	or	r21, r27
     cd0:	da 01       	movw	r26, r20
     cd2:	c9 01       	movw	r24, r18
     cd4:	8f 77       	andi	r24, 0x7F	; 127
     cd6:	90 70       	andi	r25, 0x00	; 0
     cd8:	a0 70       	andi	r26, 0x00	; 0
     cda:	b0 70       	andi	r27, 0x00	; 0
     cdc:	80 34       	cpi	r24, 0x40	; 64
     cde:	91 05       	cpc	r25, r1
     ce0:	a1 05       	cpc	r26, r1
     ce2:	b1 05       	cpc	r27, r1
     ce4:	39 f4       	brne	.+14     	; 0xcf4 <__pack_f+0xee>
     ce6:	27 ff       	sbrs	r18, 7
     ce8:	09 c0       	rjmp	.+18     	; 0xcfc <__pack_f+0xf6>
     cea:	20 5c       	subi	r18, 0xC0	; 192
     cec:	3f 4f       	sbci	r19, 0xFF	; 255
     cee:	4f 4f       	sbci	r20, 0xFF	; 255
     cf0:	5f 4f       	sbci	r21, 0xFF	; 255
     cf2:	04 c0       	rjmp	.+8      	; 0xcfc <__pack_f+0xf6>
     cf4:	21 5c       	subi	r18, 0xC1	; 193
     cf6:	3f 4f       	sbci	r19, 0xFF	; 255
     cf8:	4f 4f       	sbci	r20, 0xFF	; 255
     cfa:	5f 4f       	sbci	r21, 0xFF	; 255
     cfc:	e0 e0       	ldi	r30, 0x00	; 0
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	20 30       	cpi	r18, 0x00	; 0
     d02:	a0 e0       	ldi	r26, 0x00	; 0
     d04:	3a 07       	cpc	r19, r26
     d06:	a0 e0       	ldi	r26, 0x00	; 0
     d08:	4a 07       	cpc	r20, r26
     d0a:	a0 e4       	ldi	r26, 0x40	; 64
     d0c:	5a 07       	cpc	r21, r26
     d0e:	10 f0       	brcs	.+4      	; 0xd14 <__pack_f+0x10e>
     d10:	e1 e0       	ldi	r30, 0x01	; 1
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	79 01       	movw	r14, r18
     d16:	8a 01       	movw	r16, r20
     d18:	27 c0       	rjmp	.+78     	; 0xd68 <__pack_f+0x162>
     d1a:	60 38       	cpi	r22, 0x80	; 128
     d1c:	71 05       	cpc	r23, r1
     d1e:	64 f5       	brge	.+88     	; 0xd78 <__pack_f+0x172>
     d20:	fb 01       	movw	r30, r22
     d22:	e1 58       	subi	r30, 0x81	; 129
     d24:	ff 4f       	sbci	r31, 0xFF	; 255
     d26:	d8 01       	movw	r26, r16
     d28:	c7 01       	movw	r24, r14
     d2a:	8f 77       	andi	r24, 0x7F	; 127
     d2c:	90 70       	andi	r25, 0x00	; 0
     d2e:	a0 70       	andi	r26, 0x00	; 0
     d30:	b0 70       	andi	r27, 0x00	; 0
     d32:	80 34       	cpi	r24, 0x40	; 64
     d34:	91 05       	cpc	r25, r1
     d36:	a1 05       	cpc	r26, r1
     d38:	b1 05       	cpc	r27, r1
     d3a:	39 f4       	brne	.+14     	; 0xd4a <__pack_f+0x144>
     d3c:	e7 fe       	sbrs	r14, 7
     d3e:	0d c0       	rjmp	.+26     	; 0xd5a <__pack_f+0x154>
     d40:	80 e4       	ldi	r24, 0x40	; 64
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	a0 e0       	ldi	r26, 0x00	; 0
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	04 c0       	rjmp	.+8      	; 0xd52 <__pack_f+0x14c>
     d4a:	8f e3       	ldi	r24, 0x3F	; 63
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	a0 e0       	ldi	r26, 0x00	; 0
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	e8 0e       	add	r14, r24
     d54:	f9 1e       	adc	r15, r25
     d56:	0a 1f       	adc	r16, r26
     d58:	1b 1f       	adc	r17, r27
     d5a:	17 ff       	sbrs	r17, 7
     d5c:	05 c0       	rjmp	.+10     	; 0xd68 <__pack_f+0x162>
     d5e:	16 95       	lsr	r17
     d60:	07 95       	ror	r16
     d62:	f7 94       	ror	r15
     d64:	e7 94       	ror	r14
     d66:	31 96       	adiw	r30, 0x01	; 1
     d68:	87 e0       	ldi	r24, 0x07	; 7
     d6a:	16 95       	lsr	r17
     d6c:	07 95       	ror	r16
     d6e:	f7 94       	ror	r15
     d70:	e7 94       	ror	r14
     d72:	8a 95       	dec	r24
     d74:	d1 f7       	brne	.-12     	; 0xd6a <__pack_f+0x164>
     d76:	05 c0       	rjmp	.+10     	; 0xd82 <__pack_f+0x17c>
     d78:	ee 24       	eor	r14, r14
     d7a:	ff 24       	eor	r15, r15
     d7c:	87 01       	movw	r16, r14
     d7e:	ef ef       	ldi	r30, 0xFF	; 255
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	6e 2f       	mov	r22, r30
     d84:	67 95       	ror	r22
     d86:	66 27       	eor	r22, r22
     d88:	67 95       	ror	r22
     d8a:	90 2f       	mov	r25, r16
     d8c:	9f 77       	andi	r25, 0x7F	; 127
     d8e:	d7 94       	ror	r13
     d90:	dd 24       	eor	r13, r13
     d92:	d7 94       	ror	r13
     d94:	8e 2f       	mov	r24, r30
     d96:	86 95       	lsr	r24
     d98:	49 2f       	mov	r20, r25
     d9a:	46 2b       	or	r20, r22
     d9c:	58 2f       	mov	r21, r24
     d9e:	5d 29       	or	r21, r13
     da0:	b7 01       	movw	r22, r14
     da2:	ca 01       	movw	r24, r20
     da4:	1f 91       	pop	r17
     da6:	0f 91       	pop	r16
     da8:	ff 90       	pop	r15
     daa:	ef 90       	pop	r14
     dac:	df 90       	pop	r13
     dae:	08 95       	ret

00000db0 <__unpack_f>:
     db0:	fc 01       	movw	r30, r24
     db2:	db 01       	movw	r26, r22
     db4:	40 81       	ld	r20, Z
     db6:	51 81       	ldd	r21, Z+1	; 0x01
     db8:	22 81       	ldd	r18, Z+2	; 0x02
     dba:	62 2f       	mov	r22, r18
     dbc:	6f 77       	andi	r22, 0x7F	; 127
     dbe:	70 e0       	ldi	r23, 0x00	; 0
     dc0:	22 1f       	adc	r18, r18
     dc2:	22 27       	eor	r18, r18
     dc4:	22 1f       	adc	r18, r18
     dc6:	93 81       	ldd	r25, Z+3	; 0x03
     dc8:	89 2f       	mov	r24, r25
     dca:	88 0f       	add	r24, r24
     dcc:	82 2b       	or	r24, r18
     dce:	28 2f       	mov	r18, r24
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	99 1f       	adc	r25, r25
     dd4:	99 27       	eor	r25, r25
     dd6:	99 1f       	adc	r25, r25
     dd8:	11 96       	adiw	r26, 0x01	; 1
     dda:	9c 93       	st	X, r25
     ddc:	11 97       	sbiw	r26, 0x01	; 1
     dde:	21 15       	cp	r18, r1
     de0:	31 05       	cpc	r19, r1
     de2:	a9 f5       	brne	.+106    	; 0xe4e <__unpack_f+0x9e>
     de4:	41 15       	cp	r20, r1
     de6:	51 05       	cpc	r21, r1
     de8:	61 05       	cpc	r22, r1
     dea:	71 05       	cpc	r23, r1
     dec:	11 f4       	brne	.+4      	; 0xdf2 <__unpack_f+0x42>
     dee:	82 e0       	ldi	r24, 0x02	; 2
     df0:	37 c0       	rjmp	.+110    	; 0xe60 <__unpack_f+0xb0>
     df2:	82 e8       	ldi	r24, 0x82	; 130
     df4:	9f ef       	ldi	r25, 0xFF	; 255
     df6:	13 96       	adiw	r26, 0x03	; 3
     df8:	9c 93       	st	X, r25
     dfa:	8e 93       	st	-X, r24
     dfc:	12 97       	sbiw	r26, 0x02	; 2
     dfe:	9a 01       	movw	r18, r20
     e00:	ab 01       	movw	r20, r22
     e02:	67 e0       	ldi	r22, 0x07	; 7
     e04:	22 0f       	add	r18, r18
     e06:	33 1f       	adc	r19, r19
     e08:	44 1f       	adc	r20, r20
     e0a:	55 1f       	adc	r21, r21
     e0c:	6a 95       	dec	r22
     e0e:	d1 f7       	brne	.-12     	; 0xe04 <__unpack_f+0x54>
     e10:	83 e0       	ldi	r24, 0x03	; 3
     e12:	8c 93       	st	X, r24
     e14:	0d c0       	rjmp	.+26     	; 0xe30 <__unpack_f+0x80>
     e16:	22 0f       	add	r18, r18
     e18:	33 1f       	adc	r19, r19
     e1a:	44 1f       	adc	r20, r20
     e1c:	55 1f       	adc	r21, r21
     e1e:	12 96       	adiw	r26, 0x02	; 2
     e20:	8d 91       	ld	r24, X+
     e22:	9c 91       	ld	r25, X
     e24:	13 97       	sbiw	r26, 0x03	; 3
     e26:	01 97       	sbiw	r24, 0x01	; 1
     e28:	13 96       	adiw	r26, 0x03	; 3
     e2a:	9c 93       	st	X, r25
     e2c:	8e 93       	st	-X, r24
     e2e:	12 97       	sbiw	r26, 0x02	; 2
     e30:	20 30       	cpi	r18, 0x00	; 0
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	38 07       	cpc	r19, r24
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	48 07       	cpc	r20, r24
     e3a:	80 e4       	ldi	r24, 0x40	; 64
     e3c:	58 07       	cpc	r21, r24
     e3e:	58 f3       	brcs	.-42     	; 0xe16 <__unpack_f+0x66>
     e40:	14 96       	adiw	r26, 0x04	; 4
     e42:	2d 93       	st	X+, r18
     e44:	3d 93       	st	X+, r19
     e46:	4d 93       	st	X+, r20
     e48:	5c 93       	st	X, r21
     e4a:	17 97       	sbiw	r26, 0x07	; 7
     e4c:	08 95       	ret
     e4e:	2f 3f       	cpi	r18, 0xFF	; 255
     e50:	31 05       	cpc	r19, r1
     e52:	79 f4       	brne	.+30     	; 0xe72 <__unpack_f+0xc2>
     e54:	41 15       	cp	r20, r1
     e56:	51 05       	cpc	r21, r1
     e58:	61 05       	cpc	r22, r1
     e5a:	71 05       	cpc	r23, r1
     e5c:	19 f4       	brne	.+6      	; 0xe64 <__unpack_f+0xb4>
     e5e:	84 e0       	ldi	r24, 0x04	; 4
     e60:	8c 93       	st	X, r24
     e62:	08 95       	ret
     e64:	64 ff       	sbrs	r22, 4
     e66:	03 c0       	rjmp	.+6      	; 0xe6e <__unpack_f+0xbe>
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	8c 93       	st	X, r24
     e6c:	12 c0       	rjmp	.+36     	; 0xe92 <__unpack_f+0xe2>
     e6e:	1c 92       	st	X, r1
     e70:	10 c0       	rjmp	.+32     	; 0xe92 <__unpack_f+0xe2>
     e72:	2f 57       	subi	r18, 0x7F	; 127
     e74:	30 40       	sbci	r19, 0x00	; 0
     e76:	13 96       	adiw	r26, 0x03	; 3
     e78:	3c 93       	st	X, r19
     e7a:	2e 93       	st	-X, r18
     e7c:	12 97       	sbiw	r26, 0x02	; 2
     e7e:	83 e0       	ldi	r24, 0x03	; 3
     e80:	8c 93       	st	X, r24
     e82:	87 e0       	ldi	r24, 0x07	; 7
     e84:	44 0f       	add	r20, r20
     e86:	55 1f       	adc	r21, r21
     e88:	66 1f       	adc	r22, r22
     e8a:	77 1f       	adc	r23, r23
     e8c:	8a 95       	dec	r24
     e8e:	d1 f7       	brne	.-12     	; 0xe84 <__unpack_f+0xd4>
     e90:	70 64       	ori	r23, 0x40	; 64
     e92:	14 96       	adiw	r26, 0x04	; 4
     e94:	4d 93       	st	X+, r20
     e96:	5d 93       	st	X+, r21
     e98:	6d 93       	st	X+, r22
     e9a:	7c 93       	st	X, r23
     e9c:	17 97       	sbiw	r26, 0x07	; 7
     e9e:	08 95       	ret

00000ea0 <__fpcmp_parts_f>:
     ea0:	1f 93       	push	r17
     ea2:	dc 01       	movw	r26, r24
     ea4:	fb 01       	movw	r30, r22
     ea6:	9c 91       	ld	r25, X
     ea8:	92 30       	cpi	r25, 0x02	; 2
     eaa:	08 f4       	brcc	.+2      	; 0xeae <__fpcmp_parts_f+0xe>
     eac:	47 c0       	rjmp	.+142    	; 0xf3c <__fpcmp_parts_f+0x9c>
     eae:	80 81       	ld	r24, Z
     eb0:	82 30       	cpi	r24, 0x02	; 2
     eb2:	08 f4       	brcc	.+2      	; 0xeb6 <__fpcmp_parts_f+0x16>
     eb4:	43 c0       	rjmp	.+134    	; 0xf3c <__fpcmp_parts_f+0x9c>
     eb6:	94 30       	cpi	r25, 0x04	; 4
     eb8:	51 f4       	brne	.+20     	; 0xece <__fpcmp_parts_f+0x2e>
     eba:	11 96       	adiw	r26, 0x01	; 1
     ebc:	1c 91       	ld	r17, X
     ebe:	84 30       	cpi	r24, 0x04	; 4
     ec0:	99 f5       	brne	.+102    	; 0xf28 <__fpcmp_parts_f+0x88>
     ec2:	81 81       	ldd	r24, Z+1	; 0x01
     ec4:	68 2f       	mov	r22, r24
     ec6:	70 e0       	ldi	r23, 0x00	; 0
     ec8:	61 1b       	sub	r22, r17
     eca:	71 09       	sbc	r23, r1
     ecc:	3f c0       	rjmp	.+126    	; 0xf4c <__fpcmp_parts_f+0xac>
     ece:	84 30       	cpi	r24, 0x04	; 4
     ed0:	21 f0       	breq	.+8      	; 0xeda <__fpcmp_parts_f+0x3a>
     ed2:	92 30       	cpi	r25, 0x02	; 2
     ed4:	31 f4       	brne	.+12     	; 0xee2 <__fpcmp_parts_f+0x42>
     ed6:	82 30       	cpi	r24, 0x02	; 2
     ed8:	b9 f1       	breq	.+110    	; 0xf48 <__fpcmp_parts_f+0xa8>
     eda:	81 81       	ldd	r24, Z+1	; 0x01
     edc:	88 23       	and	r24, r24
     ede:	89 f1       	breq	.+98     	; 0xf42 <__fpcmp_parts_f+0xa2>
     ee0:	2d c0       	rjmp	.+90     	; 0xf3c <__fpcmp_parts_f+0x9c>
     ee2:	11 96       	adiw	r26, 0x01	; 1
     ee4:	1c 91       	ld	r17, X
     ee6:	11 97       	sbiw	r26, 0x01	; 1
     ee8:	82 30       	cpi	r24, 0x02	; 2
     eea:	f1 f0       	breq	.+60     	; 0xf28 <__fpcmp_parts_f+0x88>
     eec:	81 81       	ldd	r24, Z+1	; 0x01
     eee:	18 17       	cp	r17, r24
     ef0:	d9 f4       	brne	.+54     	; 0xf28 <__fpcmp_parts_f+0x88>
     ef2:	12 96       	adiw	r26, 0x02	; 2
     ef4:	2d 91       	ld	r18, X+
     ef6:	3c 91       	ld	r19, X
     ef8:	13 97       	sbiw	r26, 0x03	; 3
     efa:	82 81       	ldd	r24, Z+2	; 0x02
     efc:	93 81       	ldd	r25, Z+3	; 0x03
     efe:	82 17       	cp	r24, r18
     f00:	93 07       	cpc	r25, r19
     f02:	94 f0       	brlt	.+36     	; 0xf28 <__fpcmp_parts_f+0x88>
     f04:	28 17       	cp	r18, r24
     f06:	39 07       	cpc	r19, r25
     f08:	bc f0       	brlt	.+46     	; 0xf38 <__fpcmp_parts_f+0x98>
     f0a:	14 96       	adiw	r26, 0x04	; 4
     f0c:	8d 91       	ld	r24, X+
     f0e:	9d 91       	ld	r25, X+
     f10:	0d 90       	ld	r0, X+
     f12:	bc 91       	ld	r27, X
     f14:	a0 2d       	mov	r26, r0
     f16:	24 81       	ldd	r18, Z+4	; 0x04
     f18:	35 81       	ldd	r19, Z+5	; 0x05
     f1a:	46 81       	ldd	r20, Z+6	; 0x06
     f1c:	57 81       	ldd	r21, Z+7	; 0x07
     f1e:	28 17       	cp	r18, r24
     f20:	39 07       	cpc	r19, r25
     f22:	4a 07       	cpc	r20, r26
     f24:	5b 07       	cpc	r21, r27
     f26:	18 f4       	brcc	.+6      	; 0xf2e <__fpcmp_parts_f+0x8e>
     f28:	11 23       	and	r17, r17
     f2a:	41 f0       	breq	.+16     	; 0xf3c <__fpcmp_parts_f+0x9c>
     f2c:	0a c0       	rjmp	.+20     	; 0xf42 <__fpcmp_parts_f+0xa2>
     f2e:	82 17       	cp	r24, r18
     f30:	93 07       	cpc	r25, r19
     f32:	a4 07       	cpc	r26, r20
     f34:	b5 07       	cpc	r27, r21
     f36:	40 f4       	brcc	.+16     	; 0xf48 <__fpcmp_parts_f+0xa8>
     f38:	11 23       	and	r17, r17
     f3a:	19 f0       	breq	.+6      	; 0xf42 <__fpcmp_parts_f+0xa2>
     f3c:	61 e0       	ldi	r22, 0x01	; 1
     f3e:	70 e0       	ldi	r23, 0x00	; 0
     f40:	05 c0       	rjmp	.+10     	; 0xf4c <__fpcmp_parts_f+0xac>
     f42:	6f ef       	ldi	r22, 0xFF	; 255
     f44:	7f ef       	ldi	r23, 0xFF	; 255
     f46:	02 c0       	rjmp	.+4      	; 0xf4c <__fpcmp_parts_f+0xac>
     f48:	60 e0       	ldi	r22, 0x00	; 0
     f4a:	70 e0       	ldi	r23, 0x00	; 0
     f4c:	cb 01       	movw	r24, r22
     f4e:	1f 91       	pop	r17
     f50:	08 95       	ret

00000f52 <UART_INIT>:
 *      Author: mahmoud
 */

#include "USART.h"

void UART_INIT() {
     f52:	df 93       	push	r29
     f54:	cf 93       	push	r28
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
	UCSRB |= (1 << TXEN) | (1 << RXEN); //enable reciever and transmitter
     f5a:	aa e2       	ldi	r26, 0x2A	; 42
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	ea e2       	ldi	r30, 0x2A	; 42
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	88 61       	ori	r24, 0x18	; 24
     f66:	8c 93       	st	X, r24
	UCSRC |= (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0); //8 BITS
     f68:	a0 e4       	ldi	r26, 0x40	; 64
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	e0 e4       	ldi	r30, 0x40	; 64
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	86 68       	ori	r24, 0x86	; 134
     f74:	8c 93       	st	X, r24
	UBRRL = MyUBRR;
     f76:	e9 e2       	ldi	r30, 0x29	; 41
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	87 e6       	ldi	r24, 0x67	; 103
     f7c:	80 83       	st	Z, r24
	UBRRH |= MyUBRR >> 8;
     f7e:	a0 e4       	ldi	r26, 0x40	; 64
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	e0 e4       	ldi	r30, 0x40	; 64
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	8c 93       	st	X, r24
}
     f8a:	cf 91       	pop	r28
     f8c:	df 91       	pop	r29
     f8e:	08 95       	ret

00000f90 <UART_TransmitChar>:
void UART_TransmitChar(s8 data) {
     f90:	df 93       	push	r29
     f92:	cf 93       	push	r28
     f94:	0f 92       	push	r0
     f96:	cd b7       	in	r28, 0x3d	; 61
     f98:	de b7       	in	r29, 0x3e	; 62
     f9a:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSRA & (1 << UDRE)))
     f9c:	eb e2       	ldi	r30, 0x2B	; 43
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	88 2f       	mov	r24, r24
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	80 72       	andi	r24, 0x20	; 32
     fa8:	90 70       	andi	r25, 0x00	; 0
     faa:	00 97       	sbiw	r24, 0x00	; 0
     fac:	b9 f3       	breq	.-18     	; 0xf9c <UART_TransmitChar+0xc>
		;
	UDR = data;
     fae:	ec e2       	ldi	r30, 0x2C	; 44
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	89 81       	ldd	r24, Y+1	; 0x01
     fb4:	80 83       	st	Z, r24
}
     fb6:	0f 90       	pop	r0
     fb8:	cf 91       	pop	r28
     fba:	df 91       	pop	r29
     fbc:	08 95       	ret

00000fbe <UART_Recieve>:
s8 UART_Recieve() {
     fbe:	df 93       	push	r29
     fc0:	cf 93       	push	r28
     fc2:	cd b7       	in	r28, 0x3d	; 61
     fc4:	de b7       	in	r29, 0x3e	; 62
	while (!(UCSRA & (1 << RXC)))
     fc6:	eb e2       	ldi	r30, 0x2B	; 43
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	88 23       	and	r24, r24
     fce:	dc f7       	brge	.-10     	; 0xfc6 <UART_Recieve+0x8>
		;
	return UDR;
     fd0:	ec e2       	ldi	r30, 0x2C	; 44
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
}
     fd6:	cf 91       	pop	r28
     fd8:	df 91       	pop	r29
     fda:	08 95       	ret

00000fdc <UART_TransmitString>:
void UART_TransmitString(s8 *data) {
     fdc:	df 93       	push	r29
     fde:	cf 93       	push	r28
     fe0:	00 d0       	rcall	.+0      	; 0xfe2 <UART_TransmitString+0x6>
     fe2:	0f 92       	push	r0
     fe4:	cd b7       	in	r28, 0x3d	; 61
     fe6:	de b7       	in	r29, 0x3e	; 62
     fe8:	9b 83       	std	Y+3, r25	; 0x03
     fea:	8a 83       	std	Y+2, r24	; 0x02
     fec:	0e c0       	rjmp	.+28     	; 0x100a <UART_TransmitString+0x2e>
	u8 i;
	while (data[i] != '\0') {
		UART_TransmitChar(data[i]);
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	28 2f       	mov	r18, r24
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	8a 81       	ldd	r24, Y+2	; 0x02
     ff6:	9b 81       	ldd	r25, Y+3	; 0x03
     ff8:	fc 01       	movw	r30, r24
     ffa:	e2 0f       	add	r30, r18
     ffc:	f3 1f       	adc	r31, r19
     ffe:	80 81       	ld	r24, Z
    1000:	0e 94 c8 07 	call	0xf90	; 0xf90 <UART_TransmitChar>
		i++;
    1004:	89 81       	ldd	r24, Y+1	; 0x01
    1006:	8f 5f       	subi	r24, 0xFF	; 255
    1008:	89 83       	std	Y+1, r24	; 0x01
		;
	return UDR;
}
void UART_TransmitString(s8 *data) {
	u8 i;
	while (data[i] != '\0') {
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	28 2f       	mov	r18, r24
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	9b 81       	ldd	r25, Y+3	; 0x03
    1014:	fc 01       	movw	r30, r24
    1016:	e2 0f       	add	r30, r18
    1018:	f3 1f       	adc	r31, r19
    101a:	80 81       	ld	r24, Z
    101c:	88 23       	and	r24, r24
    101e:	39 f7       	brne	.-50     	; 0xfee <UART_TransmitString+0x12>
		UART_TransmitChar(data[i]);
		i++;
	}
}
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	cf 91       	pop	r28
    1028:	df 91       	pop	r29
    102a:	08 95       	ret

0000102c <Ultrasonic_Read>:



volatile long OVF_COUNT = 0;

double Ultrasonic_Read(void) {
    102c:	ef 92       	push	r14
    102e:	ff 92       	push	r15
    1030:	0f 93       	push	r16
    1032:	1f 93       	push	r17
    1034:	df 93       	push	r29
    1036:	cf 93       	push	r28
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	a0 97       	sbiw	r28, 0x20	; 32
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	f8 94       	cli
    1042:	de bf       	out	0x3e, r29	; 62
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	cd bf       	out	0x3d, r28	; 61
	sei(); // set global interrupt flag
    1048:	78 94       	sei
	TIMSK |= (1<<TOIE1); //Overflow interrupt enable
    104a:	a9 e5       	ldi	r26, 0x59	; 89
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	e9 e5       	ldi	r30, 0x59	; 89
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	84 60       	ori	r24, 0x04	; 4
    1056:	8c 93       	st	X, r24
	TCNT1 = 0; // clear timer
    1058:	ec e4       	ldi	r30, 0x4C	; 76
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	11 82       	std	Z+1, r1	; 0x01
    105e:	10 82       	st	Z, r1
	TCCR1A = 0; // normal mode
    1060:	ef e4       	ldi	r30, 0x4F	; 79
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	10 82       	st	Z, r1
	TCCR1B |= (1 << ICES1) | (1 << CS11); // rising edge & prescale 8
    1066:	ae e4       	ldi	r26, 0x4E	; 78
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	ee e4       	ldi	r30, 0x4E	; 78
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	82 64       	ori	r24, 0x42	; 66
    1072:	8c 93       	st	X, r24
	TIFR |= (1 << TOV1); // clear flag
    1074:	a8 e5       	ldi	r26, 0x58	; 88
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e8 e5       	ldi	r30, 0x58	; 88
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	84 60       	ori	r24, 0x04	; 4
    1080:	8c 93       	st	X, r24
	TIFR |= (1 << ICF1); // CLEAR interrupt
    1082:	a8 e5       	ldi	r26, 0x58	; 88
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e8 e5       	ldi	r30, 0x58	; 88
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	80 62       	ori	r24, 0x20	; 32
    108e:	8c 93       	st	X, r24

	//Start the trigger
	PORTD |= (1<<2);
    1090:	a2 e3       	ldi	r26, 0x32	; 50
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	e2 e3       	ldi	r30, 0x32	; 50
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	84 60       	ori	r24, 0x04	; 4
    109c:	8c 93       	st	X, r24
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	a0 e2       	ldi	r26, 0x20	; 32
    10a4:	b1 e4       	ldi	r27, 0x41	; 65
    10a6:	8d 8b       	std	Y+21, r24	; 0x15
    10a8:	9e 8b       	std	Y+22, r25	; 0x16
    10aa:	af 8b       	std	Y+23, r26	; 0x17
    10ac:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    10ae:	6d 89       	ldd	r22, Y+21	; 0x15
    10b0:	7e 89       	ldd	r23, Y+22	; 0x16
    10b2:	8f 89       	ldd	r24, Y+23	; 0x17
    10b4:	98 8d       	ldd	r25, Y+24	; 0x18
    10b6:	2b ea       	ldi	r18, 0xAB	; 171
    10b8:	3a ea       	ldi	r19, 0xAA	; 170
    10ba:	4a e2       	ldi	r20, 0x2A	; 42
    10bc:	50 e4       	ldi	r21, 0x40	; 64
    10be:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    10c2:	dc 01       	movw	r26, r24
    10c4:	cb 01       	movw	r24, r22
    10c6:	89 8b       	std	Y+17, r24	; 0x11
    10c8:	9a 8b       	std	Y+18, r25	; 0x12
    10ca:	ab 8b       	std	Y+19, r26	; 0x13
    10cc:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    10ce:	69 89       	ldd	r22, Y+17	; 0x11
    10d0:	7a 89       	ldd	r23, Y+18	; 0x12
    10d2:	8b 89       	ldd	r24, Y+19	; 0x13
    10d4:	9c 89       	ldd	r25, Y+20	; 0x14
    10d6:	20 e0       	ldi	r18, 0x00	; 0
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	40 e8       	ldi	r20, 0x80	; 128
    10dc:	5f e3       	ldi	r21, 0x3F	; 63
    10de:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    10e2:	88 23       	and	r24, r24
    10e4:	1c f4       	brge	.+6      	; 0x10ec <Ultrasonic_Read+0xc0>
		__ticks = 1;
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	88 8b       	std	Y+16, r24	; 0x10
    10ea:	91 c0       	rjmp	.+290    	; 0x120e <Ultrasonic_Read+0x1e2>
	else if (__tmp > 255)
    10ec:	69 89       	ldd	r22, Y+17	; 0x11
    10ee:	7a 89       	ldd	r23, Y+18	; 0x12
    10f0:	8b 89       	ldd	r24, Y+19	; 0x13
    10f2:	9c 89       	ldd	r25, Y+20	; 0x14
    10f4:	20 e0       	ldi	r18, 0x00	; 0
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	4f e7       	ldi	r20, 0x7F	; 127
    10fa:	53 e4       	ldi	r21, 0x43	; 67
    10fc:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1100:	18 16       	cp	r1, r24
    1102:	0c f0       	brlt	.+2      	; 0x1106 <Ultrasonic_Read+0xda>
    1104:	7b c0       	rjmp	.+246    	; 0x11fc <Ultrasonic_Read+0x1d0>
	{
		_delay_ms(__us / 1000.0);
    1106:	6d 89       	ldd	r22, Y+21	; 0x15
    1108:	7e 89       	ldd	r23, Y+22	; 0x16
    110a:	8f 89       	ldd	r24, Y+23	; 0x17
    110c:	98 8d       	ldd	r25, Y+24	; 0x18
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	4a e7       	ldi	r20, 0x7A	; 122
    1114:	54 e4       	ldi	r21, 0x44	; 68
    1116:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    111a:	dc 01       	movw	r26, r24
    111c:	cb 01       	movw	r24, r22
    111e:	8c 87       	std	Y+12, r24	; 0x0c
    1120:	9d 87       	std	Y+13, r25	; 0x0d
    1122:	ae 87       	std	Y+14, r26	; 0x0e
    1124:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1126:	6c 85       	ldd	r22, Y+12	; 0x0c
    1128:	7d 85       	ldd	r23, Y+13	; 0x0d
    112a:	8e 85       	ldd	r24, Y+14	; 0x0e
    112c:	9f 85       	ldd	r25, Y+15	; 0x0f
    112e:	20 e0       	ldi	r18, 0x00	; 0
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	4a ef       	ldi	r20, 0xFA	; 250
    1134:	54 e4       	ldi	r21, 0x44	; 68
    1136:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    113a:	dc 01       	movw	r26, r24
    113c:	cb 01       	movw	r24, r22
    113e:	88 87       	std	Y+8, r24	; 0x08
    1140:	99 87       	std	Y+9, r25	; 0x09
    1142:	aa 87       	std	Y+10, r26	; 0x0a
    1144:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1146:	68 85       	ldd	r22, Y+8	; 0x08
    1148:	79 85       	ldd	r23, Y+9	; 0x09
    114a:	8a 85       	ldd	r24, Y+10	; 0x0a
    114c:	9b 85       	ldd	r25, Y+11	; 0x0b
    114e:	20 e0       	ldi	r18, 0x00	; 0
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	40 e8       	ldi	r20, 0x80	; 128
    1154:	5f e3       	ldi	r21, 0x3F	; 63
    1156:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    115a:	88 23       	and	r24, r24
    115c:	2c f4       	brge	.+10     	; 0x1168 <Ultrasonic_Read+0x13c>
		__ticks = 1;
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	9f 83       	std	Y+7, r25	; 0x07
    1164:	8e 83       	std	Y+6, r24	; 0x06
    1166:	3f c0       	rjmp	.+126    	; 0x11e6 <Ultrasonic_Read+0x1ba>
	else if (__tmp > 65535)
    1168:	68 85       	ldd	r22, Y+8	; 0x08
    116a:	79 85       	ldd	r23, Y+9	; 0x09
    116c:	8a 85       	ldd	r24, Y+10	; 0x0a
    116e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1170:	20 e0       	ldi	r18, 0x00	; 0
    1172:	3f ef       	ldi	r19, 0xFF	; 255
    1174:	4f e7       	ldi	r20, 0x7F	; 127
    1176:	57 e4       	ldi	r21, 0x47	; 71
    1178:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    117c:	18 16       	cp	r1, r24
    117e:	4c f5       	brge	.+82     	; 0x11d2 <Ultrasonic_Read+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1180:	6c 85       	ldd	r22, Y+12	; 0x0c
    1182:	7d 85       	ldd	r23, Y+13	; 0x0d
    1184:	8e 85       	ldd	r24, Y+14	; 0x0e
    1186:	9f 85       	ldd	r25, Y+15	; 0x0f
    1188:	20 e0       	ldi	r18, 0x00	; 0
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	40 e2       	ldi	r20, 0x20	; 32
    118e:	51 e4       	ldi	r21, 0x41	; 65
    1190:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1194:	dc 01       	movw	r26, r24
    1196:	cb 01       	movw	r24, r22
    1198:	bc 01       	movw	r22, r24
    119a:	cd 01       	movw	r24, r26
    119c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    11a0:	dc 01       	movw	r26, r24
    11a2:	cb 01       	movw	r24, r22
    11a4:	9f 83       	std	Y+7, r25	; 0x07
    11a6:	8e 83       	std	Y+6, r24	; 0x06
    11a8:	0f c0       	rjmp	.+30     	; 0x11c8 <Ultrasonic_Read+0x19c>
    11aa:	88 ec       	ldi	r24, 0xC8	; 200
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	9d 83       	std	Y+5, r25	; 0x05
    11b0:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11b2:	8c 81       	ldd	r24, Y+4	; 0x04
    11b4:	9d 81       	ldd	r25, Y+5	; 0x05
    11b6:	01 97       	sbiw	r24, 0x01	; 1
    11b8:	f1 f7       	brne	.-4      	; 0x11b6 <Ultrasonic_Read+0x18a>
    11ba:	9d 83       	std	Y+5, r25	; 0x05
    11bc:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11be:	8e 81       	ldd	r24, Y+6	; 0x06
    11c0:	9f 81       	ldd	r25, Y+7	; 0x07
    11c2:	01 97       	sbiw	r24, 0x01	; 1
    11c4:	9f 83       	std	Y+7, r25	; 0x07
    11c6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11c8:	8e 81       	ldd	r24, Y+6	; 0x06
    11ca:	9f 81       	ldd	r25, Y+7	; 0x07
    11cc:	00 97       	sbiw	r24, 0x00	; 0
    11ce:	69 f7       	brne	.-38     	; 0x11aa <Ultrasonic_Read+0x17e>
    11d0:	24 c0       	rjmp	.+72     	; 0x121a <Ultrasonic_Read+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11d2:	68 85       	ldd	r22, Y+8	; 0x08
    11d4:	79 85       	ldd	r23, Y+9	; 0x09
    11d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    11d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    11da:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    11de:	dc 01       	movw	r26, r24
    11e0:	cb 01       	movw	r24, r22
    11e2:	9f 83       	std	Y+7, r25	; 0x07
    11e4:	8e 83       	std	Y+6, r24	; 0x06
    11e6:	8e 81       	ldd	r24, Y+6	; 0x06
    11e8:	9f 81       	ldd	r25, Y+7	; 0x07
    11ea:	9b 83       	std	Y+3, r25	; 0x03
    11ec:	8a 83       	std	Y+2, r24	; 0x02
    11ee:	8a 81       	ldd	r24, Y+2	; 0x02
    11f0:	9b 81       	ldd	r25, Y+3	; 0x03
    11f2:	01 97       	sbiw	r24, 0x01	; 1
    11f4:	f1 f7       	brne	.-4      	; 0x11f2 <Ultrasonic_Read+0x1c6>
    11f6:	9b 83       	std	Y+3, r25	; 0x03
    11f8:	8a 83       	std	Y+2, r24	; 0x02
    11fa:	0f c0       	rjmp	.+30     	; 0x121a <Ultrasonic_Read+0x1ee>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    11fc:	69 89       	ldd	r22, Y+17	; 0x11
    11fe:	7a 89       	ldd	r23, Y+18	; 0x12
    1200:	8b 89       	ldd	r24, Y+19	; 0x13
    1202:	9c 89       	ldd	r25, Y+20	; 0x14
    1204:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1208:	dc 01       	movw	r26, r24
    120a:	cb 01       	movw	r24, r22
    120c:	88 8b       	std	Y+16, r24	; 0x10
    120e:	88 89       	ldd	r24, Y+16	; 0x10
    1210:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1212:	89 81       	ldd	r24, Y+1	; 0x01
    1214:	8a 95       	dec	r24
    1216:	f1 f7       	brne	.-4      	; 0x1214 <Ultrasonic_Read+0x1e8>
    1218:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	PORTD &= ~(1<<2);
    121a:	a2 e3       	ldi	r26, 0x32	; 50
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	e2 e3       	ldi	r30, 0x32	; 50
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	8b 7f       	andi	r24, 0xFB	; 251
    1226:	8c 93       	st	X, r24

	while(!(TIFR & (1<<ICF1)));
    1228:	e8 e5       	ldi	r30, 0x58	; 88
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	88 2f       	mov	r24, r24
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	80 72       	andi	r24, 0x20	; 32
    1234:	90 70       	andi	r25, 0x00	; 0
    1236:	00 97       	sbiw	r24, 0x00	; 0
    1238:	b9 f3       	breq	.-18     	; 0x1228 <Ultrasonic_Read+0x1fc>
	TCNT1 = 0; // clear timer
    123a:	ec e4       	ldi	r30, 0x4C	; 76
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	11 82       	std	Z+1, r1	; 0x01
    1240:	10 82       	st	Z, r1
	OVF_COUNT = 0;
    1242:	10 92 08 02 	sts	0x0208, r1
    1246:	10 92 09 02 	sts	0x0209, r1
    124a:	10 92 0a 02 	sts	0x020A, r1
    124e:	10 92 0b 02 	sts	0x020B, r1
	TCCR1B &=~ (1 << ICES1);// rising edge & prescale 8
    1252:	ae e4       	ldi	r26, 0x4E	; 78
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	ee e4       	ldi	r30, 0x4E	; 78
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	8f 7b       	andi	r24, 0xBF	; 191
    125e:	8c 93       	st	X, r24
	TIFR |= (1 << TOV1); // clear flag
    1260:	a8 e5       	ldi	r26, 0x58	; 88
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	e8 e5       	ldi	r30, 0x58	; 88
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	84 60       	ori	r24, 0x04	; 4
    126c:	8c 93       	st	X, r24
	TIFR |= (1 << ICF1); // CLEAR interrupt
    126e:	a8 e5       	ldi	r26, 0x58	; 88
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	e8 e5       	ldi	r30, 0x58	; 88
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	80 62       	ori	r24, 0x20	; 32
    127a:	8c 93       	st	X, r24

	while(!(TIFR & (1<<ICF1)));
    127c:	e8 e5       	ldi	r30, 0x58	; 88
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	88 2f       	mov	r24, r24
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	80 72       	andi	r24, 0x20	; 32
    1288:	90 70       	andi	r25, 0x00	; 0
    128a:	00 97       	sbiw	r24, 0x00	; 0
    128c:	b9 f3       	breq	.-18     	; 0x127c <Ultrasonic_Read+0x250>
	long count = ICR1 + (OVF_COUNT*65535);
    128e:	e6 e4       	ldi	r30, 0x46	; 70
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	91 81       	ldd	r25, Z+1	; 0x01
    1296:	7c 01       	movw	r14, r24
    1298:	00 e0       	ldi	r16, 0x00	; 0
    129a:	10 e0       	ldi	r17, 0x00	; 0
    129c:	80 91 08 02 	lds	r24, 0x0208
    12a0:	90 91 09 02 	lds	r25, 0x0209
    12a4:	a0 91 0a 02 	lds	r26, 0x020A
    12a8:	b0 91 0b 02 	lds	r27, 0x020B
    12ac:	2f ef       	ldi	r18, 0xFF	; 255
    12ae:	3f ef       	ldi	r19, 0xFF	; 255
    12b0:	40 e0       	ldi	r20, 0x00	; 0
    12b2:	50 e0       	ldi	r21, 0x00	; 0
    12b4:	bc 01       	movw	r22, r24
    12b6:	cd 01       	movw	r24, r26
    12b8:	0e 94 55 28 	call	0x50aa	; 0x50aa <__mulsi3>
    12bc:	dc 01       	movw	r26, r24
    12be:	cb 01       	movw	r24, r22
    12c0:	8e 0d       	add	r24, r14
    12c2:	9f 1d       	adc	r25, r15
    12c4:	a0 1f       	adc	r26, r16
    12c6:	b1 1f       	adc	r27, r17
    12c8:	8d 8f       	std	Y+29, r24	; 0x1d
    12ca:	9e 8f       	std	Y+30, r25	; 0x1e
    12cc:	af 8f       	std	Y+31, r26	; 0x1f
    12ce:	b8 a3       	std	Y+32, r27	; 0x20
	double distance = (double) count * 0.008575;
    12d0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    12d2:	7e 8d       	ldd	r23, Y+30	; 0x1e
    12d4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12d6:	98 a1       	ldd	r25, Y+32	; 0x20
    12d8:	0e 94 02 05 	call	0xa04	; 0xa04 <__floatsisf>
    12dc:	dc 01       	movw	r26, r24
    12de:	cb 01       	movw	r24, r22
    12e0:	bc 01       	movw	r22, r24
    12e2:	cd 01       	movw	r24, r26
    12e4:	28 e2       	ldi	r18, 0x28	; 40
    12e6:	3e e7       	ldi	r19, 0x7E	; 126
    12e8:	4c e0       	ldi	r20, 0x0C	; 12
    12ea:	5c e3       	ldi	r21, 0x3C	; 60
    12ec:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    12f0:	dc 01       	movw	r26, r24
    12f2:	cb 01       	movw	r24, r22
    12f4:	89 8f       	std	Y+25, r24	; 0x19
    12f6:	9a 8f       	std	Y+26, r25	; 0x1a
    12f8:	ab 8f       	std	Y+27, r26	; 0x1b
    12fa:	bc 8f       	std	Y+28, r27	; 0x1c
	return distance;
    12fc:	89 8d       	ldd	r24, Y+25	; 0x19
    12fe:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1300:	ab 8d       	ldd	r26, Y+27	; 0x1b
    1302:	bc 8d       	ldd	r27, Y+28	; 0x1c


}
    1304:	bc 01       	movw	r22, r24
    1306:	cd 01       	movw	r24, r26
    1308:	a0 96       	adiw	r28, 0x20	; 32
    130a:	0f b6       	in	r0, 0x3f	; 63
    130c:	f8 94       	cli
    130e:	de bf       	out	0x3e, r29	; 62
    1310:	0f be       	out	0x3f, r0	; 63
    1312:	cd bf       	out	0x3d, r28	; 61
    1314:	cf 91       	pop	r28
    1316:	df 91       	pop	r29
    1318:	1f 91       	pop	r17
    131a:	0f 91       	pop	r16
    131c:	ff 90       	pop	r15
    131e:	ef 90       	pop	r14
    1320:	08 95       	ret

00001322 <__vector_9>:
ISR(TIMER1_OVF_vect){
    1322:	1f 92       	push	r1
    1324:	0f 92       	push	r0
    1326:	0f b6       	in	r0, 0x3f	; 63
    1328:	0f 92       	push	r0
    132a:	11 24       	eor	r1, r1
    132c:	8f 93       	push	r24
    132e:	9f 93       	push	r25
    1330:	af 93       	push	r26
    1332:	bf 93       	push	r27
    1334:	df 93       	push	r29
    1336:	cf 93       	push	r28
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
	OVF_COUNT++;
    133c:	80 91 08 02 	lds	r24, 0x0208
    1340:	90 91 09 02 	lds	r25, 0x0209
    1344:	a0 91 0a 02 	lds	r26, 0x020A
    1348:	b0 91 0b 02 	lds	r27, 0x020B
    134c:	01 96       	adiw	r24, 0x01	; 1
    134e:	a1 1d       	adc	r26, r1
    1350:	b1 1d       	adc	r27, r1
    1352:	80 93 08 02 	sts	0x0208, r24
    1356:	90 93 09 02 	sts	0x0209, r25
    135a:	a0 93 0a 02 	sts	0x020A, r26
    135e:	b0 93 0b 02 	sts	0x020B, r27
}
    1362:	cf 91       	pop	r28
    1364:	df 91       	pop	r29
    1366:	bf 91       	pop	r27
    1368:	af 91       	pop	r26
    136a:	9f 91       	pop	r25
    136c:	8f 91       	pop	r24
    136e:	0f 90       	pop	r0
    1370:	0f be       	out	0x3f, r0	; 63
    1372:	0f 90       	pop	r0
    1374:	1f 90       	pop	r1
    1376:	18 95       	reti

00001378 <LCDByte>:
	#define LCD_TYPE_204
#endif


void LCDByte(uint8_t c,uint8_t isdata)
{
    1378:	0f 93       	push	r16
    137a:	1f 93       	push	r17
    137c:	df 93       	push	r29
    137e:	cf 93       	push	r28
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
    1384:	cd 57       	subi	r28, 0x7D	; 125
    1386:	d0 40       	sbci	r29, 0x00	; 0
    1388:	0f b6       	in	r0, 0x3f	; 63
    138a:	f8 94       	cli
    138c:	de bf       	out	0x3e, r29	; 62
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	cd bf       	out	0x3d, r28	; 61
    1392:	fe 01       	movw	r30, r28
    1394:	e4 58       	subi	r30, 0x84	; 132
    1396:	ff 4f       	sbci	r31, 0xFF	; 255
    1398:	80 83       	st	Z, r24
    139a:	fe 01       	movw	r30, r28
    139c:	e3 58       	subi	r30, 0x83	; 131
    139e:	ff 4f       	sbci	r31, 0xFF	; 255
    13a0:	60 83       	st	Z, r22
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
    13a2:	de 01       	movw	r26, r28
    13a4:	a5 58       	subi	r26, 0x85	; 133
    13a6:	bf 4f       	sbci	r27, 0xFF	; 255
    13a8:	fe 01       	movw	r30, r28
    13aa:	e4 58       	subi	r30, 0x84	; 132
    13ac:	ff 4f       	sbci	r31, 0xFF	; 255
    13ae:	80 81       	ld	r24, Z
    13b0:	82 95       	swap	r24
    13b2:	8f 70       	andi	r24, 0x0F	; 15
    13b4:	8c 93       	st	X, r24
ln=(c & 0x0F);
    13b6:	de 01       	movw	r26, r28
    13b8:	a6 58       	subi	r26, 0x86	; 134
    13ba:	bf 4f       	sbci	r27, 0xFF	; 255
    13bc:	fe 01       	movw	r30, r28
    13be:	e4 58       	subi	r30, 0x84	; 132
    13c0:	ff 4f       	sbci	r31, 0xFF	; 255
    13c2:	80 81       	ld	r24, Z
    13c4:	8f 70       	andi	r24, 0x0F	; 15
    13c6:	8c 93       	st	X, r24

if(isdata==0)
    13c8:	fe 01       	movw	r30, r28
    13ca:	e3 58       	subi	r30, 0x83	; 131
    13cc:	ff 4f       	sbci	r31, 0xFF	; 255
    13ce:	80 81       	ld	r24, Z
    13d0:	88 23       	and	r24, r24
    13d2:	41 f4       	brne	.+16     	; 0x13e4 <LCDByte+0x6c>
	CLEAR_RS();
    13d4:	ab e3       	ldi	r26, 0x3B	; 59
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	eb e3       	ldi	r30, 0x3B	; 59
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	8e 7f       	andi	r24, 0xFE	; 254
    13e0:	8c 93       	st	X, r24
    13e2:	07 c0       	rjmp	.+14     	; 0x13f2 <LCDByte+0x7a>
else
	SET_RS();
    13e4:	ab e3       	ldi	r26, 0x3B	; 59
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	eb e3       	ldi	r30, 0x3B	; 59
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	81 60       	ori	r24, 0x01	; 1
    13f0:	8c 93       	st	X, r24
    13f2:	fe 01       	movw	r30, r28
    13f4:	eb 58       	subi	r30, 0x8B	; 139
    13f6:	ff 4f       	sbci	r31, 0xFF	; 255
    13f8:	80 e0       	ldi	r24, 0x00	; 0
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	a0 e0       	ldi	r26, 0x00	; 0
    13fe:	bf e3       	ldi	r27, 0x3F	; 63
    1400:	80 83       	st	Z, r24
    1402:	91 83       	std	Z+1, r25	; 0x01
    1404:	a2 83       	std	Z+2, r26	; 0x02
    1406:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1408:	8e 01       	movw	r16, r28
    140a:	0f 58       	subi	r16, 0x8F	; 143
    140c:	1f 4f       	sbci	r17, 0xFF	; 255
    140e:	fe 01       	movw	r30, r28
    1410:	eb 58       	subi	r30, 0x8B	; 139
    1412:	ff 4f       	sbci	r31, 0xFF	; 255
    1414:	60 81       	ld	r22, Z
    1416:	71 81       	ldd	r23, Z+1	; 0x01
    1418:	82 81       	ldd	r24, Z+2	; 0x02
    141a:	93 81       	ldd	r25, Z+3	; 0x03
    141c:	2b ea       	ldi	r18, 0xAB	; 171
    141e:	3a ea       	ldi	r19, 0xAA	; 170
    1420:	4a e2       	ldi	r20, 0x2A	; 42
    1422:	50 e4       	ldi	r21, 0x40	; 64
    1424:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1428:	dc 01       	movw	r26, r24
    142a:	cb 01       	movw	r24, r22
    142c:	f8 01       	movw	r30, r16
    142e:	80 83       	st	Z, r24
    1430:	91 83       	std	Z+1, r25	; 0x01
    1432:	a2 83       	std	Z+2, r26	; 0x02
    1434:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1436:	fe 01       	movw	r30, r28
    1438:	ef 58       	subi	r30, 0x8F	; 143
    143a:	ff 4f       	sbci	r31, 0xFF	; 255
    143c:	60 81       	ld	r22, Z
    143e:	71 81       	ldd	r23, Z+1	; 0x01
    1440:	82 81       	ldd	r24, Z+2	; 0x02
    1442:	93 81       	ldd	r25, Z+3	; 0x03
    1444:	20 e0       	ldi	r18, 0x00	; 0
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	40 e8       	ldi	r20, 0x80	; 128
    144a:	5f e3       	ldi	r21, 0x3F	; 63
    144c:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1450:	88 23       	and	r24, r24
    1452:	34 f4       	brge	.+12     	; 0x1460 <LCDByte+0xe8>
		__ticks = 1;
    1454:	fe 01       	movw	r30, r28
    1456:	e0 59       	subi	r30, 0x90	; 144
    1458:	ff 4f       	sbci	r31, 0xFF	; 255
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	80 83       	st	Z, r24
    145e:	e0 c0       	rjmp	.+448    	; 0x1620 <LCDByte+0x2a8>
	else if (__tmp > 255)
    1460:	fe 01       	movw	r30, r28
    1462:	ef 58       	subi	r30, 0x8F	; 143
    1464:	ff 4f       	sbci	r31, 0xFF	; 255
    1466:	60 81       	ld	r22, Z
    1468:	71 81       	ldd	r23, Z+1	; 0x01
    146a:	82 81       	ldd	r24, Z+2	; 0x02
    146c:	93 81       	ldd	r25, Z+3	; 0x03
    146e:	20 e0       	ldi	r18, 0x00	; 0
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	4f e7       	ldi	r20, 0x7F	; 127
    1474:	53 e4       	ldi	r21, 0x43	; 67
    1476:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    147a:	18 16       	cp	r1, r24
    147c:	0c f0       	brlt	.+2      	; 0x1480 <LCDByte+0x108>
    147e:	c0 c0       	rjmp	.+384    	; 0x1600 <LCDByte+0x288>
	{
		_delay_ms(__us / 1000.0);
    1480:	fe 01       	movw	r30, r28
    1482:	eb 58       	subi	r30, 0x8B	; 139
    1484:	ff 4f       	sbci	r31, 0xFF	; 255
    1486:	60 81       	ld	r22, Z
    1488:	71 81       	ldd	r23, Z+1	; 0x01
    148a:	82 81       	ldd	r24, Z+2	; 0x02
    148c:	93 81       	ldd	r25, Z+3	; 0x03
    148e:	20 e0       	ldi	r18, 0x00	; 0
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	4a e7       	ldi	r20, 0x7A	; 122
    1494:	54 e4       	ldi	r21, 0x44	; 68
    1496:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    149a:	dc 01       	movw	r26, r24
    149c:	cb 01       	movw	r24, r22
    149e:	fe 01       	movw	r30, r28
    14a0:	e4 59       	subi	r30, 0x94	; 148
    14a2:	ff 4f       	sbci	r31, 0xFF	; 255
    14a4:	80 83       	st	Z, r24
    14a6:	91 83       	std	Z+1, r25	; 0x01
    14a8:	a2 83       	std	Z+2, r26	; 0x02
    14aa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ac:	8e 01       	movw	r16, r28
    14ae:	08 59       	subi	r16, 0x98	; 152
    14b0:	1f 4f       	sbci	r17, 0xFF	; 255
    14b2:	fe 01       	movw	r30, r28
    14b4:	e4 59       	subi	r30, 0x94	; 148
    14b6:	ff 4f       	sbci	r31, 0xFF	; 255
    14b8:	60 81       	ld	r22, Z
    14ba:	71 81       	ldd	r23, Z+1	; 0x01
    14bc:	82 81       	ldd	r24, Z+2	; 0x02
    14be:	93 81       	ldd	r25, Z+3	; 0x03
    14c0:	20 e0       	ldi	r18, 0x00	; 0
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	4a ef       	ldi	r20, 0xFA	; 250
    14c6:	54 e4       	ldi	r21, 0x44	; 68
    14c8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    14cc:	dc 01       	movw	r26, r24
    14ce:	cb 01       	movw	r24, r22
    14d0:	f8 01       	movw	r30, r16
    14d2:	80 83       	st	Z, r24
    14d4:	91 83       	std	Z+1, r25	; 0x01
    14d6:	a2 83       	std	Z+2, r26	; 0x02
    14d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14da:	fe 01       	movw	r30, r28
    14dc:	e8 59       	subi	r30, 0x98	; 152
    14de:	ff 4f       	sbci	r31, 0xFF	; 255
    14e0:	60 81       	ld	r22, Z
    14e2:	71 81       	ldd	r23, Z+1	; 0x01
    14e4:	82 81       	ldd	r24, Z+2	; 0x02
    14e6:	93 81       	ldd	r25, Z+3	; 0x03
    14e8:	20 e0       	ldi	r18, 0x00	; 0
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	40 e8       	ldi	r20, 0x80	; 128
    14ee:	5f e3       	ldi	r21, 0x3F	; 63
    14f0:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    14f4:	88 23       	and	r24, r24
    14f6:	44 f4       	brge	.+16     	; 0x1508 <LCDByte+0x190>
		__ticks = 1;
    14f8:	fe 01       	movw	r30, r28
    14fa:	ea 59       	subi	r30, 0x9A	; 154
    14fc:	ff 4f       	sbci	r31, 0xFF	; 255
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	91 83       	std	Z+1, r25	; 0x01
    1504:	80 83       	st	Z, r24
    1506:	64 c0       	rjmp	.+200    	; 0x15d0 <LCDByte+0x258>
	else if (__tmp > 65535)
    1508:	fe 01       	movw	r30, r28
    150a:	e8 59       	subi	r30, 0x98	; 152
    150c:	ff 4f       	sbci	r31, 0xFF	; 255
    150e:	60 81       	ld	r22, Z
    1510:	71 81       	ldd	r23, Z+1	; 0x01
    1512:	82 81       	ldd	r24, Z+2	; 0x02
    1514:	93 81       	ldd	r25, Z+3	; 0x03
    1516:	20 e0       	ldi	r18, 0x00	; 0
    1518:	3f ef       	ldi	r19, 0xFF	; 255
    151a:	4f e7       	ldi	r20, 0x7F	; 127
    151c:	57 e4       	ldi	r21, 0x47	; 71
    151e:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1522:	18 16       	cp	r1, r24
    1524:	0c f0       	brlt	.+2      	; 0x1528 <LCDByte+0x1b0>
    1526:	43 c0       	rjmp	.+134    	; 0x15ae <LCDByte+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1528:	fe 01       	movw	r30, r28
    152a:	e4 59       	subi	r30, 0x94	; 148
    152c:	ff 4f       	sbci	r31, 0xFF	; 255
    152e:	60 81       	ld	r22, Z
    1530:	71 81       	ldd	r23, Z+1	; 0x01
    1532:	82 81       	ldd	r24, Z+2	; 0x02
    1534:	93 81       	ldd	r25, Z+3	; 0x03
    1536:	20 e0       	ldi	r18, 0x00	; 0
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	40 e2       	ldi	r20, 0x20	; 32
    153c:	51 e4       	ldi	r21, 0x41	; 65
    153e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1542:	dc 01       	movw	r26, r24
    1544:	cb 01       	movw	r24, r22
    1546:	8e 01       	movw	r16, r28
    1548:	0a 59       	subi	r16, 0x9A	; 154
    154a:	1f 4f       	sbci	r17, 0xFF	; 255
    154c:	bc 01       	movw	r22, r24
    154e:	cd 01       	movw	r24, r26
    1550:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1554:	dc 01       	movw	r26, r24
    1556:	cb 01       	movw	r24, r22
    1558:	f8 01       	movw	r30, r16
    155a:	91 83       	std	Z+1, r25	; 0x01
    155c:	80 83       	st	Z, r24
    155e:	1f c0       	rjmp	.+62     	; 0x159e <LCDByte+0x226>
    1560:	fe 01       	movw	r30, r28
    1562:	ec 59       	subi	r30, 0x9C	; 156
    1564:	ff 4f       	sbci	r31, 0xFF	; 255
    1566:	88 ec       	ldi	r24, 0xC8	; 200
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	91 83       	std	Z+1, r25	; 0x01
    156c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    156e:	fe 01       	movw	r30, r28
    1570:	ec 59       	subi	r30, 0x9C	; 156
    1572:	ff 4f       	sbci	r31, 0xFF	; 255
    1574:	80 81       	ld	r24, Z
    1576:	91 81       	ldd	r25, Z+1	; 0x01
    1578:	01 97       	sbiw	r24, 0x01	; 1
    157a:	f1 f7       	brne	.-4      	; 0x1578 <LCDByte+0x200>
    157c:	fe 01       	movw	r30, r28
    157e:	ec 59       	subi	r30, 0x9C	; 156
    1580:	ff 4f       	sbci	r31, 0xFF	; 255
    1582:	91 83       	std	Z+1, r25	; 0x01
    1584:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1586:	de 01       	movw	r26, r28
    1588:	aa 59       	subi	r26, 0x9A	; 154
    158a:	bf 4f       	sbci	r27, 0xFF	; 255
    158c:	fe 01       	movw	r30, r28
    158e:	ea 59       	subi	r30, 0x9A	; 154
    1590:	ff 4f       	sbci	r31, 0xFF	; 255
    1592:	80 81       	ld	r24, Z
    1594:	91 81       	ldd	r25, Z+1	; 0x01
    1596:	01 97       	sbiw	r24, 0x01	; 1
    1598:	11 96       	adiw	r26, 0x01	; 1
    159a:	9c 93       	st	X, r25
    159c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    159e:	fe 01       	movw	r30, r28
    15a0:	ea 59       	subi	r30, 0x9A	; 154
    15a2:	ff 4f       	sbci	r31, 0xFF	; 255
    15a4:	80 81       	ld	r24, Z
    15a6:	91 81       	ldd	r25, Z+1	; 0x01
    15a8:	00 97       	sbiw	r24, 0x00	; 0
    15aa:	d1 f6       	brne	.-76     	; 0x1560 <LCDByte+0x1e8>
    15ac:	4b c0       	rjmp	.+150    	; 0x1644 <LCDByte+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15ae:	8e 01       	movw	r16, r28
    15b0:	0a 59       	subi	r16, 0x9A	; 154
    15b2:	1f 4f       	sbci	r17, 0xFF	; 255
    15b4:	fe 01       	movw	r30, r28
    15b6:	e8 59       	subi	r30, 0x98	; 152
    15b8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ba:	60 81       	ld	r22, Z
    15bc:	71 81       	ldd	r23, Z+1	; 0x01
    15be:	82 81       	ldd	r24, Z+2	; 0x02
    15c0:	93 81       	ldd	r25, Z+3	; 0x03
    15c2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    15c6:	dc 01       	movw	r26, r24
    15c8:	cb 01       	movw	r24, r22
    15ca:	f8 01       	movw	r30, r16
    15cc:	91 83       	std	Z+1, r25	; 0x01
    15ce:	80 83       	st	Z, r24
    15d0:	de 01       	movw	r26, r28
    15d2:	ae 59       	subi	r26, 0x9E	; 158
    15d4:	bf 4f       	sbci	r27, 0xFF	; 255
    15d6:	fe 01       	movw	r30, r28
    15d8:	ea 59       	subi	r30, 0x9A	; 154
    15da:	ff 4f       	sbci	r31, 0xFF	; 255
    15dc:	80 81       	ld	r24, Z
    15de:	91 81       	ldd	r25, Z+1	; 0x01
    15e0:	11 96       	adiw	r26, 0x01	; 1
    15e2:	9c 93       	st	X, r25
    15e4:	8e 93       	st	-X, r24
    15e6:	fe 01       	movw	r30, r28
    15e8:	ee 59       	subi	r30, 0x9E	; 158
    15ea:	ff 4f       	sbci	r31, 0xFF	; 255
    15ec:	80 81       	ld	r24, Z
    15ee:	91 81       	ldd	r25, Z+1	; 0x01
    15f0:	01 97       	sbiw	r24, 0x01	; 1
    15f2:	f1 f7       	brne	.-4      	; 0x15f0 <LCDByte+0x278>
    15f4:	fe 01       	movw	r30, r28
    15f6:	ee 59       	subi	r30, 0x9E	; 158
    15f8:	ff 4f       	sbci	r31, 0xFF	; 255
    15fa:	91 83       	std	Z+1, r25	; 0x01
    15fc:	80 83       	st	Z, r24
    15fe:	22 c0       	rjmp	.+68     	; 0x1644 <LCDByte+0x2cc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1600:	8e 01       	movw	r16, r28
    1602:	00 59       	subi	r16, 0x90	; 144
    1604:	1f 4f       	sbci	r17, 0xFF	; 255
    1606:	fe 01       	movw	r30, r28
    1608:	ef 58       	subi	r30, 0x8F	; 143
    160a:	ff 4f       	sbci	r31, 0xFF	; 255
    160c:	60 81       	ld	r22, Z
    160e:	71 81       	ldd	r23, Z+1	; 0x01
    1610:	82 81       	ldd	r24, Z+2	; 0x02
    1612:	93 81       	ldd	r25, Z+3	; 0x03
    1614:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1618:	dc 01       	movw	r26, r24
    161a:	cb 01       	movw	r24, r22
    161c:	f8 01       	movw	r30, r16
    161e:	80 83       	st	Z, r24
    1620:	de 01       	movw	r26, r28
    1622:	af 59       	subi	r26, 0x9F	; 159
    1624:	bf 4f       	sbci	r27, 0xFF	; 255
    1626:	fe 01       	movw	r30, r28
    1628:	e0 59       	subi	r30, 0x90	; 144
    162a:	ff 4f       	sbci	r31, 0xFF	; 255
    162c:	80 81       	ld	r24, Z
    162e:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1630:	fe 01       	movw	r30, r28
    1632:	ef 59       	subi	r30, 0x9F	; 159
    1634:	ff 4f       	sbci	r31, 0xFF	; 255
    1636:	80 81       	ld	r24, Z
    1638:	8a 95       	dec	r24
    163a:	f1 f7       	brne	.-4      	; 0x1638 <LCDByte+0x2c0>
    163c:	fe 01       	movw	r30, r28
    163e:	ef 59       	subi	r30, 0x9F	; 159
    1640:	ff 4f       	sbci	r31, 0xFF	; 255
    1642:	80 83       	st	Z, r24

_delay_us(0.500);		//tAS

SET_E();
    1644:	ab e3       	ldi	r26, 0x3B	; 59
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	eb e3       	ldi	r30, 0x3B	; 59
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	84 60       	ori	r24, 0x04	; 4
    1650:	8c 93       	st	X, r24

//Send high nibble

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
    1652:	eb e3       	ldi	r30, 0x3B	; 59
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	28 2f       	mov	r18, r24
    165a:	2f 70       	andi	r18, 0x0F	; 15
    165c:	fe 01       	movw	r30, r28
    165e:	e5 58       	subi	r30, 0x85	; 133
    1660:	ff 4f       	sbci	r31, 0xFF	; 255
    1662:	80 81       	ld	r24, Z
    1664:	88 2f       	mov	r24, r24
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	82 95       	swap	r24
    166a:	92 95       	swap	r25
    166c:	90 7f       	andi	r25, 0xF0	; 240
    166e:	98 27       	eor	r25, r24
    1670:	80 7f       	andi	r24, 0xF0	; 240
    1672:	98 27       	eor	r25, r24
    1674:	82 2b       	or	r24, r18
    1676:	fe 01       	movw	r30, r28
    1678:	e7 58       	subi	r30, 0x87	; 135
    167a:	ff 4f       	sbci	r31, 0xFF	; 255
    167c:	80 83       	st	Z, r24
LCD_DATA_PORT=temp;
    167e:	ab e3       	ldi	r26, 0x3B	; 59
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	fe 01       	movw	r30, r28
    1684:	e7 58       	subi	r30, 0x87	; 135
    1686:	ff 4f       	sbci	r31, 0xFF	; 255
    1688:	80 81       	ld	r24, Z
    168a:	8c 93       	st	X, r24
    168c:	fe 01       	movw	r30, r28
    168e:	e3 5a       	subi	r30, 0xA3	; 163
    1690:	ff 4f       	sbci	r31, 0xFF	; 255
    1692:	80 e0       	ldi	r24, 0x00	; 0
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	a0 e8       	ldi	r26, 0x80	; 128
    1698:	bf e3       	ldi	r27, 0x3F	; 63
    169a:	80 83       	st	Z, r24
    169c:	91 83       	std	Z+1, r25	; 0x01
    169e:	a2 83       	std	Z+2, r26	; 0x02
    16a0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    16a2:	8e 01       	movw	r16, r28
    16a4:	07 5a       	subi	r16, 0xA7	; 167
    16a6:	1f 4f       	sbci	r17, 0xFF	; 255
    16a8:	fe 01       	movw	r30, r28
    16aa:	e3 5a       	subi	r30, 0xA3	; 163
    16ac:	ff 4f       	sbci	r31, 0xFF	; 255
    16ae:	60 81       	ld	r22, Z
    16b0:	71 81       	ldd	r23, Z+1	; 0x01
    16b2:	82 81       	ldd	r24, Z+2	; 0x02
    16b4:	93 81       	ldd	r25, Z+3	; 0x03
    16b6:	2b ea       	ldi	r18, 0xAB	; 171
    16b8:	3a ea       	ldi	r19, 0xAA	; 170
    16ba:	4a e2       	ldi	r20, 0x2A	; 42
    16bc:	50 e4       	ldi	r21, 0x40	; 64
    16be:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    16c2:	dc 01       	movw	r26, r24
    16c4:	cb 01       	movw	r24, r22
    16c6:	f8 01       	movw	r30, r16
    16c8:	80 83       	st	Z, r24
    16ca:	91 83       	std	Z+1, r25	; 0x01
    16cc:	a2 83       	std	Z+2, r26	; 0x02
    16ce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16d0:	fe 01       	movw	r30, r28
    16d2:	e7 5a       	subi	r30, 0xA7	; 167
    16d4:	ff 4f       	sbci	r31, 0xFF	; 255
    16d6:	60 81       	ld	r22, Z
    16d8:	71 81       	ldd	r23, Z+1	; 0x01
    16da:	82 81       	ldd	r24, Z+2	; 0x02
    16dc:	93 81       	ldd	r25, Z+3	; 0x03
    16de:	20 e0       	ldi	r18, 0x00	; 0
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	40 e8       	ldi	r20, 0x80	; 128
    16e4:	5f e3       	ldi	r21, 0x3F	; 63
    16e6:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    16ea:	88 23       	and	r24, r24
    16ec:	34 f4       	brge	.+12     	; 0x16fa <LCDByte+0x382>
		__ticks = 1;
    16ee:	fe 01       	movw	r30, r28
    16f0:	e8 5a       	subi	r30, 0xA8	; 168
    16f2:	ff 4f       	sbci	r31, 0xFF	; 255
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	80 83       	st	Z, r24
    16f8:	e0 c0       	rjmp	.+448    	; 0x18ba <LCDByte+0x542>
	else if (__tmp > 255)
    16fa:	fe 01       	movw	r30, r28
    16fc:	e7 5a       	subi	r30, 0xA7	; 167
    16fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1700:	60 81       	ld	r22, Z
    1702:	71 81       	ldd	r23, Z+1	; 0x01
    1704:	82 81       	ldd	r24, Z+2	; 0x02
    1706:	93 81       	ldd	r25, Z+3	; 0x03
    1708:	20 e0       	ldi	r18, 0x00	; 0
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	4f e7       	ldi	r20, 0x7F	; 127
    170e:	53 e4       	ldi	r21, 0x43	; 67
    1710:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1714:	18 16       	cp	r1, r24
    1716:	0c f0       	brlt	.+2      	; 0x171a <LCDByte+0x3a2>
    1718:	c0 c0       	rjmp	.+384    	; 0x189a <LCDByte+0x522>
	{
		_delay_ms(__us / 1000.0);
    171a:	fe 01       	movw	r30, r28
    171c:	e3 5a       	subi	r30, 0xA3	; 163
    171e:	ff 4f       	sbci	r31, 0xFF	; 255
    1720:	60 81       	ld	r22, Z
    1722:	71 81       	ldd	r23, Z+1	; 0x01
    1724:	82 81       	ldd	r24, Z+2	; 0x02
    1726:	93 81       	ldd	r25, Z+3	; 0x03
    1728:	20 e0       	ldi	r18, 0x00	; 0
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	4a e7       	ldi	r20, 0x7A	; 122
    172e:	54 e4       	ldi	r21, 0x44	; 68
    1730:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    1734:	dc 01       	movw	r26, r24
    1736:	cb 01       	movw	r24, r22
    1738:	fe 01       	movw	r30, r28
    173a:	ec 5a       	subi	r30, 0xAC	; 172
    173c:	ff 4f       	sbci	r31, 0xFF	; 255
    173e:	80 83       	st	Z, r24
    1740:	91 83       	std	Z+1, r25	; 0x01
    1742:	a2 83       	std	Z+2, r26	; 0x02
    1744:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1746:	8e 01       	movw	r16, r28
    1748:	00 5b       	subi	r16, 0xB0	; 176
    174a:	1f 4f       	sbci	r17, 0xFF	; 255
    174c:	fe 01       	movw	r30, r28
    174e:	ec 5a       	subi	r30, 0xAC	; 172
    1750:	ff 4f       	sbci	r31, 0xFF	; 255
    1752:	60 81       	ld	r22, Z
    1754:	71 81       	ldd	r23, Z+1	; 0x01
    1756:	82 81       	ldd	r24, Z+2	; 0x02
    1758:	93 81       	ldd	r25, Z+3	; 0x03
    175a:	20 e0       	ldi	r18, 0x00	; 0
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	4a ef       	ldi	r20, 0xFA	; 250
    1760:	54 e4       	ldi	r21, 0x44	; 68
    1762:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1766:	dc 01       	movw	r26, r24
    1768:	cb 01       	movw	r24, r22
    176a:	f8 01       	movw	r30, r16
    176c:	80 83       	st	Z, r24
    176e:	91 83       	std	Z+1, r25	; 0x01
    1770:	a2 83       	std	Z+2, r26	; 0x02
    1772:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1774:	fe 01       	movw	r30, r28
    1776:	e0 5b       	subi	r30, 0xB0	; 176
    1778:	ff 4f       	sbci	r31, 0xFF	; 255
    177a:	60 81       	ld	r22, Z
    177c:	71 81       	ldd	r23, Z+1	; 0x01
    177e:	82 81       	ldd	r24, Z+2	; 0x02
    1780:	93 81       	ldd	r25, Z+3	; 0x03
    1782:	20 e0       	ldi	r18, 0x00	; 0
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	40 e8       	ldi	r20, 0x80	; 128
    1788:	5f e3       	ldi	r21, 0x3F	; 63
    178a:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    178e:	88 23       	and	r24, r24
    1790:	44 f4       	brge	.+16     	; 0x17a2 <LCDByte+0x42a>
		__ticks = 1;
    1792:	fe 01       	movw	r30, r28
    1794:	e2 5b       	subi	r30, 0xB2	; 178
    1796:	ff 4f       	sbci	r31, 0xFF	; 255
    1798:	81 e0       	ldi	r24, 0x01	; 1
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	91 83       	std	Z+1, r25	; 0x01
    179e:	80 83       	st	Z, r24
    17a0:	64 c0       	rjmp	.+200    	; 0x186a <LCDByte+0x4f2>
	else if (__tmp > 65535)
    17a2:	fe 01       	movw	r30, r28
    17a4:	e0 5b       	subi	r30, 0xB0	; 176
    17a6:	ff 4f       	sbci	r31, 0xFF	; 255
    17a8:	60 81       	ld	r22, Z
    17aa:	71 81       	ldd	r23, Z+1	; 0x01
    17ac:	82 81       	ldd	r24, Z+2	; 0x02
    17ae:	93 81       	ldd	r25, Z+3	; 0x03
    17b0:	20 e0       	ldi	r18, 0x00	; 0
    17b2:	3f ef       	ldi	r19, 0xFF	; 255
    17b4:	4f e7       	ldi	r20, 0x7F	; 127
    17b6:	57 e4       	ldi	r21, 0x47	; 71
    17b8:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    17bc:	18 16       	cp	r1, r24
    17be:	0c f0       	brlt	.+2      	; 0x17c2 <LCDByte+0x44a>
    17c0:	43 c0       	rjmp	.+134    	; 0x1848 <LCDByte+0x4d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17c2:	fe 01       	movw	r30, r28
    17c4:	ec 5a       	subi	r30, 0xAC	; 172
    17c6:	ff 4f       	sbci	r31, 0xFF	; 255
    17c8:	60 81       	ld	r22, Z
    17ca:	71 81       	ldd	r23, Z+1	; 0x01
    17cc:	82 81       	ldd	r24, Z+2	; 0x02
    17ce:	93 81       	ldd	r25, Z+3	; 0x03
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	40 e2       	ldi	r20, 0x20	; 32
    17d6:	51 e4       	ldi	r21, 0x41	; 65
    17d8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    17dc:	dc 01       	movw	r26, r24
    17de:	cb 01       	movw	r24, r22
    17e0:	8e 01       	movw	r16, r28
    17e2:	02 5b       	subi	r16, 0xB2	; 178
    17e4:	1f 4f       	sbci	r17, 0xFF	; 255
    17e6:	bc 01       	movw	r22, r24
    17e8:	cd 01       	movw	r24, r26
    17ea:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    17ee:	dc 01       	movw	r26, r24
    17f0:	cb 01       	movw	r24, r22
    17f2:	f8 01       	movw	r30, r16
    17f4:	91 83       	std	Z+1, r25	; 0x01
    17f6:	80 83       	st	Z, r24
    17f8:	1f c0       	rjmp	.+62     	; 0x1838 <LCDByte+0x4c0>
    17fa:	fe 01       	movw	r30, r28
    17fc:	e4 5b       	subi	r30, 0xB4	; 180
    17fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1800:	88 ec       	ldi	r24, 0xC8	; 200
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	91 83       	std	Z+1, r25	; 0x01
    1806:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1808:	fe 01       	movw	r30, r28
    180a:	e4 5b       	subi	r30, 0xB4	; 180
    180c:	ff 4f       	sbci	r31, 0xFF	; 255
    180e:	80 81       	ld	r24, Z
    1810:	91 81       	ldd	r25, Z+1	; 0x01
    1812:	01 97       	sbiw	r24, 0x01	; 1
    1814:	f1 f7       	brne	.-4      	; 0x1812 <LCDByte+0x49a>
    1816:	fe 01       	movw	r30, r28
    1818:	e4 5b       	subi	r30, 0xB4	; 180
    181a:	ff 4f       	sbci	r31, 0xFF	; 255
    181c:	91 83       	std	Z+1, r25	; 0x01
    181e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1820:	de 01       	movw	r26, r28
    1822:	a2 5b       	subi	r26, 0xB2	; 178
    1824:	bf 4f       	sbci	r27, 0xFF	; 255
    1826:	fe 01       	movw	r30, r28
    1828:	e2 5b       	subi	r30, 0xB2	; 178
    182a:	ff 4f       	sbci	r31, 0xFF	; 255
    182c:	80 81       	ld	r24, Z
    182e:	91 81       	ldd	r25, Z+1	; 0x01
    1830:	01 97       	sbiw	r24, 0x01	; 1
    1832:	11 96       	adiw	r26, 0x01	; 1
    1834:	9c 93       	st	X, r25
    1836:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1838:	fe 01       	movw	r30, r28
    183a:	e2 5b       	subi	r30, 0xB2	; 178
    183c:	ff 4f       	sbci	r31, 0xFF	; 255
    183e:	80 81       	ld	r24, Z
    1840:	91 81       	ldd	r25, Z+1	; 0x01
    1842:	00 97       	sbiw	r24, 0x00	; 0
    1844:	d1 f6       	brne	.-76     	; 0x17fa <LCDByte+0x482>
    1846:	4b c0       	rjmp	.+150    	; 0x18de <LCDByte+0x566>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1848:	8e 01       	movw	r16, r28
    184a:	02 5b       	subi	r16, 0xB2	; 178
    184c:	1f 4f       	sbci	r17, 0xFF	; 255
    184e:	fe 01       	movw	r30, r28
    1850:	e0 5b       	subi	r30, 0xB0	; 176
    1852:	ff 4f       	sbci	r31, 0xFF	; 255
    1854:	60 81       	ld	r22, Z
    1856:	71 81       	ldd	r23, Z+1	; 0x01
    1858:	82 81       	ldd	r24, Z+2	; 0x02
    185a:	93 81       	ldd	r25, Z+3	; 0x03
    185c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1860:	dc 01       	movw	r26, r24
    1862:	cb 01       	movw	r24, r22
    1864:	f8 01       	movw	r30, r16
    1866:	91 83       	std	Z+1, r25	; 0x01
    1868:	80 83       	st	Z, r24
    186a:	de 01       	movw	r26, r28
    186c:	a6 5b       	subi	r26, 0xB6	; 182
    186e:	bf 4f       	sbci	r27, 0xFF	; 255
    1870:	fe 01       	movw	r30, r28
    1872:	e2 5b       	subi	r30, 0xB2	; 178
    1874:	ff 4f       	sbci	r31, 0xFF	; 255
    1876:	80 81       	ld	r24, Z
    1878:	91 81       	ldd	r25, Z+1	; 0x01
    187a:	11 96       	adiw	r26, 0x01	; 1
    187c:	9c 93       	st	X, r25
    187e:	8e 93       	st	-X, r24
    1880:	fe 01       	movw	r30, r28
    1882:	e6 5b       	subi	r30, 0xB6	; 182
    1884:	ff 4f       	sbci	r31, 0xFF	; 255
    1886:	80 81       	ld	r24, Z
    1888:	91 81       	ldd	r25, Z+1	; 0x01
    188a:	01 97       	sbiw	r24, 0x01	; 1
    188c:	f1 f7       	brne	.-4      	; 0x188a <LCDByte+0x512>
    188e:	fe 01       	movw	r30, r28
    1890:	e6 5b       	subi	r30, 0xB6	; 182
    1892:	ff 4f       	sbci	r31, 0xFF	; 255
    1894:	91 83       	std	Z+1, r25	; 0x01
    1896:	80 83       	st	Z, r24
    1898:	22 c0       	rjmp	.+68     	; 0x18de <LCDByte+0x566>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    189a:	8e 01       	movw	r16, r28
    189c:	08 5a       	subi	r16, 0xA8	; 168
    189e:	1f 4f       	sbci	r17, 0xFF	; 255
    18a0:	fe 01       	movw	r30, r28
    18a2:	e7 5a       	subi	r30, 0xA7	; 167
    18a4:	ff 4f       	sbci	r31, 0xFF	; 255
    18a6:	60 81       	ld	r22, Z
    18a8:	71 81       	ldd	r23, Z+1	; 0x01
    18aa:	82 81       	ldd	r24, Z+2	; 0x02
    18ac:	93 81       	ldd	r25, Z+3	; 0x03
    18ae:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    18b2:	dc 01       	movw	r26, r24
    18b4:	cb 01       	movw	r24, r22
    18b6:	f8 01       	movw	r30, r16
    18b8:	80 83       	st	Z, r24
    18ba:	de 01       	movw	r26, r28
    18bc:	a7 5b       	subi	r26, 0xB7	; 183
    18be:	bf 4f       	sbci	r27, 0xFF	; 255
    18c0:	fe 01       	movw	r30, r28
    18c2:	e8 5a       	subi	r30, 0xA8	; 168
    18c4:	ff 4f       	sbci	r31, 0xFF	; 255
    18c6:	80 81       	ld	r24, Z
    18c8:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    18ca:	fe 01       	movw	r30, r28
    18cc:	e7 5b       	subi	r30, 0xB7	; 183
    18ce:	ff 4f       	sbci	r31, 0xFF	; 255
    18d0:	80 81       	ld	r24, Z
    18d2:	8a 95       	dec	r24
    18d4:	f1 f7       	brne	.-4      	; 0x18d2 <LCDByte+0x55a>
    18d6:	fe 01       	movw	r30, r28
    18d8:	e7 5b       	subi	r30, 0xB7	; 183
    18da:	ff 4f       	sbci	r31, 0xFF	; 255
    18dc:	80 83       	st	Z, r24

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
    18de:	ab e3       	ldi	r26, 0x3B	; 59
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	eb e3       	ldi	r30, 0x3B	; 59
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	80 81       	ld	r24, Z
    18e8:	8b 7f       	andi	r24, 0xFB	; 251
    18ea:	8c 93       	st	X, r24
    18ec:	fe 01       	movw	r30, r28
    18ee:	eb 5b       	subi	r30, 0xBB	; 187
    18f0:	ff 4f       	sbci	r31, 0xFF	; 255
    18f2:	80 e0       	ldi	r24, 0x00	; 0
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	a0 e8       	ldi	r26, 0x80	; 128
    18f8:	bf e3       	ldi	r27, 0x3F	; 63
    18fa:	80 83       	st	Z, r24
    18fc:	91 83       	std	Z+1, r25	; 0x01
    18fe:	a2 83       	std	Z+2, r26	; 0x02
    1900:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1902:	8e 01       	movw	r16, r28
    1904:	0f 5b       	subi	r16, 0xBF	; 191
    1906:	1f 4f       	sbci	r17, 0xFF	; 255
    1908:	fe 01       	movw	r30, r28
    190a:	eb 5b       	subi	r30, 0xBB	; 187
    190c:	ff 4f       	sbci	r31, 0xFF	; 255
    190e:	60 81       	ld	r22, Z
    1910:	71 81       	ldd	r23, Z+1	; 0x01
    1912:	82 81       	ldd	r24, Z+2	; 0x02
    1914:	93 81       	ldd	r25, Z+3	; 0x03
    1916:	2b ea       	ldi	r18, 0xAB	; 171
    1918:	3a ea       	ldi	r19, 0xAA	; 170
    191a:	4a e2       	ldi	r20, 0x2A	; 42
    191c:	50 e4       	ldi	r21, 0x40	; 64
    191e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1922:	dc 01       	movw	r26, r24
    1924:	cb 01       	movw	r24, r22
    1926:	f8 01       	movw	r30, r16
    1928:	80 83       	st	Z, r24
    192a:	91 83       	std	Z+1, r25	; 0x01
    192c:	a2 83       	std	Z+2, r26	; 0x02
    192e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1930:	fe 01       	movw	r30, r28
    1932:	ef 5b       	subi	r30, 0xBF	; 191
    1934:	ff 4f       	sbci	r31, 0xFF	; 255
    1936:	60 81       	ld	r22, Z
    1938:	71 81       	ldd	r23, Z+1	; 0x01
    193a:	82 81       	ldd	r24, Z+2	; 0x02
    193c:	93 81       	ldd	r25, Z+3	; 0x03
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	40 e8       	ldi	r20, 0x80	; 128
    1944:	5f e3       	ldi	r21, 0x3F	; 63
    1946:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    194a:	88 23       	and	r24, r24
    194c:	34 f4       	brge	.+12     	; 0x195a <LCDByte+0x5e2>
		__ticks = 1;
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	fe 01       	movw	r30, r28
    1952:	e0 5c       	subi	r30, 0xC0	; 192
    1954:	ff 4f       	sbci	r31, 0xFF	; 255
    1956:	80 83       	st	Z, r24
    1958:	9d c0       	rjmp	.+314    	; 0x1a94 <LCDByte+0x71c>
	else if (__tmp > 255)
    195a:	fe 01       	movw	r30, r28
    195c:	ef 5b       	subi	r30, 0xBF	; 191
    195e:	ff 4f       	sbci	r31, 0xFF	; 255
    1960:	60 81       	ld	r22, Z
    1962:	71 81       	ldd	r23, Z+1	; 0x01
    1964:	82 81       	ldd	r24, Z+2	; 0x02
    1966:	93 81       	ldd	r25, Z+3	; 0x03
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	4f e7       	ldi	r20, 0x7F	; 127
    196e:	53 e4       	ldi	r21, 0x43	; 67
    1970:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1974:	18 16       	cp	r1, r24
    1976:	0c f0       	brlt	.+2      	; 0x197a <LCDByte+0x602>
    1978:	7e c0       	rjmp	.+252    	; 0x1a76 <LCDByte+0x6fe>
	{
		_delay_ms(__us / 1000.0);
    197a:	fe 01       	movw	r30, r28
    197c:	eb 5b       	subi	r30, 0xBB	; 187
    197e:	ff 4f       	sbci	r31, 0xFF	; 255
    1980:	60 81       	ld	r22, Z
    1982:	71 81       	ldd	r23, Z+1	; 0x01
    1984:	82 81       	ldd	r24, Z+2	; 0x02
    1986:	93 81       	ldd	r25, Z+3	; 0x03
    1988:	20 e0       	ldi	r18, 0x00	; 0
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	4a e7       	ldi	r20, 0x7A	; 122
    198e:	54 e4       	ldi	r21, 0x44	; 68
    1990:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    1994:	dc 01       	movw	r26, r24
    1996:	cb 01       	movw	r24, r22
    1998:	8c af       	std	Y+60, r24	; 0x3c
    199a:	9d af       	std	Y+61, r25	; 0x3d
    199c:	ae af       	std	Y+62, r26	; 0x3e
    199e:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19a0:	6c ad       	ldd	r22, Y+60	; 0x3c
    19a2:	7d ad       	ldd	r23, Y+61	; 0x3d
    19a4:	8e ad       	ldd	r24, Y+62	; 0x3e
    19a6:	9f ad       	ldd	r25, Y+63	; 0x3f
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	4a ef       	ldi	r20, 0xFA	; 250
    19ae:	54 e4       	ldi	r21, 0x44	; 68
    19b0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    19b4:	dc 01       	movw	r26, r24
    19b6:	cb 01       	movw	r24, r22
    19b8:	88 af       	std	Y+56, r24	; 0x38
    19ba:	99 af       	std	Y+57, r25	; 0x39
    19bc:	aa af       	std	Y+58, r26	; 0x3a
    19be:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    19c0:	68 ad       	ldd	r22, Y+56	; 0x38
    19c2:	79 ad       	ldd	r23, Y+57	; 0x39
    19c4:	8a ad       	ldd	r24, Y+58	; 0x3a
    19c6:	9b ad       	ldd	r25, Y+59	; 0x3b
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	40 e8       	ldi	r20, 0x80	; 128
    19ce:	5f e3       	ldi	r21, 0x3F	; 63
    19d0:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    19d4:	88 23       	and	r24, r24
    19d6:	2c f4       	brge	.+10     	; 0x19e2 <LCDByte+0x66a>
		__ticks = 1;
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	9f ab       	std	Y+55, r25	; 0x37
    19de:	8e ab       	std	Y+54, r24	; 0x36
    19e0:	3f c0       	rjmp	.+126    	; 0x1a60 <LCDByte+0x6e8>
	else if (__tmp > 65535)
    19e2:	68 ad       	ldd	r22, Y+56	; 0x38
    19e4:	79 ad       	ldd	r23, Y+57	; 0x39
    19e6:	8a ad       	ldd	r24, Y+58	; 0x3a
    19e8:	9b ad       	ldd	r25, Y+59	; 0x3b
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	3f ef       	ldi	r19, 0xFF	; 255
    19ee:	4f e7       	ldi	r20, 0x7F	; 127
    19f0:	57 e4       	ldi	r21, 0x47	; 71
    19f2:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    19f6:	18 16       	cp	r1, r24
    19f8:	4c f5       	brge	.+82     	; 0x1a4c <LCDByte+0x6d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19fa:	6c ad       	ldd	r22, Y+60	; 0x3c
    19fc:	7d ad       	ldd	r23, Y+61	; 0x3d
    19fe:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a00:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a02:	20 e0       	ldi	r18, 0x00	; 0
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	40 e2       	ldi	r20, 0x20	; 32
    1a08:	51 e4       	ldi	r21, 0x41	; 65
    1a0a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1a0e:	dc 01       	movw	r26, r24
    1a10:	cb 01       	movw	r24, r22
    1a12:	bc 01       	movw	r22, r24
    1a14:	cd 01       	movw	r24, r26
    1a16:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	9f ab       	std	Y+55, r25	; 0x37
    1a20:	8e ab       	std	Y+54, r24	; 0x36
    1a22:	0f c0       	rjmp	.+30     	; 0x1a42 <LCDByte+0x6ca>
    1a24:	88 ec       	ldi	r24, 0xC8	; 200
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	9d ab       	std	Y+53, r25	; 0x35
    1a2a:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a2c:	8c a9       	ldd	r24, Y+52	; 0x34
    1a2e:	9d a9       	ldd	r25, Y+53	; 0x35
    1a30:	01 97       	sbiw	r24, 0x01	; 1
    1a32:	f1 f7       	brne	.-4      	; 0x1a30 <LCDByte+0x6b8>
    1a34:	9d ab       	std	Y+53, r25	; 0x35
    1a36:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a38:	8e a9       	ldd	r24, Y+54	; 0x36
    1a3a:	9f a9       	ldd	r25, Y+55	; 0x37
    1a3c:	01 97       	sbiw	r24, 0x01	; 1
    1a3e:	9f ab       	std	Y+55, r25	; 0x37
    1a40:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a42:	8e a9       	ldd	r24, Y+54	; 0x36
    1a44:	9f a9       	ldd	r25, Y+55	; 0x37
    1a46:	00 97       	sbiw	r24, 0x00	; 0
    1a48:	69 f7       	brne	.-38     	; 0x1a24 <LCDByte+0x6ac>
    1a4a:	2d c0       	rjmp	.+90     	; 0x1aa6 <LCDByte+0x72e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a4c:	68 ad       	ldd	r22, Y+56	; 0x38
    1a4e:	79 ad       	ldd	r23, Y+57	; 0x39
    1a50:	8a ad       	ldd	r24, Y+58	; 0x3a
    1a52:	9b ad       	ldd	r25, Y+59	; 0x3b
    1a54:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1a58:	dc 01       	movw	r26, r24
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	9f ab       	std	Y+55, r25	; 0x37
    1a5e:	8e ab       	std	Y+54, r24	; 0x36
    1a60:	8e a9       	ldd	r24, Y+54	; 0x36
    1a62:	9f a9       	ldd	r25, Y+55	; 0x37
    1a64:	9b ab       	std	Y+51, r25	; 0x33
    1a66:	8a ab       	std	Y+50, r24	; 0x32
    1a68:	8a a9       	ldd	r24, Y+50	; 0x32
    1a6a:	9b a9       	ldd	r25, Y+51	; 0x33
    1a6c:	01 97       	sbiw	r24, 0x01	; 1
    1a6e:	f1 f7       	brne	.-4      	; 0x1a6c <LCDByte+0x6f4>
    1a70:	9b ab       	std	Y+51, r25	; 0x33
    1a72:	8a ab       	std	Y+50, r24	; 0x32
    1a74:	18 c0       	rjmp	.+48     	; 0x1aa6 <LCDByte+0x72e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a76:	fe 01       	movw	r30, r28
    1a78:	ef 5b       	subi	r30, 0xBF	; 191
    1a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7c:	60 81       	ld	r22, Z
    1a7e:	71 81       	ldd	r23, Z+1	; 0x01
    1a80:	82 81       	ldd	r24, Z+2	; 0x02
    1a82:	93 81       	ldd	r25, Z+3	; 0x03
    1a84:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1a88:	dc 01       	movw	r26, r24
    1a8a:	cb 01       	movw	r24, r22
    1a8c:	fe 01       	movw	r30, r28
    1a8e:	e0 5c       	subi	r30, 0xC0	; 192
    1a90:	ff 4f       	sbci	r31, 0xFF	; 255
    1a92:	80 83       	st	Z, r24
    1a94:	fe 01       	movw	r30, r28
    1a96:	e0 5c       	subi	r30, 0xC0	; 192
    1a98:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9a:	80 81       	ld	r24, Z
    1a9c:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a9e:	89 a9       	ldd	r24, Y+49	; 0x31
    1aa0:	8a 95       	dec	r24
    1aa2:	f1 f7       	brne	.-4      	; 0x1aa0 <LCDByte+0x728>
    1aa4:	89 ab       	std	Y+49, r24	; 0x31

_delay_us(1);

//Send the lower nibble
SET_E();
    1aa6:	ab e3       	ldi	r26, 0x3B	; 59
    1aa8:	b0 e0       	ldi	r27, 0x00	; 0
    1aaa:	eb e3       	ldi	r30, 0x3B	; 59
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	84 60       	ori	r24, 0x04	; 4
    1ab2:	8c 93       	st	X, r24

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
    1ab4:	eb e3       	ldi	r30, 0x3B	; 59
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	28 2f       	mov	r18, r24
    1abc:	2f 70       	andi	r18, 0x0F	; 15
    1abe:	fe 01       	movw	r30, r28
    1ac0:	e6 58       	subi	r30, 0x86	; 134
    1ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac4:	80 81       	ld	r24, Z
    1ac6:	88 2f       	mov	r24, r24
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	82 95       	swap	r24
    1acc:	92 95       	swap	r25
    1ace:	90 7f       	andi	r25, 0xF0	; 240
    1ad0:	98 27       	eor	r25, r24
    1ad2:	80 7f       	andi	r24, 0xF0	; 240
    1ad4:	98 27       	eor	r25, r24
    1ad6:	82 2b       	or	r24, r18
    1ad8:	fe 01       	movw	r30, r28
    1ada:	e7 58       	subi	r30, 0x87	; 135
    1adc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ade:	80 83       	st	Z, r24

LCD_DATA_PORT=temp;
    1ae0:	ab e3       	ldi	r26, 0x3B	; 59
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	fe 01       	movw	r30, r28
    1ae6:	e7 58       	subi	r30, 0x87	; 135
    1ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aea:	80 81       	ld	r24, Z
    1aec:	8c 93       	st	X, r24
    1aee:	80 e0       	ldi	r24, 0x00	; 0
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	a0 e8       	ldi	r26, 0x80	; 128
    1af4:	bf e3       	ldi	r27, 0x3F	; 63
    1af6:	8d a7       	std	Y+45, r24	; 0x2d
    1af8:	9e a7       	std	Y+46, r25	; 0x2e
    1afa:	af a7       	std	Y+47, r26	; 0x2f
    1afc:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1afe:	6d a5       	ldd	r22, Y+45	; 0x2d
    1b00:	7e a5       	ldd	r23, Y+46	; 0x2e
    1b02:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b04:	98 a9       	ldd	r25, Y+48	; 0x30
    1b06:	2b ea       	ldi	r18, 0xAB	; 171
    1b08:	3a ea       	ldi	r19, 0xAA	; 170
    1b0a:	4a e2       	ldi	r20, 0x2A	; 42
    1b0c:	50 e4       	ldi	r21, 0x40	; 64
    1b0e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1b12:	dc 01       	movw	r26, r24
    1b14:	cb 01       	movw	r24, r22
    1b16:	89 a7       	std	Y+41, r24	; 0x29
    1b18:	9a a7       	std	Y+42, r25	; 0x2a
    1b1a:	ab a7       	std	Y+43, r26	; 0x2b
    1b1c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1b1e:	69 a5       	ldd	r22, Y+41	; 0x29
    1b20:	7a a5       	ldd	r23, Y+42	; 0x2a
    1b22:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b24:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	40 e8       	ldi	r20, 0x80	; 128
    1b2c:	5f e3       	ldi	r21, 0x3F	; 63
    1b2e:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1b32:	88 23       	and	r24, r24
    1b34:	1c f4       	brge	.+6      	; 0x1b3c <LCDByte+0x7c4>
		__ticks = 1;
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	88 a7       	std	Y+40, r24	; 0x28
    1b3a:	91 c0       	rjmp	.+290    	; 0x1c5e <LCDByte+0x8e6>
	else if (__tmp > 255)
    1b3c:	69 a5       	ldd	r22, Y+41	; 0x29
    1b3e:	7a a5       	ldd	r23, Y+42	; 0x2a
    1b40:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b42:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	4f e7       	ldi	r20, 0x7F	; 127
    1b4a:	53 e4       	ldi	r21, 0x43	; 67
    1b4c:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1b50:	18 16       	cp	r1, r24
    1b52:	0c f0       	brlt	.+2      	; 0x1b56 <LCDByte+0x7de>
    1b54:	7b c0       	rjmp	.+246    	; 0x1c4c <LCDByte+0x8d4>
	{
		_delay_ms(__us / 1000.0);
    1b56:	6d a5       	ldd	r22, Y+45	; 0x2d
    1b58:	7e a5       	ldd	r23, Y+46	; 0x2e
    1b5a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b5c:	98 a9       	ldd	r25, Y+48	; 0x30
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	4a e7       	ldi	r20, 0x7A	; 122
    1b64:	54 e4       	ldi	r21, 0x44	; 68
    1b66:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    1b6a:	dc 01       	movw	r26, r24
    1b6c:	cb 01       	movw	r24, r22
    1b6e:	8c a3       	std	Y+36, r24	; 0x24
    1b70:	9d a3       	std	Y+37, r25	; 0x25
    1b72:	ae a3       	std	Y+38, r26	; 0x26
    1b74:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b76:	6c a1       	ldd	r22, Y+36	; 0x24
    1b78:	7d a1       	ldd	r23, Y+37	; 0x25
    1b7a:	8e a1       	ldd	r24, Y+38	; 0x26
    1b7c:	9f a1       	ldd	r25, Y+39	; 0x27
    1b7e:	20 e0       	ldi	r18, 0x00	; 0
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	4a ef       	ldi	r20, 0xFA	; 250
    1b84:	54 e4       	ldi	r21, 0x44	; 68
    1b86:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	cb 01       	movw	r24, r22
    1b8e:	88 a3       	std	Y+32, r24	; 0x20
    1b90:	99 a3       	std	Y+33, r25	; 0x21
    1b92:	aa a3       	std	Y+34, r26	; 0x22
    1b94:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1b96:	68 a1       	ldd	r22, Y+32	; 0x20
    1b98:	79 a1       	ldd	r23, Y+33	; 0x21
    1b9a:	8a a1       	ldd	r24, Y+34	; 0x22
    1b9c:	9b a1       	ldd	r25, Y+35	; 0x23
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	40 e8       	ldi	r20, 0x80	; 128
    1ba4:	5f e3       	ldi	r21, 0x3F	; 63
    1ba6:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1baa:	88 23       	and	r24, r24
    1bac:	2c f4       	brge	.+10     	; 0x1bb8 <LCDByte+0x840>
		__ticks = 1;
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	9f 8f       	std	Y+31, r25	; 0x1f
    1bb4:	8e 8f       	std	Y+30, r24	; 0x1e
    1bb6:	3f c0       	rjmp	.+126    	; 0x1c36 <LCDByte+0x8be>
	else if (__tmp > 65535)
    1bb8:	68 a1       	ldd	r22, Y+32	; 0x20
    1bba:	79 a1       	ldd	r23, Y+33	; 0x21
    1bbc:	8a a1       	ldd	r24, Y+34	; 0x22
    1bbe:	9b a1       	ldd	r25, Y+35	; 0x23
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	3f ef       	ldi	r19, 0xFF	; 255
    1bc4:	4f e7       	ldi	r20, 0x7F	; 127
    1bc6:	57 e4       	ldi	r21, 0x47	; 71
    1bc8:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1bcc:	18 16       	cp	r1, r24
    1bce:	4c f5       	brge	.+82     	; 0x1c22 <LCDByte+0x8aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bd0:	6c a1       	ldd	r22, Y+36	; 0x24
    1bd2:	7d a1       	ldd	r23, Y+37	; 0x25
    1bd4:	8e a1       	ldd	r24, Y+38	; 0x26
    1bd6:	9f a1       	ldd	r25, Y+39	; 0x27
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	40 e2       	ldi	r20, 0x20	; 32
    1bde:	51 e4       	ldi	r21, 0x41	; 65
    1be0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1be4:	dc 01       	movw	r26, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	bc 01       	movw	r22, r24
    1bea:	cd 01       	movw	r24, r26
    1bec:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1bf0:	dc 01       	movw	r26, r24
    1bf2:	cb 01       	movw	r24, r22
    1bf4:	9f 8f       	std	Y+31, r25	; 0x1f
    1bf6:	8e 8f       	std	Y+30, r24	; 0x1e
    1bf8:	0f c0       	rjmp	.+30     	; 0x1c18 <LCDByte+0x8a0>
    1bfa:	88 ec       	ldi	r24, 0xC8	; 200
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	9d 8f       	std	Y+29, r25	; 0x1d
    1c00:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c02:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c04:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c06:	01 97       	sbiw	r24, 0x01	; 1
    1c08:	f1 f7       	brne	.-4      	; 0x1c06 <LCDByte+0x88e>
    1c0a:	9d 8f       	std	Y+29, r25	; 0x1d
    1c0c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c0e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c10:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1c12:	01 97       	sbiw	r24, 0x01	; 1
    1c14:	9f 8f       	std	Y+31, r25	; 0x1f
    1c16:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c18:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c1a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1c1c:	00 97       	sbiw	r24, 0x00	; 0
    1c1e:	69 f7       	brne	.-38     	; 0x1bfa <LCDByte+0x882>
    1c20:	24 c0       	rjmp	.+72     	; 0x1c6a <LCDByte+0x8f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c22:	68 a1       	ldd	r22, Y+32	; 0x20
    1c24:	79 a1       	ldd	r23, Y+33	; 0x21
    1c26:	8a a1       	ldd	r24, Y+34	; 0x22
    1c28:	9b a1       	ldd	r25, Y+35	; 0x23
    1c2a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1c2e:	dc 01       	movw	r26, r24
    1c30:	cb 01       	movw	r24, r22
    1c32:	9f 8f       	std	Y+31, r25	; 0x1f
    1c34:	8e 8f       	std	Y+30, r24	; 0x1e
    1c36:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c38:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1c3a:	9b 8f       	std	Y+27, r25	; 0x1b
    1c3c:	8a 8f       	std	Y+26, r24	; 0x1a
    1c3e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1c40:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1c42:	01 97       	sbiw	r24, 0x01	; 1
    1c44:	f1 f7       	brne	.-4      	; 0x1c42 <LCDByte+0x8ca>
    1c46:	9b 8f       	std	Y+27, r25	; 0x1b
    1c48:	8a 8f       	std	Y+26, r24	; 0x1a
    1c4a:	0f c0       	rjmp	.+30     	; 0x1c6a <LCDByte+0x8f2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c4c:	69 a5       	ldd	r22, Y+41	; 0x29
    1c4e:	7a a5       	ldd	r23, Y+42	; 0x2a
    1c50:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c52:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c54:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1c58:	dc 01       	movw	r26, r24
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	88 a7       	std	Y+40, r24	; 0x28
    1c5e:	88 a5       	ldd	r24, Y+40	; 0x28
    1c60:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c62:	89 8d       	ldd	r24, Y+25	; 0x19
    1c64:	8a 95       	dec	r24
    1c66:	f1 f7       	brne	.-4      	; 0x1c64 <LCDByte+0x8ec>
    1c68:	89 8f       	std	Y+25, r24	; 0x19

_delay_us(1);			//tEH

//SEND

CLEAR_E();
    1c6a:	ab e3       	ldi	r26, 0x3B	; 59
    1c6c:	b0 e0       	ldi	r27, 0x00	; 0
    1c6e:	eb e3       	ldi	r30, 0x3B	; 59
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	80 81       	ld	r24, Z
    1c74:	8b 7f       	andi	r24, 0xFB	; 251
    1c76:	8c 93       	st	X, r24
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	a0 e8       	ldi	r26, 0x80	; 128
    1c7e:	bf e3       	ldi	r27, 0x3F	; 63
    1c80:	8d 8b       	std	Y+21, r24	; 0x15
    1c82:	9e 8b       	std	Y+22, r25	; 0x16
    1c84:	af 8b       	std	Y+23, r26	; 0x17
    1c86:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c88:	6d 89       	ldd	r22, Y+21	; 0x15
    1c8a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c8c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c8e:	98 8d       	ldd	r25, Y+24	; 0x18
    1c90:	2b ea       	ldi	r18, 0xAB	; 171
    1c92:	3a ea       	ldi	r19, 0xAA	; 170
    1c94:	4a e2       	ldi	r20, 0x2A	; 42
    1c96:	50 e4       	ldi	r21, 0x40	; 64
    1c98:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	cb 01       	movw	r24, r22
    1ca0:	89 8b       	std	Y+17, r24	; 0x11
    1ca2:	9a 8b       	std	Y+18, r25	; 0x12
    1ca4:	ab 8b       	std	Y+19, r26	; 0x13
    1ca6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1ca8:	69 89       	ldd	r22, Y+17	; 0x11
    1caa:	7a 89       	ldd	r23, Y+18	; 0x12
    1cac:	8b 89       	ldd	r24, Y+19	; 0x13
    1cae:	9c 89       	ldd	r25, Y+20	; 0x14
    1cb0:	20 e0       	ldi	r18, 0x00	; 0
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	40 e8       	ldi	r20, 0x80	; 128
    1cb6:	5f e3       	ldi	r21, 0x3F	; 63
    1cb8:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1cbc:	88 23       	and	r24, r24
    1cbe:	1c f4       	brge	.+6      	; 0x1cc6 <LCDByte+0x94e>
		__ticks = 1;
    1cc0:	81 e0       	ldi	r24, 0x01	; 1
    1cc2:	88 8b       	std	Y+16, r24	; 0x10
    1cc4:	91 c0       	rjmp	.+290    	; 0x1de8 <LCDByte+0xa70>
	else if (__tmp > 255)
    1cc6:	69 89       	ldd	r22, Y+17	; 0x11
    1cc8:	7a 89       	ldd	r23, Y+18	; 0x12
    1cca:	8b 89       	ldd	r24, Y+19	; 0x13
    1ccc:	9c 89       	ldd	r25, Y+20	; 0x14
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	4f e7       	ldi	r20, 0x7F	; 127
    1cd4:	53 e4       	ldi	r21, 0x43	; 67
    1cd6:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1cda:	18 16       	cp	r1, r24
    1cdc:	0c f0       	brlt	.+2      	; 0x1ce0 <LCDByte+0x968>
    1cde:	7b c0       	rjmp	.+246    	; 0x1dd6 <LCDByte+0xa5e>
	{
		_delay_ms(__us / 1000.0);
    1ce0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ce2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ce4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ce6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ce8:	20 e0       	ldi	r18, 0x00	; 0
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	4a e7       	ldi	r20, 0x7A	; 122
    1cee:	54 e4       	ldi	r21, 0x44	; 68
    1cf0:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    1cf4:	dc 01       	movw	r26, r24
    1cf6:	cb 01       	movw	r24, r22
    1cf8:	8c 87       	std	Y+12, r24	; 0x0c
    1cfa:	9d 87       	std	Y+13, r25	; 0x0d
    1cfc:	ae 87       	std	Y+14, r26	; 0x0e
    1cfe:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d00:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d02:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d04:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d06:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d08:	20 e0       	ldi	r18, 0x00	; 0
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	4a ef       	ldi	r20, 0xFA	; 250
    1d0e:	54 e4       	ldi	r21, 0x44	; 68
    1d10:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1d14:	dc 01       	movw	r26, r24
    1d16:	cb 01       	movw	r24, r22
    1d18:	88 87       	std	Y+8, r24	; 0x08
    1d1a:	99 87       	std	Y+9, r25	; 0x09
    1d1c:	aa 87       	std	Y+10, r26	; 0x0a
    1d1e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1d20:	68 85       	ldd	r22, Y+8	; 0x08
    1d22:	79 85       	ldd	r23, Y+9	; 0x09
    1d24:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d26:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d28:	20 e0       	ldi	r18, 0x00	; 0
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	40 e8       	ldi	r20, 0x80	; 128
    1d2e:	5f e3       	ldi	r21, 0x3F	; 63
    1d30:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1d34:	88 23       	and	r24, r24
    1d36:	2c f4       	brge	.+10     	; 0x1d42 <LCDByte+0x9ca>
		__ticks = 1;
    1d38:	81 e0       	ldi	r24, 0x01	; 1
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	9f 83       	std	Y+7, r25	; 0x07
    1d3e:	8e 83       	std	Y+6, r24	; 0x06
    1d40:	3f c0       	rjmp	.+126    	; 0x1dc0 <LCDByte+0xa48>
	else if (__tmp > 65535)
    1d42:	68 85       	ldd	r22, Y+8	; 0x08
    1d44:	79 85       	ldd	r23, Y+9	; 0x09
    1d46:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d48:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d4a:	20 e0       	ldi	r18, 0x00	; 0
    1d4c:	3f ef       	ldi	r19, 0xFF	; 255
    1d4e:	4f e7       	ldi	r20, 0x7F	; 127
    1d50:	57 e4       	ldi	r21, 0x47	; 71
    1d52:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1d56:	18 16       	cp	r1, r24
    1d58:	4c f5       	brge	.+82     	; 0x1dac <LCDByte+0xa34>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d5a:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d5c:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d5e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d60:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d62:	20 e0       	ldi	r18, 0x00	; 0
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	40 e2       	ldi	r20, 0x20	; 32
    1d68:	51 e4       	ldi	r21, 0x41	; 65
    1d6a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1d6e:	dc 01       	movw	r26, r24
    1d70:	cb 01       	movw	r24, r22
    1d72:	bc 01       	movw	r22, r24
    1d74:	cd 01       	movw	r24, r26
    1d76:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1d7a:	dc 01       	movw	r26, r24
    1d7c:	cb 01       	movw	r24, r22
    1d7e:	9f 83       	std	Y+7, r25	; 0x07
    1d80:	8e 83       	std	Y+6, r24	; 0x06
    1d82:	0f c0       	rjmp	.+30     	; 0x1da2 <LCDByte+0xa2a>
    1d84:	88 ec       	ldi	r24, 0xC8	; 200
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	9d 83       	std	Y+5, r25	; 0x05
    1d8a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d8e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d90:	01 97       	sbiw	r24, 0x01	; 1
    1d92:	f1 f7       	brne	.-4      	; 0x1d90 <LCDByte+0xa18>
    1d94:	9d 83       	std	Y+5, r25	; 0x05
    1d96:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d98:	8e 81       	ldd	r24, Y+6	; 0x06
    1d9a:	9f 81       	ldd	r25, Y+7	; 0x07
    1d9c:	01 97       	sbiw	r24, 0x01	; 1
    1d9e:	9f 83       	std	Y+7, r25	; 0x07
    1da0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1da2:	8e 81       	ldd	r24, Y+6	; 0x06
    1da4:	9f 81       	ldd	r25, Y+7	; 0x07
    1da6:	00 97       	sbiw	r24, 0x00	; 0
    1da8:	69 f7       	brne	.-38     	; 0x1d84 <LCDByte+0xa0c>
    1daa:	24 c0       	rjmp	.+72     	; 0x1df4 <LCDByte+0xa7c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dac:	68 85       	ldd	r22, Y+8	; 0x08
    1dae:	79 85       	ldd	r23, Y+9	; 0x09
    1db0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1db2:	9b 85       	ldd	r25, Y+11	; 0x0b
    1db4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1db8:	dc 01       	movw	r26, r24
    1dba:	cb 01       	movw	r24, r22
    1dbc:	9f 83       	std	Y+7, r25	; 0x07
    1dbe:	8e 83       	std	Y+6, r24	; 0x06
    1dc0:	8e 81       	ldd	r24, Y+6	; 0x06
    1dc2:	9f 81       	ldd	r25, Y+7	; 0x07
    1dc4:	9b 83       	std	Y+3, r25	; 0x03
    1dc6:	8a 83       	std	Y+2, r24	; 0x02
    1dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dca:	9b 81       	ldd	r25, Y+3	; 0x03
    1dcc:	01 97       	sbiw	r24, 0x01	; 1
    1dce:	f1 f7       	brne	.-4      	; 0x1dcc <LCDByte+0xa54>
    1dd0:	9b 83       	std	Y+3, r25	; 0x03
    1dd2:	8a 83       	std	Y+2, r24	; 0x02
    1dd4:	0f c0       	rjmp	.+30     	; 0x1df4 <LCDByte+0xa7c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1dd6:	69 89       	ldd	r22, Y+17	; 0x11
    1dd8:	7a 89       	ldd	r23, Y+18	; 0x12
    1dda:	8b 89       	ldd	r24, Y+19	; 0x13
    1ddc:	9c 89       	ldd	r25, Y+20	; 0x14
    1dde:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1de2:	dc 01       	movw	r26, r24
    1de4:	cb 01       	movw	r24, r22
    1de6:	88 8b       	std	Y+16, r24	; 0x10
    1de8:	88 89       	ldd	r24, Y+16	; 0x10
    1dea:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1dec:	89 81       	ldd	r24, Y+1	; 0x01
    1dee:	8a 95       	dec	r24
    1df0:	f1 f7       	brne	.-4      	; 0x1dee <LCDByte+0xa76>
    1df2:	89 83       	std	Y+1, r24	; 0x01

_delay_us(1);			//tEL

LCDBusyLoop();
    1df4:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <LCDBusyLoop>
}
    1df8:	c3 58       	subi	r28, 0x83	; 131
    1dfa:	df 4f       	sbci	r29, 0xFF	; 255
    1dfc:	0f b6       	in	r0, 0x3f	; 63
    1dfe:	f8 94       	cli
    1e00:	de bf       	out	0x3e, r29	; 62
    1e02:	0f be       	out	0x3f, r0	; 63
    1e04:	cd bf       	out	0x3d, r28	; 61
    1e06:	cf 91       	pop	r28
    1e08:	df 91       	pop	r29
    1e0a:	1f 91       	pop	r17
    1e0c:	0f 91       	pop	r16
    1e0e:	08 95       	ret

00001e10 <LCDBusyLoop>:

void LCDBusyLoop()
{
    1e10:	0f 93       	push	r16
    1e12:	1f 93       	push	r17
    1e14:	df 93       	push	r29
    1e16:	cf 93       	push	r28
    1e18:	cd b7       	in	r28, 0x3d	; 61
    1e1a:	de b7       	in	r29, 0x3e	; 62
    1e1c:	cb 5a       	subi	r28, 0xAB	; 171
    1e1e:	d0 40       	sbci	r29, 0x00	; 0
    1e20:	0f b6       	in	r0, 0x3f	; 63
    1e22:	f8 94       	cli
    1e24:	de bf       	out	0x3e, r29	; 62
    1e26:	0f be       	out	0x3f, r0	; 63
    1e28:	cd bf       	out	0x3d, r28	; 61
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;
    1e2a:	fe 01       	movw	r30, r28
    1e2c:	e6 55       	subi	r30, 0x56	; 86
    1e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e30:	10 82       	st	Z, r1

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=(~(0x0f<<LCD_DATA_POS));
    1e32:	aa e3       	ldi	r26, 0x3A	; 58
    1e34:	b0 e0       	ldi	r27, 0x00	; 0
    1e36:	ea e3       	ldi	r30, 0x3A	; 58
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	80 81       	ld	r24, Z
    1e3c:	8f 70       	andi	r24, 0x0F	; 15
    1e3e:	8c 93       	st	X, r24

	//change LCD mode
	SET_RW();		//Read mode
    1e40:	ab e3       	ldi	r26, 0x3B	; 59
    1e42:	b0 e0       	ldi	r27, 0x00	; 0
    1e44:	eb e3       	ldi	r30, 0x3B	; 59
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	80 81       	ld	r24, Z
    1e4a:	82 60       	ori	r24, 0x02	; 2
    1e4c:	8c 93       	st	X, r24
	CLEAR_RS();		//Read status
    1e4e:	ab e3       	ldi	r26, 0x3B	; 59
    1e50:	b0 e0       	ldi	r27, 0x00	; 0
    1e52:	eb e3       	ldi	r30, 0x3B	; 59
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	80 81       	ld	r24, Z
    1e58:	8e 7f       	andi	r24, 0xFE	; 254
    1e5a:	8c 93       	st	X, r24
    1e5c:	fe 01       	movw	r30, r28
    1e5e:	eb 55       	subi	r30, 0x5B	; 91
    1e60:	ff 4f       	sbci	r31, 0xFF	; 255
    1e62:	80 e0       	ldi	r24, 0x00	; 0
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	a0 e0       	ldi	r26, 0x00	; 0
    1e68:	bf e3       	ldi	r27, 0x3F	; 63
    1e6a:	80 83       	st	Z, r24
    1e6c:	91 83       	std	Z+1, r25	; 0x01
    1e6e:	a2 83       	std	Z+2, r26	; 0x02
    1e70:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e72:	8e 01       	movw	r16, r28
    1e74:	0f 55       	subi	r16, 0x5F	; 95
    1e76:	1f 4f       	sbci	r17, 0xFF	; 255
    1e78:	fe 01       	movw	r30, r28
    1e7a:	eb 55       	subi	r30, 0x5B	; 91
    1e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7e:	60 81       	ld	r22, Z
    1e80:	71 81       	ldd	r23, Z+1	; 0x01
    1e82:	82 81       	ldd	r24, Z+2	; 0x02
    1e84:	93 81       	ldd	r25, Z+3	; 0x03
    1e86:	2b ea       	ldi	r18, 0xAB	; 171
    1e88:	3a ea       	ldi	r19, 0xAA	; 170
    1e8a:	4a e2       	ldi	r20, 0x2A	; 42
    1e8c:	50 e4       	ldi	r21, 0x40	; 64
    1e8e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1e92:	dc 01       	movw	r26, r24
    1e94:	cb 01       	movw	r24, r22
    1e96:	f8 01       	movw	r30, r16
    1e98:	80 83       	st	Z, r24
    1e9a:	91 83       	std	Z+1, r25	; 0x01
    1e9c:	a2 83       	std	Z+2, r26	; 0x02
    1e9e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ea0:	fe 01       	movw	r30, r28
    1ea2:	ef 55       	subi	r30, 0x5F	; 95
    1ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea6:	60 81       	ld	r22, Z
    1ea8:	71 81       	ldd	r23, Z+1	; 0x01
    1eaa:	82 81       	ldd	r24, Z+2	; 0x02
    1eac:	93 81       	ldd	r25, Z+3	; 0x03
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	40 e8       	ldi	r20, 0x80	; 128
    1eb4:	5f e3       	ldi	r21, 0x3F	; 63
    1eb6:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1eba:	88 23       	and	r24, r24
    1ebc:	34 f4       	brge	.+12     	; 0x1eca <LCDBusyLoop+0xba>
		__ticks = 1;
    1ebe:	fe 01       	movw	r30, r28
    1ec0:	e0 56       	subi	r30, 0x60	; 96
    1ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	80 83       	st	Z, r24
    1ec8:	e0 c0       	rjmp	.+448    	; 0x208a <LCDBusyLoop+0x27a>
	else if (__tmp > 255)
    1eca:	fe 01       	movw	r30, r28
    1ecc:	ef 55       	subi	r30, 0x5F	; 95
    1ece:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed0:	60 81       	ld	r22, Z
    1ed2:	71 81       	ldd	r23, Z+1	; 0x01
    1ed4:	82 81       	ldd	r24, Z+2	; 0x02
    1ed6:	93 81       	ldd	r25, Z+3	; 0x03
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	4f e7       	ldi	r20, 0x7F	; 127
    1ede:	53 e4       	ldi	r21, 0x43	; 67
    1ee0:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1ee4:	18 16       	cp	r1, r24
    1ee6:	0c f0       	brlt	.+2      	; 0x1eea <LCDBusyLoop+0xda>
    1ee8:	c0 c0       	rjmp	.+384    	; 0x206a <LCDBusyLoop+0x25a>
	{
		_delay_ms(__us / 1000.0);
    1eea:	fe 01       	movw	r30, r28
    1eec:	eb 55       	subi	r30, 0x5B	; 91
    1eee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef0:	60 81       	ld	r22, Z
    1ef2:	71 81       	ldd	r23, Z+1	; 0x01
    1ef4:	82 81       	ldd	r24, Z+2	; 0x02
    1ef6:	93 81       	ldd	r25, Z+3	; 0x03
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	4a e7       	ldi	r20, 0x7A	; 122
    1efe:	54 e4       	ldi	r21, 0x44	; 68
    1f00:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	fe 01       	movw	r30, r28
    1f0a:	e4 56       	subi	r30, 0x64	; 100
    1f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0e:	80 83       	st	Z, r24
    1f10:	91 83       	std	Z+1, r25	; 0x01
    1f12:	a2 83       	std	Z+2, r26	; 0x02
    1f14:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f16:	8e 01       	movw	r16, r28
    1f18:	08 56       	subi	r16, 0x68	; 104
    1f1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f1c:	fe 01       	movw	r30, r28
    1f1e:	e4 56       	subi	r30, 0x64	; 100
    1f20:	ff 4f       	sbci	r31, 0xFF	; 255
    1f22:	60 81       	ld	r22, Z
    1f24:	71 81       	ldd	r23, Z+1	; 0x01
    1f26:	82 81       	ldd	r24, Z+2	; 0x02
    1f28:	93 81       	ldd	r25, Z+3	; 0x03
    1f2a:	20 e0       	ldi	r18, 0x00	; 0
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	4a ef       	ldi	r20, 0xFA	; 250
    1f30:	54 e4       	ldi	r21, 0x44	; 68
    1f32:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	f8 01       	movw	r30, r16
    1f3c:	80 83       	st	Z, r24
    1f3e:	91 83       	std	Z+1, r25	; 0x01
    1f40:	a2 83       	std	Z+2, r26	; 0x02
    1f42:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f44:	fe 01       	movw	r30, r28
    1f46:	e8 56       	subi	r30, 0x68	; 104
    1f48:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4a:	60 81       	ld	r22, Z
    1f4c:	71 81       	ldd	r23, Z+1	; 0x01
    1f4e:	82 81       	ldd	r24, Z+2	; 0x02
    1f50:	93 81       	ldd	r25, Z+3	; 0x03
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	40 e8       	ldi	r20, 0x80	; 128
    1f58:	5f e3       	ldi	r21, 0x3F	; 63
    1f5a:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1f5e:	88 23       	and	r24, r24
    1f60:	44 f4       	brge	.+16     	; 0x1f72 <LCDBusyLoop+0x162>
		__ticks = 1;
    1f62:	fe 01       	movw	r30, r28
    1f64:	ea 56       	subi	r30, 0x6A	; 106
    1f66:	ff 4f       	sbci	r31, 0xFF	; 255
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	91 83       	std	Z+1, r25	; 0x01
    1f6e:	80 83       	st	Z, r24
    1f70:	64 c0       	rjmp	.+200    	; 0x203a <LCDBusyLoop+0x22a>
	else if (__tmp > 65535)
    1f72:	fe 01       	movw	r30, r28
    1f74:	e8 56       	subi	r30, 0x68	; 104
    1f76:	ff 4f       	sbci	r31, 0xFF	; 255
    1f78:	60 81       	ld	r22, Z
    1f7a:	71 81       	ldd	r23, Z+1	; 0x01
    1f7c:	82 81       	ldd	r24, Z+2	; 0x02
    1f7e:	93 81       	ldd	r25, Z+3	; 0x03
    1f80:	20 e0       	ldi	r18, 0x00	; 0
    1f82:	3f ef       	ldi	r19, 0xFF	; 255
    1f84:	4f e7       	ldi	r20, 0x7F	; 127
    1f86:	57 e4       	ldi	r21, 0x47	; 71
    1f88:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1f8c:	18 16       	cp	r1, r24
    1f8e:	0c f0       	brlt	.+2      	; 0x1f92 <LCDBusyLoop+0x182>
    1f90:	43 c0       	rjmp	.+134    	; 0x2018 <LCDBusyLoop+0x208>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f92:	fe 01       	movw	r30, r28
    1f94:	e4 56       	subi	r30, 0x64	; 100
    1f96:	ff 4f       	sbci	r31, 0xFF	; 255
    1f98:	60 81       	ld	r22, Z
    1f9a:	71 81       	ldd	r23, Z+1	; 0x01
    1f9c:	82 81       	ldd	r24, Z+2	; 0x02
    1f9e:	93 81       	ldd	r25, Z+3	; 0x03
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	40 e2       	ldi	r20, 0x20	; 32
    1fa6:	51 e4       	ldi	r21, 0x41	; 65
    1fa8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22
    1fb0:	8e 01       	movw	r16, r28
    1fb2:	0a 56       	subi	r16, 0x6A	; 106
    1fb4:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb6:	bc 01       	movw	r22, r24
    1fb8:	cd 01       	movw	r24, r26
    1fba:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1fbe:	dc 01       	movw	r26, r24
    1fc0:	cb 01       	movw	r24, r22
    1fc2:	f8 01       	movw	r30, r16
    1fc4:	91 83       	std	Z+1, r25	; 0x01
    1fc6:	80 83       	st	Z, r24
    1fc8:	1f c0       	rjmp	.+62     	; 0x2008 <LCDBusyLoop+0x1f8>
    1fca:	fe 01       	movw	r30, r28
    1fcc:	ec 56       	subi	r30, 0x6C	; 108
    1fce:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd0:	88 ec       	ldi	r24, 0xC8	; 200
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	91 83       	std	Z+1, r25	; 0x01
    1fd6:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fd8:	fe 01       	movw	r30, r28
    1fda:	ec 56       	subi	r30, 0x6C	; 108
    1fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fde:	80 81       	ld	r24, Z
    1fe0:	91 81       	ldd	r25, Z+1	; 0x01
    1fe2:	01 97       	sbiw	r24, 0x01	; 1
    1fe4:	f1 f7       	brne	.-4      	; 0x1fe2 <LCDBusyLoop+0x1d2>
    1fe6:	fe 01       	movw	r30, r28
    1fe8:	ec 56       	subi	r30, 0x6C	; 108
    1fea:	ff 4f       	sbci	r31, 0xFF	; 255
    1fec:	91 83       	std	Z+1, r25	; 0x01
    1fee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff0:	de 01       	movw	r26, r28
    1ff2:	aa 56       	subi	r26, 0x6A	; 106
    1ff4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ff6:	fe 01       	movw	r30, r28
    1ff8:	ea 56       	subi	r30, 0x6A	; 106
    1ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffc:	80 81       	ld	r24, Z
    1ffe:	91 81       	ldd	r25, Z+1	; 0x01
    2000:	01 97       	sbiw	r24, 0x01	; 1
    2002:	11 96       	adiw	r26, 0x01	; 1
    2004:	9c 93       	st	X, r25
    2006:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2008:	fe 01       	movw	r30, r28
    200a:	ea 56       	subi	r30, 0x6A	; 106
    200c:	ff 4f       	sbci	r31, 0xFF	; 255
    200e:	80 81       	ld	r24, Z
    2010:	91 81       	ldd	r25, Z+1	; 0x01
    2012:	00 97       	sbiw	r24, 0x00	; 0
    2014:	d1 f6       	brne	.-76     	; 0x1fca <LCDBusyLoop+0x1ba>
    2016:	4b c0       	rjmp	.+150    	; 0x20ae <LCDBusyLoop+0x29e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2018:	8e 01       	movw	r16, r28
    201a:	0a 56       	subi	r16, 0x6A	; 106
    201c:	1f 4f       	sbci	r17, 0xFF	; 255
    201e:	fe 01       	movw	r30, r28
    2020:	e8 56       	subi	r30, 0x68	; 104
    2022:	ff 4f       	sbci	r31, 0xFF	; 255
    2024:	60 81       	ld	r22, Z
    2026:	71 81       	ldd	r23, Z+1	; 0x01
    2028:	82 81       	ldd	r24, Z+2	; 0x02
    202a:	93 81       	ldd	r25, Z+3	; 0x03
    202c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2030:	dc 01       	movw	r26, r24
    2032:	cb 01       	movw	r24, r22
    2034:	f8 01       	movw	r30, r16
    2036:	91 83       	std	Z+1, r25	; 0x01
    2038:	80 83       	st	Z, r24
    203a:	de 01       	movw	r26, r28
    203c:	ae 56       	subi	r26, 0x6E	; 110
    203e:	bf 4f       	sbci	r27, 0xFF	; 255
    2040:	fe 01       	movw	r30, r28
    2042:	ea 56       	subi	r30, 0x6A	; 106
    2044:	ff 4f       	sbci	r31, 0xFF	; 255
    2046:	80 81       	ld	r24, Z
    2048:	91 81       	ldd	r25, Z+1	; 0x01
    204a:	11 96       	adiw	r26, 0x01	; 1
    204c:	9c 93       	st	X, r25
    204e:	8e 93       	st	-X, r24
    2050:	fe 01       	movw	r30, r28
    2052:	ee 56       	subi	r30, 0x6E	; 110
    2054:	ff 4f       	sbci	r31, 0xFF	; 255
    2056:	80 81       	ld	r24, Z
    2058:	91 81       	ldd	r25, Z+1	; 0x01
    205a:	01 97       	sbiw	r24, 0x01	; 1
    205c:	f1 f7       	brne	.-4      	; 0x205a <LCDBusyLoop+0x24a>
    205e:	fe 01       	movw	r30, r28
    2060:	ee 56       	subi	r30, 0x6E	; 110
    2062:	ff 4f       	sbci	r31, 0xFF	; 255
    2064:	91 83       	std	Z+1, r25	; 0x01
    2066:	80 83       	st	Z, r24
    2068:	22 c0       	rjmp	.+68     	; 0x20ae <LCDBusyLoop+0x29e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    206a:	8e 01       	movw	r16, r28
    206c:	00 56       	subi	r16, 0x60	; 96
    206e:	1f 4f       	sbci	r17, 0xFF	; 255
    2070:	fe 01       	movw	r30, r28
    2072:	ef 55       	subi	r30, 0x5F	; 95
    2074:	ff 4f       	sbci	r31, 0xFF	; 255
    2076:	60 81       	ld	r22, Z
    2078:	71 81       	ldd	r23, Z+1	; 0x01
    207a:	82 81       	ldd	r24, Z+2	; 0x02
    207c:	93 81       	ldd	r25, Z+3	; 0x03
    207e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2082:	dc 01       	movw	r26, r24
    2084:	cb 01       	movw	r24, r22
    2086:	f8 01       	movw	r30, r16
    2088:	80 83       	st	Z, r24
    208a:	de 01       	movw	r26, r28
    208c:	af 56       	subi	r26, 0x6F	; 111
    208e:	bf 4f       	sbci	r27, 0xFF	; 255
    2090:	fe 01       	movw	r30, r28
    2092:	e0 56       	subi	r30, 0x60	; 96
    2094:	ff 4f       	sbci	r31, 0xFF	; 255
    2096:	80 81       	ld	r24, Z
    2098:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    209a:	fe 01       	movw	r30, r28
    209c:	ef 56       	subi	r30, 0x6F	; 111
    209e:	ff 4f       	sbci	r31, 0xFF	; 255
    20a0:	80 81       	ld	r24, Z
    20a2:	8a 95       	dec	r24
    20a4:	f1 f7       	brne	.-4      	; 0x20a2 <LCDBusyLoop+0x292>
    20a6:	fe 01       	movw	r30, r28
    20a8:	ef 56       	subi	r30, 0x6F	; 111
    20aa:	ff 4f       	sbci	r31, 0xFF	; 255
    20ac:	80 83       	st	Z, r24


	do
	{

		SET_E();
    20ae:	ab e3       	ldi	r26, 0x3B	; 59
    20b0:	b0 e0       	ldi	r27, 0x00	; 0
    20b2:	eb e3       	ldi	r30, 0x3B	; 59
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	80 81       	ld	r24, Z
    20b8:	84 60       	ori	r24, 0x04	; 4
    20ba:	8c 93       	st	X, r24
    20bc:	fe 01       	movw	r30, r28
    20be:	e3 57       	subi	r30, 0x73	; 115
    20c0:	ff 4f       	sbci	r31, 0xFF	; 255
    20c2:	80 e0       	ldi	r24, 0x00	; 0
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	a0 e0       	ldi	r26, 0x00	; 0
    20c8:	bf e3       	ldi	r27, 0x3F	; 63
    20ca:	80 83       	st	Z, r24
    20cc:	91 83       	std	Z+1, r25	; 0x01
    20ce:	a2 83       	std	Z+2, r26	; 0x02
    20d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    20d2:	8e 01       	movw	r16, r28
    20d4:	07 57       	subi	r16, 0x77	; 119
    20d6:	1f 4f       	sbci	r17, 0xFF	; 255
    20d8:	fe 01       	movw	r30, r28
    20da:	e3 57       	subi	r30, 0x73	; 115
    20dc:	ff 4f       	sbci	r31, 0xFF	; 255
    20de:	60 81       	ld	r22, Z
    20e0:	71 81       	ldd	r23, Z+1	; 0x01
    20e2:	82 81       	ldd	r24, Z+2	; 0x02
    20e4:	93 81       	ldd	r25, Z+3	; 0x03
    20e6:	2b ea       	ldi	r18, 0xAB	; 171
    20e8:	3a ea       	ldi	r19, 0xAA	; 170
    20ea:	4a e2       	ldi	r20, 0x2A	; 42
    20ec:	50 e4       	ldi	r21, 0x40	; 64
    20ee:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    20f2:	dc 01       	movw	r26, r24
    20f4:	cb 01       	movw	r24, r22
    20f6:	f8 01       	movw	r30, r16
    20f8:	80 83       	st	Z, r24
    20fa:	91 83       	std	Z+1, r25	; 0x01
    20fc:	a2 83       	std	Z+2, r26	; 0x02
    20fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2100:	fe 01       	movw	r30, r28
    2102:	e7 57       	subi	r30, 0x77	; 119
    2104:	ff 4f       	sbci	r31, 0xFF	; 255
    2106:	60 81       	ld	r22, Z
    2108:	71 81       	ldd	r23, Z+1	; 0x01
    210a:	82 81       	ldd	r24, Z+2	; 0x02
    210c:	93 81       	ldd	r25, Z+3	; 0x03
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	40 e8       	ldi	r20, 0x80	; 128
    2114:	5f e3       	ldi	r21, 0x3F	; 63
    2116:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    211a:	88 23       	and	r24, r24
    211c:	34 f4       	brge	.+12     	; 0x212a <LCDBusyLoop+0x31a>
		__ticks = 1;
    211e:	fe 01       	movw	r30, r28
    2120:	e8 57       	subi	r30, 0x78	; 120
    2122:	ff 4f       	sbci	r31, 0xFF	; 255
    2124:	81 e0       	ldi	r24, 0x01	; 1
    2126:	80 83       	st	Z, r24
    2128:	e0 c0       	rjmp	.+448    	; 0x22ea <LCDBusyLoop+0x4da>
	else if (__tmp > 255)
    212a:	fe 01       	movw	r30, r28
    212c:	e7 57       	subi	r30, 0x77	; 119
    212e:	ff 4f       	sbci	r31, 0xFF	; 255
    2130:	60 81       	ld	r22, Z
    2132:	71 81       	ldd	r23, Z+1	; 0x01
    2134:	82 81       	ldd	r24, Z+2	; 0x02
    2136:	93 81       	ldd	r25, Z+3	; 0x03
    2138:	20 e0       	ldi	r18, 0x00	; 0
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	4f e7       	ldi	r20, 0x7F	; 127
    213e:	53 e4       	ldi	r21, 0x43	; 67
    2140:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2144:	18 16       	cp	r1, r24
    2146:	0c f0       	brlt	.+2      	; 0x214a <LCDBusyLoop+0x33a>
    2148:	c0 c0       	rjmp	.+384    	; 0x22ca <LCDBusyLoop+0x4ba>
	{
		_delay_ms(__us / 1000.0);
    214a:	fe 01       	movw	r30, r28
    214c:	e3 57       	subi	r30, 0x73	; 115
    214e:	ff 4f       	sbci	r31, 0xFF	; 255
    2150:	60 81       	ld	r22, Z
    2152:	71 81       	ldd	r23, Z+1	; 0x01
    2154:	82 81       	ldd	r24, Z+2	; 0x02
    2156:	93 81       	ldd	r25, Z+3	; 0x03
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	4a e7       	ldi	r20, 0x7A	; 122
    215e:	54 e4       	ldi	r21, 0x44	; 68
    2160:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    2164:	dc 01       	movw	r26, r24
    2166:	cb 01       	movw	r24, r22
    2168:	fe 01       	movw	r30, r28
    216a:	ec 57       	subi	r30, 0x7C	; 124
    216c:	ff 4f       	sbci	r31, 0xFF	; 255
    216e:	80 83       	st	Z, r24
    2170:	91 83       	std	Z+1, r25	; 0x01
    2172:	a2 83       	std	Z+2, r26	; 0x02
    2174:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2176:	8e 01       	movw	r16, r28
    2178:	00 58       	subi	r16, 0x80	; 128
    217a:	1f 4f       	sbci	r17, 0xFF	; 255
    217c:	fe 01       	movw	r30, r28
    217e:	ec 57       	subi	r30, 0x7C	; 124
    2180:	ff 4f       	sbci	r31, 0xFF	; 255
    2182:	60 81       	ld	r22, Z
    2184:	71 81       	ldd	r23, Z+1	; 0x01
    2186:	82 81       	ldd	r24, Z+2	; 0x02
    2188:	93 81       	ldd	r25, Z+3	; 0x03
    218a:	20 e0       	ldi	r18, 0x00	; 0
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	4a ef       	ldi	r20, 0xFA	; 250
    2190:	54 e4       	ldi	r21, 0x44	; 68
    2192:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2196:	dc 01       	movw	r26, r24
    2198:	cb 01       	movw	r24, r22
    219a:	f8 01       	movw	r30, r16
    219c:	80 83       	st	Z, r24
    219e:	91 83       	std	Z+1, r25	; 0x01
    21a0:	a2 83       	std	Z+2, r26	; 0x02
    21a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21a4:	fe 01       	movw	r30, r28
    21a6:	e0 58       	subi	r30, 0x80	; 128
    21a8:	ff 4f       	sbci	r31, 0xFF	; 255
    21aa:	60 81       	ld	r22, Z
    21ac:	71 81       	ldd	r23, Z+1	; 0x01
    21ae:	82 81       	ldd	r24, Z+2	; 0x02
    21b0:	93 81       	ldd	r25, Z+3	; 0x03
    21b2:	20 e0       	ldi	r18, 0x00	; 0
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	40 e8       	ldi	r20, 0x80	; 128
    21b8:	5f e3       	ldi	r21, 0x3F	; 63
    21ba:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    21be:	88 23       	and	r24, r24
    21c0:	44 f4       	brge	.+16     	; 0x21d2 <LCDBusyLoop+0x3c2>
		__ticks = 1;
    21c2:	fe 01       	movw	r30, r28
    21c4:	e2 58       	subi	r30, 0x82	; 130
    21c6:	ff 4f       	sbci	r31, 0xFF	; 255
    21c8:	81 e0       	ldi	r24, 0x01	; 1
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	91 83       	std	Z+1, r25	; 0x01
    21ce:	80 83       	st	Z, r24
    21d0:	64 c0       	rjmp	.+200    	; 0x229a <LCDBusyLoop+0x48a>
	else if (__tmp > 65535)
    21d2:	fe 01       	movw	r30, r28
    21d4:	e0 58       	subi	r30, 0x80	; 128
    21d6:	ff 4f       	sbci	r31, 0xFF	; 255
    21d8:	60 81       	ld	r22, Z
    21da:	71 81       	ldd	r23, Z+1	; 0x01
    21dc:	82 81       	ldd	r24, Z+2	; 0x02
    21de:	93 81       	ldd	r25, Z+3	; 0x03
    21e0:	20 e0       	ldi	r18, 0x00	; 0
    21e2:	3f ef       	ldi	r19, 0xFF	; 255
    21e4:	4f e7       	ldi	r20, 0x7F	; 127
    21e6:	57 e4       	ldi	r21, 0x47	; 71
    21e8:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    21ec:	18 16       	cp	r1, r24
    21ee:	0c f0       	brlt	.+2      	; 0x21f2 <LCDBusyLoop+0x3e2>
    21f0:	43 c0       	rjmp	.+134    	; 0x2278 <LCDBusyLoop+0x468>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f2:	fe 01       	movw	r30, r28
    21f4:	ec 57       	subi	r30, 0x7C	; 124
    21f6:	ff 4f       	sbci	r31, 0xFF	; 255
    21f8:	60 81       	ld	r22, Z
    21fa:	71 81       	ldd	r23, Z+1	; 0x01
    21fc:	82 81       	ldd	r24, Z+2	; 0x02
    21fe:	93 81       	ldd	r25, Z+3	; 0x03
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	40 e2       	ldi	r20, 0x20	; 32
    2206:	51 e4       	ldi	r21, 0x41	; 65
    2208:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	8e 01       	movw	r16, r28
    2212:	02 58       	subi	r16, 0x82	; 130
    2214:	1f 4f       	sbci	r17, 0xFF	; 255
    2216:	bc 01       	movw	r22, r24
    2218:	cd 01       	movw	r24, r26
    221a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    221e:	dc 01       	movw	r26, r24
    2220:	cb 01       	movw	r24, r22
    2222:	f8 01       	movw	r30, r16
    2224:	91 83       	std	Z+1, r25	; 0x01
    2226:	80 83       	st	Z, r24
    2228:	1f c0       	rjmp	.+62     	; 0x2268 <LCDBusyLoop+0x458>
    222a:	fe 01       	movw	r30, r28
    222c:	e4 58       	subi	r30, 0x84	; 132
    222e:	ff 4f       	sbci	r31, 0xFF	; 255
    2230:	88 ec       	ldi	r24, 0xC8	; 200
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	91 83       	std	Z+1, r25	; 0x01
    2236:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2238:	fe 01       	movw	r30, r28
    223a:	e4 58       	subi	r30, 0x84	; 132
    223c:	ff 4f       	sbci	r31, 0xFF	; 255
    223e:	80 81       	ld	r24, Z
    2240:	91 81       	ldd	r25, Z+1	; 0x01
    2242:	01 97       	sbiw	r24, 0x01	; 1
    2244:	f1 f7       	brne	.-4      	; 0x2242 <LCDBusyLoop+0x432>
    2246:	fe 01       	movw	r30, r28
    2248:	e4 58       	subi	r30, 0x84	; 132
    224a:	ff 4f       	sbci	r31, 0xFF	; 255
    224c:	91 83       	std	Z+1, r25	; 0x01
    224e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2250:	de 01       	movw	r26, r28
    2252:	a2 58       	subi	r26, 0x82	; 130
    2254:	bf 4f       	sbci	r27, 0xFF	; 255
    2256:	fe 01       	movw	r30, r28
    2258:	e2 58       	subi	r30, 0x82	; 130
    225a:	ff 4f       	sbci	r31, 0xFF	; 255
    225c:	80 81       	ld	r24, Z
    225e:	91 81       	ldd	r25, Z+1	; 0x01
    2260:	01 97       	sbiw	r24, 0x01	; 1
    2262:	11 96       	adiw	r26, 0x01	; 1
    2264:	9c 93       	st	X, r25
    2266:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2268:	fe 01       	movw	r30, r28
    226a:	e2 58       	subi	r30, 0x82	; 130
    226c:	ff 4f       	sbci	r31, 0xFF	; 255
    226e:	80 81       	ld	r24, Z
    2270:	91 81       	ldd	r25, Z+1	; 0x01
    2272:	00 97       	sbiw	r24, 0x00	; 0
    2274:	d1 f6       	brne	.-76     	; 0x222a <LCDBusyLoop+0x41a>
    2276:	4b c0       	rjmp	.+150    	; 0x230e <LCDBusyLoop+0x4fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2278:	8e 01       	movw	r16, r28
    227a:	02 58       	subi	r16, 0x82	; 130
    227c:	1f 4f       	sbci	r17, 0xFF	; 255
    227e:	fe 01       	movw	r30, r28
    2280:	e0 58       	subi	r30, 0x80	; 128
    2282:	ff 4f       	sbci	r31, 0xFF	; 255
    2284:	60 81       	ld	r22, Z
    2286:	71 81       	ldd	r23, Z+1	; 0x01
    2288:	82 81       	ldd	r24, Z+2	; 0x02
    228a:	93 81       	ldd	r25, Z+3	; 0x03
    228c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2290:	dc 01       	movw	r26, r24
    2292:	cb 01       	movw	r24, r22
    2294:	f8 01       	movw	r30, r16
    2296:	91 83       	std	Z+1, r25	; 0x01
    2298:	80 83       	st	Z, r24
    229a:	de 01       	movw	r26, r28
    229c:	a6 58       	subi	r26, 0x86	; 134
    229e:	bf 4f       	sbci	r27, 0xFF	; 255
    22a0:	fe 01       	movw	r30, r28
    22a2:	e2 58       	subi	r30, 0x82	; 130
    22a4:	ff 4f       	sbci	r31, 0xFF	; 255
    22a6:	80 81       	ld	r24, Z
    22a8:	91 81       	ldd	r25, Z+1	; 0x01
    22aa:	11 96       	adiw	r26, 0x01	; 1
    22ac:	9c 93       	st	X, r25
    22ae:	8e 93       	st	-X, r24
    22b0:	fe 01       	movw	r30, r28
    22b2:	e6 58       	subi	r30, 0x86	; 134
    22b4:	ff 4f       	sbci	r31, 0xFF	; 255
    22b6:	80 81       	ld	r24, Z
    22b8:	91 81       	ldd	r25, Z+1	; 0x01
    22ba:	01 97       	sbiw	r24, 0x01	; 1
    22bc:	f1 f7       	brne	.-4      	; 0x22ba <LCDBusyLoop+0x4aa>
    22be:	fe 01       	movw	r30, r28
    22c0:	e6 58       	subi	r30, 0x86	; 134
    22c2:	ff 4f       	sbci	r31, 0xFF	; 255
    22c4:	91 83       	std	Z+1, r25	; 0x01
    22c6:	80 83       	st	Z, r24
    22c8:	22 c0       	rjmp	.+68     	; 0x230e <LCDBusyLoop+0x4fe>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    22ca:	8e 01       	movw	r16, r28
    22cc:	08 57       	subi	r16, 0x78	; 120
    22ce:	1f 4f       	sbci	r17, 0xFF	; 255
    22d0:	fe 01       	movw	r30, r28
    22d2:	e7 57       	subi	r30, 0x77	; 119
    22d4:	ff 4f       	sbci	r31, 0xFF	; 255
    22d6:	60 81       	ld	r22, Z
    22d8:	71 81       	ldd	r23, Z+1	; 0x01
    22da:	82 81       	ldd	r24, Z+2	; 0x02
    22dc:	93 81       	ldd	r25, Z+3	; 0x03
    22de:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    22e2:	dc 01       	movw	r26, r24
    22e4:	cb 01       	movw	r24, r22
    22e6:	f8 01       	movw	r30, r16
    22e8:	80 83       	st	Z, r24
    22ea:	de 01       	movw	r26, r28
    22ec:	a7 58       	subi	r26, 0x87	; 135
    22ee:	bf 4f       	sbci	r27, 0xFF	; 255
    22f0:	fe 01       	movw	r30, r28
    22f2:	e8 57       	subi	r30, 0x78	; 120
    22f4:	ff 4f       	sbci	r31, 0xFF	; 255
    22f6:	80 81       	ld	r24, Z
    22f8:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    22fa:	fe 01       	movw	r30, r28
    22fc:	e7 58       	subi	r30, 0x87	; 135
    22fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2300:	80 81       	ld	r24, Z
    2302:	8a 95       	dec	r24
    2304:	f1 f7       	brne	.-4      	; 0x2302 <LCDBusyLoop+0x4f2>
    2306:	fe 01       	movw	r30, r28
    2308:	e7 58       	subi	r30, 0x87	; 135
    230a:	ff 4f       	sbci	r31, 0xFF	; 255
    230c:	80 83       	st	Z, r24

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=(LCD_DATA_PIN>>LCD_DATA_POS);
    230e:	e9 e3       	ldi	r30, 0x39	; 57
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	80 81       	ld	r24, Z
    2314:	fe 01       	movw	r30, r28
    2316:	e6 55       	subi	r30, 0x56	; 86
    2318:	ff 4f       	sbci	r31, 0xFF	; 255
    231a:	82 95       	swap	r24
    231c:	8f 70       	andi	r24, 0x0F	; 15
    231e:	80 83       	st	Z, r24
		status=status<<4;
    2320:	de 01       	movw	r26, r28
    2322:	a6 55       	subi	r26, 0x56	; 86
    2324:	bf 4f       	sbci	r27, 0xFF	; 255
    2326:	fe 01       	movw	r30, r28
    2328:	e6 55       	subi	r30, 0x56	; 86
    232a:	ff 4f       	sbci	r31, 0xFF	; 255
    232c:	80 81       	ld	r24, Z
    232e:	82 95       	swap	r24
    2330:	80 7f       	andi	r24, 0xF0	; 240
    2332:	8c 93       	st	X, r24
    2334:	fe 01       	movw	r30, r28
    2336:	eb 58       	subi	r30, 0x8B	; 139
    2338:	ff 4f       	sbci	r31, 0xFF	; 255
    233a:	80 e0       	ldi	r24, 0x00	; 0
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	a0 e0       	ldi	r26, 0x00	; 0
    2340:	bf e3       	ldi	r27, 0x3F	; 63
    2342:	80 83       	st	Z, r24
    2344:	91 83       	std	Z+1, r25	; 0x01
    2346:	a2 83       	std	Z+2, r26	; 0x02
    2348:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    234a:	8e 01       	movw	r16, r28
    234c:	0f 58       	subi	r16, 0x8F	; 143
    234e:	1f 4f       	sbci	r17, 0xFF	; 255
    2350:	fe 01       	movw	r30, r28
    2352:	eb 58       	subi	r30, 0x8B	; 139
    2354:	ff 4f       	sbci	r31, 0xFF	; 255
    2356:	60 81       	ld	r22, Z
    2358:	71 81       	ldd	r23, Z+1	; 0x01
    235a:	82 81       	ldd	r24, Z+2	; 0x02
    235c:	93 81       	ldd	r25, Z+3	; 0x03
    235e:	2b ea       	ldi	r18, 0xAB	; 171
    2360:	3a ea       	ldi	r19, 0xAA	; 170
    2362:	4a e2       	ldi	r20, 0x2A	; 42
    2364:	50 e4       	ldi	r21, 0x40	; 64
    2366:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    236a:	dc 01       	movw	r26, r24
    236c:	cb 01       	movw	r24, r22
    236e:	f8 01       	movw	r30, r16
    2370:	80 83       	st	Z, r24
    2372:	91 83       	std	Z+1, r25	; 0x01
    2374:	a2 83       	std	Z+2, r26	; 0x02
    2376:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2378:	fe 01       	movw	r30, r28
    237a:	ef 58       	subi	r30, 0x8F	; 143
    237c:	ff 4f       	sbci	r31, 0xFF	; 255
    237e:	60 81       	ld	r22, Z
    2380:	71 81       	ldd	r23, Z+1	; 0x01
    2382:	82 81       	ldd	r24, Z+2	; 0x02
    2384:	93 81       	ldd	r25, Z+3	; 0x03
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	40 e8       	ldi	r20, 0x80	; 128
    238c:	5f e3       	ldi	r21, 0x3F	; 63
    238e:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2392:	88 23       	and	r24, r24
    2394:	34 f4       	brge	.+12     	; 0x23a2 <LCDBusyLoop+0x592>
		__ticks = 1;
    2396:	fe 01       	movw	r30, r28
    2398:	e0 59       	subi	r30, 0x90	; 144
    239a:	ff 4f       	sbci	r31, 0xFF	; 255
    239c:	81 e0       	ldi	r24, 0x01	; 1
    239e:	80 83       	st	Z, r24
    23a0:	e0 c0       	rjmp	.+448    	; 0x2562 <LCDBusyLoop+0x752>
	else if (__tmp > 255)
    23a2:	fe 01       	movw	r30, r28
    23a4:	ef 58       	subi	r30, 0x8F	; 143
    23a6:	ff 4f       	sbci	r31, 0xFF	; 255
    23a8:	60 81       	ld	r22, Z
    23aa:	71 81       	ldd	r23, Z+1	; 0x01
    23ac:	82 81       	ldd	r24, Z+2	; 0x02
    23ae:	93 81       	ldd	r25, Z+3	; 0x03
    23b0:	20 e0       	ldi	r18, 0x00	; 0
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	4f e7       	ldi	r20, 0x7F	; 127
    23b6:	53 e4       	ldi	r21, 0x43	; 67
    23b8:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    23bc:	18 16       	cp	r1, r24
    23be:	0c f0       	brlt	.+2      	; 0x23c2 <LCDBusyLoop+0x5b2>
    23c0:	c0 c0       	rjmp	.+384    	; 0x2542 <LCDBusyLoop+0x732>
	{
		_delay_ms(__us / 1000.0);
    23c2:	fe 01       	movw	r30, r28
    23c4:	eb 58       	subi	r30, 0x8B	; 139
    23c6:	ff 4f       	sbci	r31, 0xFF	; 255
    23c8:	60 81       	ld	r22, Z
    23ca:	71 81       	ldd	r23, Z+1	; 0x01
    23cc:	82 81       	ldd	r24, Z+2	; 0x02
    23ce:	93 81       	ldd	r25, Z+3	; 0x03
    23d0:	20 e0       	ldi	r18, 0x00	; 0
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	4a e7       	ldi	r20, 0x7A	; 122
    23d6:	54 e4       	ldi	r21, 0x44	; 68
    23d8:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    23dc:	dc 01       	movw	r26, r24
    23de:	cb 01       	movw	r24, r22
    23e0:	fe 01       	movw	r30, r28
    23e2:	e4 59       	subi	r30, 0x94	; 148
    23e4:	ff 4f       	sbci	r31, 0xFF	; 255
    23e6:	80 83       	st	Z, r24
    23e8:	91 83       	std	Z+1, r25	; 0x01
    23ea:	a2 83       	std	Z+2, r26	; 0x02
    23ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ee:	8e 01       	movw	r16, r28
    23f0:	08 59       	subi	r16, 0x98	; 152
    23f2:	1f 4f       	sbci	r17, 0xFF	; 255
    23f4:	fe 01       	movw	r30, r28
    23f6:	e4 59       	subi	r30, 0x94	; 148
    23f8:	ff 4f       	sbci	r31, 0xFF	; 255
    23fa:	60 81       	ld	r22, Z
    23fc:	71 81       	ldd	r23, Z+1	; 0x01
    23fe:	82 81       	ldd	r24, Z+2	; 0x02
    2400:	93 81       	ldd	r25, Z+3	; 0x03
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	4a ef       	ldi	r20, 0xFA	; 250
    2408:	54 e4       	ldi	r21, 0x44	; 68
    240a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    240e:	dc 01       	movw	r26, r24
    2410:	cb 01       	movw	r24, r22
    2412:	f8 01       	movw	r30, r16
    2414:	80 83       	st	Z, r24
    2416:	91 83       	std	Z+1, r25	; 0x01
    2418:	a2 83       	std	Z+2, r26	; 0x02
    241a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    241c:	fe 01       	movw	r30, r28
    241e:	e8 59       	subi	r30, 0x98	; 152
    2420:	ff 4f       	sbci	r31, 0xFF	; 255
    2422:	60 81       	ld	r22, Z
    2424:	71 81       	ldd	r23, Z+1	; 0x01
    2426:	82 81       	ldd	r24, Z+2	; 0x02
    2428:	93 81       	ldd	r25, Z+3	; 0x03
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	40 e8       	ldi	r20, 0x80	; 128
    2430:	5f e3       	ldi	r21, 0x3F	; 63
    2432:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2436:	88 23       	and	r24, r24
    2438:	44 f4       	brge	.+16     	; 0x244a <LCDBusyLoop+0x63a>
		__ticks = 1;
    243a:	fe 01       	movw	r30, r28
    243c:	ea 59       	subi	r30, 0x9A	; 154
    243e:	ff 4f       	sbci	r31, 0xFF	; 255
    2440:	81 e0       	ldi	r24, 0x01	; 1
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	91 83       	std	Z+1, r25	; 0x01
    2446:	80 83       	st	Z, r24
    2448:	64 c0       	rjmp	.+200    	; 0x2512 <LCDBusyLoop+0x702>
	else if (__tmp > 65535)
    244a:	fe 01       	movw	r30, r28
    244c:	e8 59       	subi	r30, 0x98	; 152
    244e:	ff 4f       	sbci	r31, 0xFF	; 255
    2450:	60 81       	ld	r22, Z
    2452:	71 81       	ldd	r23, Z+1	; 0x01
    2454:	82 81       	ldd	r24, Z+2	; 0x02
    2456:	93 81       	ldd	r25, Z+3	; 0x03
    2458:	20 e0       	ldi	r18, 0x00	; 0
    245a:	3f ef       	ldi	r19, 0xFF	; 255
    245c:	4f e7       	ldi	r20, 0x7F	; 127
    245e:	57 e4       	ldi	r21, 0x47	; 71
    2460:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2464:	18 16       	cp	r1, r24
    2466:	0c f0       	brlt	.+2      	; 0x246a <LCDBusyLoop+0x65a>
    2468:	43 c0       	rjmp	.+134    	; 0x24f0 <LCDBusyLoop+0x6e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    246a:	fe 01       	movw	r30, r28
    246c:	e4 59       	subi	r30, 0x94	; 148
    246e:	ff 4f       	sbci	r31, 0xFF	; 255
    2470:	60 81       	ld	r22, Z
    2472:	71 81       	ldd	r23, Z+1	; 0x01
    2474:	82 81       	ldd	r24, Z+2	; 0x02
    2476:	93 81       	ldd	r25, Z+3	; 0x03
    2478:	20 e0       	ldi	r18, 0x00	; 0
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	40 e2       	ldi	r20, 0x20	; 32
    247e:	51 e4       	ldi	r21, 0x41	; 65
    2480:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2484:	dc 01       	movw	r26, r24
    2486:	cb 01       	movw	r24, r22
    2488:	8e 01       	movw	r16, r28
    248a:	0a 59       	subi	r16, 0x9A	; 154
    248c:	1f 4f       	sbci	r17, 0xFF	; 255
    248e:	bc 01       	movw	r22, r24
    2490:	cd 01       	movw	r24, r26
    2492:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2496:	dc 01       	movw	r26, r24
    2498:	cb 01       	movw	r24, r22
    249a:	f8 01       	movw	r30, r16
    249c:	91 83       	std	Z+1, r25	; 0x01
    249e:	80 83       	st	Z, r24
    24a0:	1f c0       	rjmp	.+62     	; 0x24e0 <LCDBusyLoop+0x6d0>
    24a2:	fe 01       	movw	r30, r28
    24a4:	ec 59       	subi	r30, 0x9C	; 156
    24a6:	ff 4f       	sbci	r31, 0xFF	; 255
    24a8:	88 ec       	ldi	r24, 0xC8	; 200
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	91 83       	std	Z+1, r25	; 0x01
    24ae:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24b0:	fe 01       	movw	r30, r28
    24b2:	ec 59       	subi	r30, 0x9C	; 156
    24b4:	ff 4f       	sbci	r31, 0xFF	; 255
    24b6:	80 81       	ld	r24, Z
    24b8:	91 81       	ldd	r25, Z+1	; 0x01
    24ba:	01 97       	sbiw	r24, 0x01	; 1
    24bc:	f1 f7       	brne	.-4      	; 0x24ba <LCDBusyLoop+0x6aa>
    24be:	fe 01       	movw	r30, r28
    24c0:	ec 59       	subi	r30, 0x9C	; 156
    24c2:	ff 4f       	sbci	r31, 0xFF	; 255
    24c4:	91 83       	std	Z+1, r25	; 0x01
    24c6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24c8:	de 01       	movw	r26, r28
    24ca:	aa 59       	subi	r26, 0x9A	; 154
    24cc:	bf 4f       	sbci	r27, 0xFF	; 255
    24ce:	fe 01       	movw	r30, r28
    24d0:	ea 59       	subi	r30, 0x9A	; 154
    24d2:	ff 4f       	sbci	r31, 0xFF	; 255
    24d4:	80 81       	ld	r24, Z
    24d6:	91 81       	ldd	r25, Z+1	; 0x01
    24d8:	01 97       	sbiw	r24, 0x01	; 1
    24da:	11 96       	adiw	r26, 0x01	; 1
    24dc:	9c 93       	st	X, r25
    24de:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24e0:	fe 01       	movw	r30, r28
    24e2:	ea 59       	subi	r30, 0x9A	; 154
    24e4:	ff 4f       	sbci	r31, 0xFF	; 255
    24e6:	80 81       	ld	r24, Z
    24e8:	91 81       	ldd	r25, Z+1	; 0x01
    24ea:	00 97       	sbiw	r24, 0x00	; 0
    24ec:	d1 f6       	brne	.-76     	; 0x24a2 <LCDBusyLoop+0x692>
    24ee:	4b c0       	rjmp	.+150    	; 0x2586 <LCDBusyLoop+0x776>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24f0:	8e 01       	movw	r16, r28
    24f2:	0a 59       	subi	r16, 0x9A	; 154
    24f4:	1f 4f       	sbci	r17, 0xFF	; 255
    24f6:	fe 01       	movw	r30, r28
    24f8:	e8 59       	subi	r30, 0x98	; 152
    24fa:	ff 4f       	sbci	r31, 0xFF	; 255
    24fc:	60 81       	ld	r22, Z
    24fe:	71 81       	ldd	r23, Z+1	; 0x01
    2500:	82 81       	ldd	r24, Z+2	; 0x02
    2502:	93 81       	ldd	r25, Z+3	; 0x03
    2504:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2508:	dc 01       	movw	r26, r24
    250a:	cb 01       	movw	r24, r22
    250c:	f8 01       	movw	r30, r16
    250e:	91 83       	std	Z+1, r25	; 0x01
    2510:	80 83       	st	Z, r24
    2512:	de 01       	movw	r26, r28
    2514:	ae 59       	subi	r26, 0x9E	; 158
    2516:	bf 4f       	sbci	r27, 0xFF	; 255
    2518:	fe 01       	movw	r30, r28
    251a:	ea 59       	subi	r30, 0x9A	; 154
    251c:	ff 4f       	sbci	r31, 0xFF	; 255
    251e:	80 81       	ld	r24, Z
    2520:	91 81       	ldd	r25, Z+1	; 0x01
    2522:	11 96       	adiw	r26, 0x01	; 1
    2524:	9c 93       	st	X, r25
    2526:	8e 93       	st	-X, r24
    2528:	fe 01       	movw	r30, r28
    252a:	ee 59       	subi	r30, 0x9E	; 158
    252c:	ff 4f       	sbci	r31, 0xFF	; 255
    252e:	80 81       	ld	r24, Z
    2530:	91 81       	ldd	r25, Z+1	; 0x01
    2532:	01 97       	sbiw	r24, 0x01	; 1
    2534:	f1 f7       	brne	.-4      	; 0x2532 <LCDBusyLoop+0x722>
    2536:	fe 01       	movw	r30, r28
    2538:	ee 59       	subi	r30, 0x9E	; 158
    253a:	ff 4f       	sbci	r31, 0xFF	; 255
    253c:	91 83       	std	Z+1, r25	; 0x01
    253e:	80 83       	st	Z, r24
    2540:	22 c0       	rjmp	.+68     	; 0x2586 <LCDBusyLoop+0x776>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2542:	8e 01       	movw	r16, r28
    2544:	00 59       	subi	r16, 0x90	; 144
    2546:	1f 4f       	sbci	r17, 0xFF	; 255
    2548:	fe 01       	movw	r30, r28
    254a:	ef 58       	subi	r30, 0x8F	; 143
    254c:	ff 4f       	sbci	r31, 0xFF	; 255
    254e:	60 81       	ld	r22, Z
    2550:	71 81       	ldd	r23, Z+1	; 0x01
    2552:	82 81       	ldd	r24, Z+2	; 0x02
    2554:	93 81       	ldd	r25, Z+3	; 0x03
    2556:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    255a:	dc 01       	movw	r26, r24
    255c:	cb 01       	movw	r24, r22
    255e:	f8 01       	movw	r30, r16
    2560:	80 83       	st	Z, r24
    2562:	de 01       	movw	r26, r28
    2564:	af 59       	subi	r26, 0x9F	; 159
    2566:	bf 4f       	sbci	r27, 0xFF	; 255
    2568:	fe 01       	movw	r30, r28
    256a:	e0 59       	subi	r30, 0x90	; 144
    256c:	ff 4f       	sbci	r31, 0xFF	; 255
    256e:	80 81       	ld	r24, Z
    2570:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2572:	fe 01       	movw	r30, r28
    2574:	ef 59       	subi	r30, 0x9F	; 159
    2576:	ff 4f       	sbci	r31, 0xFF	; 255
    2578:	80 81       	ld	r24, Z
    257a:	8a 95       	dec	r24
    257c:	f1 f7       	brne	.-4      	; 0x257a <LCDBusyLoop+0x76a>
    257e:	fe 01       	movw	r30, r28
    2580:	ef 59       	subi	r30, 0x9F	; 159
    2582:	ff 4f       	sbci	r31, 0xFF	; 255
    2584:	80 83       	st	Z, r24

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
    2586:	ab e3       	ldi	r26, 0x3B	; 59
    2588:	b0 e0       	ldi	r27, 0x00	; 0
    258a:	eb e3       	ldi	r30, 0x3B	; 59
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	80 81       	ld	r24, Z
    2590:	8b 7f       	andi	r24, 0xFB	; 251
    2592:	8c 93       	st	X, r24
    2594:	fe 01       	movw	r30, r28
    2596:	e3 5a       	subi	r30, 0xA3	; 163
    2598:	ff 4f       	sbci	r31, 0xFF	; 255
    259a:	80 e0       	ldi	r24, 0x00	; 0
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	a0 e8       	ldi	r26, 0x80	; 128
    25a0:	bf e3       	ldi	r27, 0x3F	; 63
    25a2:	80 83       	st	Z, r24
    25a4:	91 83       	std	Z+1, r25	; 0x01
    25a6:	a2 83       	std	Z+2, r26	; 0x02
    25a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    25aa:	8e 01       	movw	r16, r28
    25ac:	07 5a       	subi	r16, 0xA7	; 167
    25ae:	1f 4f       	sbci	r17, 0xFF	; 255
    25b0:	fe 01       	movw	r30, r28
    25b2:	e3 5a       	subi	r30, 0xA3	; 163
    25b4:	ff 4f       	sbci	r31, 0xFF	; 255
    25b6:	60 81       	ld	r22, Z
    25b8:	71 81       	ldd	r23, Z+1	; 0x01
    25ba:	82 81       	ldd	r24, Z+2	; 0x02
    25bc:	93 81       	ldd	r25, Z+3	; 0x03
    25be:	2b ea       	ldi	r18, 0xAB	; 171
    25c0:	3a ea       	ldi	r19, 0xAA	; 170
    25c2:	4a e2       	ldi	r20, 0x2A	; 42
    25c4:	50 e4       	ldi	r21, 0x40	; 64
    25c6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    25ca:	dc 01       	movw	r26, r24
    25cc:	cb 01       	movw	r24, r22
    25ce:	f8 01       	movw	r30, r16
    25d0:	80 83       	st	Z, r24
    25d2:	91 83       	std	Z+1, r25	; 0x01
    25d4:	a2 83       	std	Z+2, r26	; 0x02
    25d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25d8:	fe 01       	movw	r30, r28
    25da:	e7 5a       	subi	r30, 0xA7	; 167
    25dc:	ff 4f       	sbci	r31, 0xFF	; 255
    25de:	60 81       	ld	r22, Z
    25e0:	71 81       	ldd	r23, Z+1	; 0x01
    25e2:	82 81       	ldd	r24, Z+2	; 0x02
    25e4:	93 81       	ldd	r25, Z+3	; 0x03
    25e6:	20 e0       	ldi	r18, 0x00	; 0
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	40 e8       	ldi	r20, 0x80	; 128
    25ec:	5f e3       	ldi	r21, 0x3F	; 63
    25ee:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    25f2:	88 23       	and	r24, r24
    25f4:	34 f4       	brge	.+12     	; 0x2602 <LCDBusyLoop+0x7f2>
		__ticks = 1;
    25f6:	fe 01       	movw	r30, r28
    25f8:	e8 5a       	subi	r30, 0xA8	; 168
    25fa:	ff 4f       	sbci	r31, 0xFF	; 255
    25fc:	81 e0       	ldi	r24, 0x01	; 1
    25fe:	80 83       	st	Z, r24
    2600:	e0 c0       	rjmp	.+448    	; 0x27c2 <LCDBusyLoop+0x9b2>
	else if (__tmp > 255)
    2602:	fe 01       	movw	r30, r28
    2604:	e7 5a       	subi	r30, 0xA7	; 167
    2606:	ff 4f       	sbci	r31, 0xFF	; 255
    2608:	60 81       	ld	r22, Z
    260a:	71 81       	ldd	r23, Z+1	; 0x01
    260c:	82 81       	ldd	r24, Z+2	; 0x02
    260e:	93 81       	ldd	r25, Z+3	; 0x03
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	4f e7       	ldi	r20, 0x7F	; 127
    2616:	53 e4       	ldi	r21, 0x43	; 67
    2618:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    261c:	18 16       	cp	r1, r24
    261e:	0c f0       	brlt	.+2      	; 0x2622 <LCDBusyLoop+0x812>
    2620:	c0 c0       	rjmp	.+384    	; 0x27a2 <LCDBusyLoop+0x992>
	{
		_delay_ms(__us / 1000.0);
    2622:	fe 01       	movw	r30, r28
    2624:	e3 5a       	subi	r30, 0xA3	; 163
    2626:	ff 4f       	sbci	r31, 0xFF	; 255
    2628:	60 81       	ld	r22, Z
    262a:	71 81       	ldd	r23, Z+1	; 0x01
    262c:	82 81       	ldd	r24, Z+2	; 0x02
    262e:	93 81       	ldd	r25, Z+3	; 0x03
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	4a e7       	ldi	r20, 0x7A	; 122
    2636:	54 e4       	ldi	r21, 0x44	; 68
    2638:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    263c:	dc 01       	movw	r26, r24
    263e:	cb 01       	movw	r24, r22
    2640:	fe 01       	movw	r30, r28
    2642:	ec 5a       	subi	r30, 0xAC	; 172
    2644:	ff 4f       	sbci	r31, 0xFF	; 255
    2646:	80 83       	st	Z, r24
    2648:	91 83       	std	Z+1, r25	; 0x01
    264a:	a2 83       	std	Z+2, r26	; 0x02
    264c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    264e:	8e 01       	movw	r16, r28
    2650:	00 5b       	subi	r16, 0xB0	; 176
    2652:	1f 4f       	sbci	r17, 0xFF	; 255
    2654:	fe 01       	movw	r30, r28
    2656:	ec 5a       	subi	r30, 0xAC	; 172
    2658:	ff 4f       	sbci	r31, 0xFF	; 255
    265a:	60 81       	ld	r22, Z
    265c:	71 81       	ldd	r23, Z+1	; 0x01
    265e:	82 81       	ldd	r24, Z+2	; 0x02
    2660:	93 81       	ldd	r25, Z+3	; 0x03
    2662:	20 e0       	ldi	r18, 0x00	; 0
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	4a ef       	ldi	r20, 0xFA	; 250
    2668:	54 e4       	ldi	r21, 0x44	; 68
    266a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    266e:	dc 01       	movw	r26, r24
    2670:	cb 01       	movw	r24, r22
    2672:	f8 01       	movw	r30, r16
    2674:	80 83       	st	Z, r24
    2676:	91 83       	std	Z+1, r25	; 0x01
    2678:	a2 83       	std	Z+2, r26	; 0x02
    267a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    267c:	fe 01       	movw	r30, r28
    267e:	e0 5b       	subi	r30, 0xB0	; 176
    2680:	ff 4f       	sbci	r31, 0xFF	; 255
    2682:	60 81       	ld	r22, Z
    2684:	71 81       	ldd	r23, Z+1	; 0x01
    2686:	82 81       	ldd	r24, Z+2	; 0x02
    2688:	93 81       	ldd	r25, Z+3	; 0x03
    268a:	20 e0       	ldi	r18, 0x00	; 0
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	40 e8       	ldi	r20, 0x80	; 128
    2690:	5f e3       	ldi	r21, 0x3F	; 63
    2692:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2696:	88 23       	and	r24, r24
    2698:	44 f4       	brge	.+16     	; 0x26aa <LCDBusyLoop+0x89a>
		__ticks = 1;
    269a:	fe 01       	movw	r30, r28
    269c:	e2 5b       	subi	r30, 0xB2	; 178
    269e:	ff 4f       	sbci	r31, 0xFF	; 255
    26a0:	81 e0       	ldi	r24, 0x01	; 1
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	91 83       	std	Z+1, r25	; 0x01
    26a6:	80 83       	st	Z, r24
    26a8:	64 c0       	rjmp	.+200    	; 0x2772 <LCDBusyLoop+0x962>
	else if (__tmp > 65535)
    26aa:	fe 01       	movw	r30, r28
    26ac:	e0 5b       	subi	r30, 0xB0	; 176
    26ae:	ff 4f       	sbci	r31, 0xFF	; 255
    26b0:	60 81       	ld	r22, Z
    26b2:	71 81       	ldd	r23, Z+1	; 0x01
    26b4:	82 81       	ldd	r24, Z+2	; 0x02
    26b6:	93 81       	ldd	r25, Z+3	; 0x03
    26b8:	20 e0       	ldi	r18, 0x00	; 0
    26ba:	3f ef       	ldi	r19, 0xFF	; 255
    26bc:	4f e7       	ldi	r20, 0x7F	; 127
    26be:	57 e4       	ldi	r21, 0x47	; 71
    26c0:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    26c4:	18 16       	cp	r1, r24
    26c6:	0c f0       	brlt	.+2      	; 0x26ca <LCDBusyLoop+0x8ba>
    26c8:	43 c0       	rjmp	.+134    	; 0x2750 <LCDBusyLoop+0x940>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ca:	fe 01       	movw	r30, r28
    26cc:	ec 5a       	subi	r30, 0xAC	; 172
    26ce:	ff 4f       	sbci	r31, 0xFF	; 255
    26d0:	60 81       	ld	r22, Z
    26d2:	71 81       	ldd	r23, Z+1	; 0x01
    26d4:	82 81       	ldd	r24, Z+2	; 0x02
    26d6:	93 81       	ldd	r25, Z+3	; 0x03
    26d8:	20 e0       	ldi	r18, 0x00	; 0
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	40 e2       	ldi	r20, 0x20	; 32
    26de:	51 e4       	ldi	r21, 0x41	; 65
    26e0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    26e4:	dc 01       	movw	r26, r24
    26e6:	cb 01       	movw	r24, r22
    26e8:	8e 01       	movw	r16, r28
    26ea:	02 5b       	subi	r16, 0xB2	; 178
    26ec:	1f 4f       	sbci	r17, 0xFF	; 255
    26ee:	bc 01       	movw	r22, r24
    26f0:	cd 01       	movw	r24, r26
    26f2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    26f6:	dc 01       	movw	r26, r24
    26f8:	cb 01       	movw	r24, r22
    26fa:	f8 01       	movw	r30, r16
    26fc:	91 83       	std	Z+1, r25	; 0x01
    26fe:	80 83       	st	Z, r24
    2700:	1f c0       	rjmp	.+62     	; 0x2740 <LCDBusyLoop+0x930>
    2702:	fe 01       	movw	r30, r28
    2704:	e4 5b       	subi	r30, 0xB4	; 180
    2706:	ff 4f       	sbci	r31, 0xFF	; 255
    2708:	88 ec       	ldi	r24, 0xC8	; 200
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	91 83       	std	Z+1, r25	; 0x01
    270e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2710:	fe 01       	movw	r30, r28
    2712:	e4 5b       	subi	r30, 0xB4	; 180
    2714:	ff 4f       	sbci	r31, 0xFF	; 255
    2716:	80 81       	ld	r24, Z
    2718:	91 81       	ldd	r25, Z+1	; 0x01
    271a:	01 97       	sbiw	r24, 0x01	; 1
    271c:	f1 f7       	brne	.-4      	; 0x271a <LCDBusyLoop+0x90a>
    271e:	fe 01       	movw	r30, r28
    2720:	e4 5b       	subi	r30, 0xB4	; 180
    2722:	ff 4f       	sbci	r31, 0xFF	; 255
    2724:	91 83       	std	Z+1, r25	; 0x01
    2726:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2728:	de 01       	movw	r26, r28
    272a:	a2 5b       	subi	r26, 0xB2	; 178
    272c:	bf 4f       	sbci	r27, 0xFF	; 255
    272e:	fe 01       	movw	r30, r28
    2730:	e2 5b       	subi	r30, 0xB2	; 178
    2732:	ff 4f       	sbci	r31, 0xFF	; 255
    2734:	80 81       	ld	r24, Z
    2736:	91 81       	ldd	r25, Z+1	; 0x01
    2738:	01 97       	sbiw	r24, 0x01	; 1
    273a:	11 96       	adiw	r26, 0x01	; 1
    273c:	9c 93       	st	X, r25
    273e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2740:	fe 01       	movw	r30, r28
    2742:	e2 5b       	subi	r30, 0xB2	; 178
    2744:	ff 4f       	sbci	r31, 0xFF	; 255
    2746:	80 81       	ld	r24, Z
    2748:	91 81       	ldd	r25, Z+1	; 0x01
    274a:	00 97       	sbiw	r24, 0x00	; 0
    274c:	d1 f6       	brne	.-76     	; 0x2702 <LCDBusyLoop+0x8f2>
    274e:	4b c0       	rjmp	.+150    	; 0x27e6 <LCDBusyLoop+0x9d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2750:	8e 01       	movw	r16, r28
    2752:	02 5b       	subi	r16, 0xB2	; 178
    2754:	1f 4f       	sbci	r17, 0xFF	; 255
    2756:	fe 01       	movw	r30, r28
    2758:	e0 5b       	subi	r30, 0xB0	; 176
    275a:	ff 4f       	sbci	r31, 0xFF	; 255
    275c:	60 81       	ld	r22, Z
    275e:	71 81       	ldd	r23, Z+1	; 0x01
    2760:	82 81       	ldd	r24, Z+2	; 0x02
    2762:	93 81       	ldd	r25, Z+3	; 0x03
    2764:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2768:	dc 01       	movw	r26, r24
    276a:	cb 01       	movw	r24, r22
    276c:	f8 01       	movw	r30, r16
    276e:	91 83       	std	Z+1, r25	; 0x01
    2770:	80 83       	st	Z, r24
    2772:	de 01       	movw	r26, r28
    2774:	a6 5b       	subi	r26, 0xB6	; 182
    2776:	bf 4f       	sbci	r27, 0xFF	; 255
    2778:	fe 01       	movw	r30, r28
    277a:	e2 5b       	subi	r30, 0xB2	; 178
    277c:	ff 4f       	sbci	r31, 0xFF	; 255
    277e:	80 81       	ld	r24, Z
    2780:	91 81       	ldd	r25, Z+1	; 0x01
    2782:	11 96       	adiw	r26, 0x01	; 1
    2784:	9c 93       	st	X, r25
    2786:	8e 93       	st	-X, r24
    2788:	fe 01       	movw	r30, r28
    278a:	e6 5b       	subi	r30, 0xB6	; 182
    278c:	ff 4f       	sbci	r31, 0xFF	; 255
    278e:	80 81       	ld	r24, Z
    2790:	91 81       	ldd	r25, Z+1	; 0x01
    2792:	01 97       	sbiw	r24, 0x01	; 1
    2794:	f1 f7       	brne	.-4      	; 0x2792 <LCDBusyLoop+0x982>
    2796:	fe 01       	movw	r30, r28
    2798:	e6 5b       	subi	r30, 0xB6	; 182
    279a:	ff 4f       	sbci	r31, 0xFF	; 255
    279c:	91 83       	std	Z+1, r25	; 0x01
    279e:	80 83       	st	Z, r24
    27a0:	22 c0       	rjmp	.+68     	; 0x27e6 <LCDBusyLoop+0x9d6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    27a2:	8e 01       	movw	r16, r28
    27a4:	08 5a       	subi	r16, 0xA8	; 168
    27a6:	1f 4f       	sbci	r17, 0xFF	; 255
    27a8:	fe 01       	movw	r30, r28
    27aa:	e7 5a       	subi	r30, 0xA7	; 167
    27ac:	ff 4f       	sbci	r31, 0xFF	; 255
    27ae:	60 81       	ld	r22, Z
    27b0:	71 81       	ldd	r23, Z+1	; 0x01
    27b2:	82 81       	ldd	r24, Z+2	; 0x02
    27b4:	93 81       	ldd	r25, Z+3	; 0x03
    27b6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    27ba:	dc 01       	movw	r26, r24
    27bc:	cb 01       	movw	r24, r22
    27be:	f8 01       	movw	r30, r16
    27c0:	80 83       	st	Z, r24
    27c2:	de 01       	movw	r26, r28
    27c4:	a7 5b       	subi	r26, 0xB7	; 183
    27c6:	bf 4f       	sbci	r27, 0xFF	; 255
    27c8:	fe 01       	movw	r30, r28
    27ca:	e8 5a       	subi	r30, 0xA8	; 168
    27cc:	ff 4f       	sbci	r31, 0xFF	; 255
    27ce:	80 81       	ld	r24, Z
    27d0:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    27d2:	fe 01       	movw	r30, r28
    27d4:	e7 5b       	subi	r30, 0xB7	; 183
    27d6:	ff 4f       	sbci	r31, 0xFF	; 255
    27d8:	80 81       	ld	r24, Z
    27da:	8a 95       	dec	r24
    27dc:	f1 f7       	brne	.-4      	; 0x27da <LCDBusyLoop+0x9ca>
    27de:	fe 01       	movw	r30, r28
    27e0:	e7 5b       	subi	r30, 0xB7	; 183
    27e2:	ff 4f       	sbci	r31, 0xFF	; 255
    27e4:	80 83       	st	Z, r24
		_delay_us(1);	//tEL

		SET_E();
    27e6:	ab e3       	ldi	r26, 0x3B	; 59
    27e8:	b0 e0       	ldi	r27, 0x00	; 0
    27ea:	eb e3       	ldi	r30, 0x3B	; 59
    27ec:	f0 e0       	ldi	r31, 0x00	; 0
    27ee:	80 81       	ld	r24, Z
    27f0:	84 60       	ori	r24, 0x04	; 4
    27f2:	8c 93       	st	X, r24
    27f4:	fe 01       	movw	r30, r28
    27f6:	eb 5b       	subi	r30, 0xBB	; 187
    27f8:	ff 4f       	sbci	r31, 0xFF	; 255
    27fa:	80 e0       	ldi	r24, 0x00	; 0
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	a0 e0       	ldi	r26, 0x00	; 0
    2800:	bf e3       	ldi	r27, 0x3F	; 63
    2802:	80 83       	st	Z, r24
    2804:	91 83       	std	Z+1, r25	; 0x01
    2806:	a2 83       	std	Z+2, r26	; 0x02
    2808:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    280a:	8e 01       	movw	r16, r28
    280c:	0f 5b       	subi	r16, 0xBF	; 191
    280e:	1f 4f       	sbci	r17, 0xFF	; 255
    2810:	fe 01       	movw	r30, r28
    2812:	eb 5b       	subi	r30, 0xBB	; 187
    2814:	ff 4f       	sbci	r31, 0xFF	; 255
    2816:	60 81       	ld	r22, Z
    2818:	71 81       	ldd	r23, Z+1	; 0x01
    281a:	82 81       	ldd	r24, Z+2	; 0x02
    281c:	93 81       	ldd	r25, Z+3	; 0x03
    281e:	2b ea       	ldi	r18, 0xAB	; 171
    2820:	3a ea       	ldi	r19, 0xAA	; 170
    2822:	4a e2       	ldi	r20, 0x2A	; 42
    2824:	50 e4       	ldi	r21, 0x40	; 64
    2826:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    282a:	dc 01       	movw	r26, r24
    282c:	cb 01       	movw	r24, r22
    282e:	f8 01       	movw	r30, r16
    2830:	80 83       	st	Z, r24
    2832:	91 83       	std	Z+1, r25	; 0x01
    2834:	a2 83       	std	Z+2, r26	; 0x02
    2836:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2838:	fe 01       	movw	r30, r28
    283a:	ef 5b       	subi	r30, 0xBF	; 191
    283c:	ff 4f       	sbci	r31, 0xFF	; 255
    283e:	60 81       	ld	r22, Z
    2840:	71 81       	ldd	r23, Z+1	; 0x01
    2842:	82 81       	ldd	r24, Z+2	; 0x02
    2844:	93 81       	ldd	r25, Z+3	; 0x03
    2846:	20 e0       	ldi	r18, 0x00	; 0
    2848:	30 e0       	ldi	r19, 0x00	; 0
    284a:	40 e8       	ldi	r20, 0x80	; 128
    284c:	5f e3       	ldi	r21, 0x3F	; 63
    284e:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2852:	88 23       	and	r24, r24
    2854:	34 f4       	brge	.+12     	; 0x2862 <LCDBusyLoop+0xa52>
		__ticks = 1;
    2856:	81 e0       	ldi	r24, 0x01	; 1
    2858:	fe 01       	movw	r30, r28
    285a:	e0 5c       	subi	r30, 0xC0	; 192
    285c:	ff 4f       	sbci	r31, 0xFF	; 255
    285e:	80 83       	st	Z, r24
    2860:	9d c0       	rjmp	.+314    	; 0x299c <LCDBusyLoop+0xb8c>
	else if (__tmp > 255)
    2862:	fe 01       	movw	r30, r28
    2864:	ef 5b       	subi	r30, 0xBF	; 191
    2866:	ff 4f       	sbci	r31, 0xFF	; 255
    2868:	60 81       	ld	r22, Z
    286a:	71 81       	ldd	r23, Z+1	; 0x01
    286c:	82 81       	ldd	r24, Z+2	; 0x02
    286e:	93 81       	ldd	r25, Z+3	; 0x03
    2870:	20 e0       	ldi	r18, 0x00	; 0
    2872:	30 e0       	ldi	r19, 0x00	; 0
    2874:	4f e7       	ldi	r20, 0x7F	; 127
    2876:	53 e4       	ldi	r21, 0x43	; 67
    2878:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    287c:	18 16       	cp	r1, r24
    287e:	0c f0       	brlt	.+2      	; 0x2882 <LCDBusyLoop+0xa72>
    2880:	7e c0       	rjmp	.+252    	; 0x297e <LCDBusyLoop+0xb6e>
	{
		_delay_ms(__us / 1000.0);
    2882:	fe 01       	movw	r30, r28
    2884:	eb 5b       	subi	r30, 0xBB	; 187
    2886:	ff 4f       	sbci	r31, 0xFF	; 255
    2888:	60 81       	ld	r22, Z
    288a:	71 81       	ldd	r23, Z+1	; 0x01
    288c:	82 81       	ldd	r24, Z+2	; 0x02
    288e:	93 81       	ldd	r25, Z+3	; 0x03
    2890:	20 e0       	ldi	r18, 0x00	; 0
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	4a e7       	ldi	r20, 0x7A	; 122
    2896:	54 e4       	ldi	r21, 0x44	; 68
    2898:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    289c:	dc 01       	movw	r26, r24
    289e:	cb 01       	movw	r24, r22
    28a0:	8c af       	std	Y+60, r24	; 0x3c
    28a2:	9d af       	std	Y+61, r25	; 0x3d
    28a4:	ae af       	std	Y+62, r26	; 0x3e
    28a6:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28a8:	6c ad       	ldd	r22, Y+60	; 0x3c
    28aa:	7d ad       	ldd	r23, Y+61	; 0x3d
    28ac:	8e ad       	ldd	r24, Y+62	; 0x3e
    28ae:	9f ad       	ldd	r25, Y+63	; 0x3f
    28b0:	20 e0       	ldi	r18, 0x00	; 0
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	4a ef       	ldi	r20, 0xFA	; 250
    28b6:	54 e4       	ldi	r21, 0x44	; 68
    28b8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    28bc:	dc 01       	movw	r26, r24
    28be:	cb 01       	movw	r24, r22
    28c0:	88 af       	std	Y+56, r24	; 0x38
    28c2:	99 af       	std	Y+57, r25	; 0x39
    28c4:	aa af       	std	Y+58, r26	; 0x3a
    28c6:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    28c8:	68 ad       	ldd	r22, Y+56	; 0x38
    28ca:	79 ad       	ldd	r23, Y+57	; 0x39
    28cc:	8a ad       	ldd	r24, Y+58	; 0x3a
    28ce:	9b ad       	ldd	r25, Y+59	; 0x3b
    28d0:	20 e0       	ldi	r18, 0x00	; 0
    28d2:	30 e0       	ldi	r19, 0x00	; 0
    28d4:	40 e8       	ldi	r20, 0x80	; 128
    28d6:	5f e3       	ldi	r21, 0x3F	; 63
    28d8:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    28dc:	88 23       	and	r24, r24
    28de:	2c f4       	brge	.+10     	; 0x28ea <LCDBusyLoop+0xada>
		__ticks = 1;
    28e0:	81 e0       	ldi	r24, 0x01	; 1
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	9f ab       	std	Y+55, r25	; 0x37
    28e6:	8e ab       	std	Y+54, r24	; 0x36
    28e8:	3f c0       	rjmp	.+126    	; 0x2968 <LCDBusyLoop+0xb58>
	else if (__tmp > 65535)
    28ea:	68 ad       	ldd	r22, Y+56	; 0x38
    28ec:	79 ad       	ldd	r23, Y+57	; 0x39
    28ee:	8a ad       	ldd	r24, Y+58	; 0x3a
    28f0:	9b ad       	ldd	r25, Y+59	; 0x3b
    28f2:	20 e0       	ldi	r18, 0x00	; 0
    28f4:	3f ef       	ldi	r19, 0xFF	; 255
    28f6:	4f e7       	ldi	r20, 0x7F	; 127
    28f8:	57 e4       	ldi	r21, 0x47	; 71
    28fa:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    28fe:	18 16       	cp	r1, r24
    2900:	4c f5       	brge	.+82     	; 0x2954 <LCDBusyLoop+0xb44>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2902:	6c ad       	ldd	r22, Y+60	; 0x3c
    2904:	7d ad       	ldd	r23, Y+61	; 0x3d
    2906:	8e ad       	ldd	r24, Y+62	; 0x3e
    2908:	9f ad       	ldd	r25, Y+63	; 0x3f
    290a:	20 e0       	ldi	r18, 0x00	; 0
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	40 e2       	ldi	r20, 0x20	; 32
    2910:	51 e4       	ldi	r21, 0x41	; 65
    2912:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2916:	dc 01       	movw	r26, r24
    2918:	cb 01       	movw	r24, r22
    291a:	bc 01       	movw	r22, r24
    291c:	cd 01       	movw	r24, r26
    291e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2922:	dc 01       	movw	r26, r24
    2924:	cb 01       	movw	r24, r22
    2926:	9f ab       	std	Y+55, r25	; 0x37
    2928:	8e ab       	std	Y+54, r24	; 0x36
    292a:	0f c0       	rjmp	.+30     	; 0x294a <LCDBusyLoop+0xb3a>
    292c:	88 ec       	ldi	r24, 0xC8	; 200
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	9d ab       	std	Y+53, r25	; 0x35
    2932:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2934:	8c a9       	ldd	r24, Y+52	; 0x34
    2936:	9d a9       	ldd	r25, Y+53	; 0x35
    2938:	01 97       	sbiw	r24, 0x01	; 1
    293a:	f1 f7       	brne	.-4      	; 0x2938 <LCDBusyLoop+0xb28>
    293c:	9d ab       	std	Y+53, r25	; 0x35
    293e:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2940:	8e a9       	ldd	r24, Y+54	; 0x36
    2942:	9f a9       	ldd	r25, Y+55	; 0x37
    2944:	01 97       	sbiw	r24, 0x01	; 1
    2946:	9f ab       	std	Y+55, r25	; 0x37
    2948:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    294a:	8e a9       	ldd	r24, Y+54	; 0x36
    294c:	9f a9       	ldd	r25, Y+55	; 0x37
    294e:	00 97       	sbiw	r24, 0x00	; 0
    2950:	69 f7       	brne	.-38     	; 0x292c <LCDBusyLoop+0xb1c>
    2952:	2d c0       	rjmp	.+90     	; 0x29ae <LCDBusyLoop+0xb9e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2954:	68 ad       	ldd	r22, Y+56	; 0x38
    2956:	79 ad       	ldd	r23, Y+57	; 0x39
    2958:	8a ad       	ldd	r24, Y+58	; 0x3a
    295a:	9b ad       	ldd	r25, Y+59	; 0x3b
    295c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2960:	dc 01       	movw	r26, r24
    2962:	cb 01       	movw	r24, r22
    2964:	9f ab       	std	Y+55, r25	; 0x37
    2966:	8e ab       	std	Y+54, r24	; 0x36
    2968:	8e a9       	ldd	r24, Y+54	; 0x36
    296a:	9f a9       	ldd	r25, Y+55	; 0x37
    296c:	9b ab       	std	Y+51, r25	; 0x33
    296e:	8a ab       	std	Y+50, r24	; 0x32
    2970:	8a a9       	ldd	r24, Y+50	; 0x32
    2972:	9b a9       	ldd	r25, Y+51	; 0x33
    2974:	01 97       	sbiw	r24, 0x01	; 1
    2976:	f1 f7       	brne	.-4      	; 0x2974 <LCDBusyLoop+0xb64>
    2978:	9b ab       	std	Y+51, r25	; 0x33
    297a:	8a ab       	std	Y+50, r24	; 0x32
    297c:	18 c0       	rjmp	.+48     	; 0x29ae <LCDBusyLoop+0xb9e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    297e:	fe 01       	movw	r30, r28
    2980:	ef 5b       	subi	r30, 0xBF	; 191
    2982:	ff 4f       	sbci	r31, 0xFF	; 255
    2984:	60 81       	ld	r22, Z
    2986:	71 81       	ldd	r23, Z+1	; 0x01
    2988:	82 81       	ldd	r24, Z+2	; 0x02
    298a:	93 81       	ldd	r25, Z+3	; 0x03
    298c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2990:	dc 01       	movw	r26, r24
    2992:	cb 01       	movw	r24, r22
    2994:	fe 01       	movw	r30, r28
    2996:	e0 5c       	subi	r30, 0xC0	; 192
    2998:	ff 4f       	sbci	r31, 0xFF	; 255
    299a:	80 83       	st	Z, r24
    299c:	fe 01       	movw	r30, r28
    299e:	e0 5c       	subi	r30, 0xC0	; 192
    29a0:	ff 4f       	sbci	r31, 0xFF	; 255
    29a2:	80 81       	ld	r24, Z
    29a4:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    29a6:	89 a9       	ldd	r24, Y+49	; 0x31
    29a8:	8a 95       	dec	r24
    29aa:	f1 f7       	brne	.-4      	; 0x29a8 <LCDBusyLoop+0xb98>
    29ac:	89 ab       	std	Y+49, r24	; 0x31
		_delay_us(0.5);

		temp=(LCD_DATA_PIN>>LCD_DATA_POS);
    29ae:	e9 e3       	ldi	r30, 0x39	; 57
    29b0:	f0 e0       	ldi	r31, 0x00	; 0
    29b2:	80 81       	ld	r24, Z
    29b4:	fe 01       	movw	r30, r28
    29b6:	e7 55       	subi	r30, 0x57	; 87
    29b8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ba:	82 95       	swap	r24
    29bc:	8f 70       	andi	r24, 0x0F	; 15
    29be:	80 83       	st	Z, r24
		temp&=0x0F;
    29c0:	de 01       	movw	r26, r28
    29c2:	a7 55       	subi	r26, 0x57	; 87
    29c4:	bf 4f       	sbci	r27, 0xFF	; 255
    29c6:	fe 01       	movw	r30, r28
    29c8:	e7 55       	subi	r30, 0x57	; 87
    29ca:	ff 4f       	sbci	r31, 0xFF	; 255
    29cc:	80 81       	ld	r24, Z
    29ce:	8f 70       	andi	r24, 0x0F	; 15
    29d0:	8c 93       	st	X, r24

		status=status|temp;
    29d2:	9e 01       	movw	r18, r28
    29d4:	26 55       	subi	r18, 0x56	; 86
    29d6:	3f 4f       	sbci	r19, 0xFF	; 255
    29d8:	fe 01       	movw	r30, r28
    29da:	e6 55       	subi	r30, 0x56	; 86
    29dc:	ff 4f       	sbci	r31, 0xFF	; 255
    29de:	de 01       	movw	r26, r28
    29e0:	a7 55       	subi	r26, 0x57	; 87
    29e2:	bf 4f       	sbci	r27, 0xFF	; 255
    29e4:	90 81       	ld	r25, Z
    29e6:	8c 91       	ld	r24, X
    29e8:	89 2b       	or	r24, r25
    29ea:	f9 01       	movw	r30, r18
    29ec:	80 83       	st	Z, r24

		busy=status & 0b10000000;
    29ee:	de 01       	movw	r26, r28
    29f0:	a5 55       	subi	r26, 0x55	; 85
    29f2:	bf 4f       	sbci	r27, 0xFF	; 255
    29f4:	fe 01       	movw	r30, r28
    29f6:	e6 55       	subi	r30, 0x56	; 86
    29f8:	ff 4f       	sbci	r31, 0xFF	; 255
    29fa:	80 81       	ld	r24, Z
    29fc:	80 78       	andi	r24, 0x80	; 128
    29fe:	8c 93       	st	X, r24
    2a00:	80 e0       	ldi	r24, 0x00	; 0
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	a0 e0       	ldi	r26, 0x00	; 0
    2a06:	bf e3       	ldi	r27, 0x3F	; 63
    2a08:	8d a7       	std	Y+45, r24	; 0x2d
    2a0a:	9e a7       	std	Y+46, r25	; 0x2e
    2a0c:	af a7       	std	Y+47, r26	; 0x2f
    2a0e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2a10:	6d a5       	ldd	r22, Y+45	; 0x2d
    2a12:	7e a5       	ldd	r23, Y+46	; 0x2e
    2a14:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a16:	98 a9       	ldd	r25, Y+48	; 0x30
    2a18:	2b ea       	ldi	r18, 0xAB	; 171
    2a1a:	3a ea       	ldi	r19, 0xAA	; 170
    2a1c:	4a e2       	ldi	r20, 0x2A	; 42
    2a1e:	50 e4       	ldi	r21, 0x40	; 64
    2a20:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2a24:	dc 01       	movw	r26, r24
    2a26:	cb 01       	movw	r24, r22
    2a28:	89 a7       	std	Y+41, r24	; 0x29
    2a2a:	9a a7       	std	Y+42, r25	; 0x2a
    2a2c:	ab a7       	std	Y+43, r26	; 0x2b
    2a2e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2a30:	69 a5       	ldd	r22, Y+41	; 0x29
    2a32:	7a a5       	ldd	r23, Y+42	; 0x2a
    2a34:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a36:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a38:	20 e0       	ldi	r18, 0x00	; 0
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	40 e8       	ldi	r20, 0x80	; 128
    2a3e:	5f e3       	ldi	r21, 0x3F	; 63
    2a40:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2a44:	88 23       	and	r24, r24
    2a46:	1c f4       	brge	.+6      	; 0x2a4e <LCDBusyLoop+0xc3e>
		__ticks = 1;
    2a48:	81 e0       	ldi	r24, 0x01	; 1
    2a4a:	88 a7       	std	Y+40, r24	; 0x28
    2a4c:	91 c0       	rjmp	.+290    	; 0x2b70 <LCDBusyLoop+0xd60>
	else if (__tmp > 255)
    2a4e:	69 a5       	ldd	r22, Y+41	; 0x29
    2a50:	7a a5       	ldd	r23, Y+42	; 0x2a
    2a52:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a54:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a56:	20 e0       	ldi	r18, 0x00	; 0
    2a58:	30 e0       	ldi	r19, 0x00	; 0
    2a5a:	4f e7       	ldi	r20, 0x7F	; 127
    2a5c:	53 e4       	ldi	r21, 0x43	; 67
    2a5e:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2a62:	18 16       	cp	r1, r24
    2a64:	0c f0       	brlt	.+2      	; 0x2a68 <LCDBusyLoop+0xc58>
    2a66:	7b c0       	rjmp	.+246    	; 0x2b5e <LCDBusyLoop+0xd4e>
	{
		_delay_ms(__us / 1000.0);
    2a68:	6d a5       	ldd	r22, Y+45	; 0x2d
    2a6a:	7e a5       	ldd	r23, Y+46	; 0x2e
    2a6c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a6e:	98 a9       	ldd	r25, Y+48	; 0x30
    2a70:	20 e0       	ldi	r18, 0x00	; 0
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	4a e7       	ldi	r20, 0x7A	; 122
    2a76:	54 e4       	ldi	r21, 0x44	; 68
    2a78:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    2a7c:	dc 01       	movw	r26, r24
    2a7e:	cb 01       	movw	r24, r22
    2a80:	8c a3       	std	Y+36, r24	; 0x24
    2a82:	9d a3       	std	Y+37, r25	; 0x25
    2a84:	ae a3       	std	Y+38, r26	; 0x26
    2a86:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a88:	6c a1       	ldd	r22, Y+36	; 0x24
    2a8a:	7d a1       	ldd	r23, Y+37	; 0x25
    2a8c:	8e a1       	ldd	r24, Y+38	; 0x26
    2a8e:	9f a1       	ldd	r25, Y+39	; 0x27
    2a90:	20 e0       	ldi	r18, 0x00	; 0
    2a92:	30 e0       	ldi	r19, 0x00	; 0
    2a94:	4a ef       	ldi	r20, 0xFA	; 250
    2a96:	54 e4       	ldi	r21, 0x44	; 68
    2a98:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2a9c:	dc 01       	movw	r26, r24
    2a9e:	cb 01       	movw	r24, r22
    2aa0:	88 a3       	std	Y+32, r24	; 0x20
    2aa2:	99 a3       	std	Y+33, r25	; 0x21
    2aa4:	aa a3       	std	Y+34, r26	; 0x22
    2aa6:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2aa8:	68 a1       	ldd	r22, Y+32	; 0x20
    2aaa:	79 a1       	ldd	r23, Y+33	; 0x21
    2aac:	8a a1       	ldd	r24, Y+34	; 0x22
    2aae:	9b a1       	ldd	r25, Y+35	; 0x23
    2ab0:	20 e0       	ldi	r18, 0x00	; 0
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	40 e8       	ldi	r20, 0x80	; 128
    2ab6:	5f e3       	ldi	r21, 0x3F	; 63
    2ab8:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2abc:	88 23       	and	r24, r24
    2abe:	2c f4       	brge	.+10     	; 0x2aca <LCDBusyLoop+0xcba>
		__ticks = 1;
    2ac0:	81 e0       	ldi	r24, 0x01	; 1
    2ac2:	90 e0       	ldi	r25, 0x00	; 0
    2ac4:	9f 8f       	std	Y+31, r25	; 0x1f
    2ac6:	8e 8f       	std	Y+30, r24	; 0x1e
    2ac8:	3f c0       	rjmp	.+126    	; 0x2b48 <LCDBusyLoop+0xd38>
	else if (__tmp > 65535)
    2aca:	68 a1       	ldd	r22, Y+32	; 0x20
    2acc:	79 a1       	ldd	r23, Y+33	; 0x21
    2ace:	8a a1       	ldd	r24, Y+34	; 0x22
    2ad0:	9b a1       	ldd	r25, Y+35	; 0x23
    2ad2:	20 e0       	ldi	r18, 0x00	; 0
    2ad4:	3f ef       	ldi	r19, 0xFF	; 255
    2ad6:	4f e7       	ldi	r20, 0x7F	; 127
    2ad8:	57 e4       	ldi	r21, 0x47	; 71
    2ada:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2ade:	18 16       	cp	r1, r24
    2ae0:	4c f5       	brge	.+82     	; 0x2b34 <LCDBusyLoop+0xd24>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ae2:	6c a1       	ldd	r22, Y+36	; 0x24
    2ae4:	7d a1       	ldd	r23, Y+37	; 0x25
    2ae6:	8e a1       	ldd	r24, Y+38	; 0x26
    2ae8:	9f a1       	ldd	r25, Y+39	; 0x27
    2aea:	20 e0       	ldi	r18, 0x00	; 0
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	40 e2       	ldi	r20, 0x20	; 32
    2af0:	51 e4       	ldi	r21, 0x41	; 65
    2af2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2af6:	dc 01       	movw	r26, r24
    2af8:	cb 01       	movw	r24, r22
    2afa:	bc 01       	movw	r22, r24
    2afc:	cd 01       	movw	r24, r26
    2afe:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2b02:	dc 01       	movw	r26, r24
    2b04:	cb 01       	movw	r24, r22
    2b06:	9f 8f       	std	Y+31, r25	; 0x1f
    2b08:	8e 8f       	std	Y+30, r24	; 0x1e
    2b0a:	0f c0       	rjmp	.+30     	; 0x2b2a <LCDBusyLoop+0xd1a>
    2b0c:	88 ec       	ldi	r24, 0xC8	; 200
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	9d 8f       	std	Y+29, r25	; 0x1d
    2b12:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b14:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2b16:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2b18:	01 97       	sbiw	r24, 0x01	; 1
    2b1a:	f1 f7       	brne	.-4      	; 0x2b18 <LCDBusyLoop+0xd08>
    2b1c:	9d 8f       	std	Y+29, r25	; 0x1d
    2b1e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b20:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b22:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2b24:	01 97       	sbiw	r24, 0x01	; 1
    2b26:	9f 8f       	std	Y+31, r25	; 0x1f
    2b28:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b2a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b2c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2b2e:	00 97       	sbiw	r24, 0x00	; 0
    2b30:	69 f7       	brne	.-38     	; 0x2b0c <LCDBusyLoop+0xcfc>
    2b32:	24 c0       	rjmp	.+72     	; 0x2b7c <LCDBusyLoop+0xd6c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b34:	68 a1       	ldd	r22, Y+32	; 0x20
    2b36:	79 a1       	ldd	r23, Y+33	; 0x21
    2b38:	8a a1       	ldd	r24, Y+34	; 0x22
    2b3a:	9b a1       	ldd	r25, Y+35	; 0x23
    2b3c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2b40:	dc 01       	movw	r26, r24
    2b42:	cb 01       	movw	r24, r22
    2b44:	9f 8f       	std	Y+31, r25	; 0x1f
    2b46:	8e 8f       	std	Y+30, r24	; 0x1e
    2b48:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b4a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2b4c:	9b 8f       	std	Y+27, r25	; 0x1b
    2b4e:	8a 8f       	std	Y+26, r24	; 0x1a
    2b50:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2b52:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2b54:	01 97       	sbiw	r24, 0x01	; 1
    2b56:	f1 f7       	brne	.-4      	; 0x2b54 <LCDBusyLoop+0xd44>
    2b58:	9b 8f       	std	Y+27, r25	; 0x1b
    2b5a:	8a 8f       	std	Y+26, r24	; 0x1a
    2b5c:	0f c0       	rjmp	.+30     	; 0x2b7c <LCDBusyLoop+0xd6c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2b5e:	69 a5       	ldd	r22, Y+41	; 0x29
    2b60:	7a a5       	ldd	r23, Y+42	; 0x2a
    2b62:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b64:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b66:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2b6a:	dc 01       	movw	r26, r24
    2b6c:	cb 01       	movw	r24, r22
    2b6e:	88 a7       	std	Y+40, r24	; 0x28
    2b70:	88 a5       	ldd	r24, Y+40	; 0x28
    2b72:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b74:	89 8d       	ldd	r24, Y+25	; 0x19
    2b76:	8a 95       	dec	r24
    2b78:	f1 f7       	brne	.-4      	; 0x2b76 <LCDBusyLoop+0xd66>
    2b7a:	89 8f       	std	Y+25, r24	; 0x19

		_delay_us(0.5);
		CLEAR_E();
    2b7c:	ab e3       	ldi	r26, 0x3B	; 59
    2b7e:	b0 e0       	ldi	r27, 0x00	; 0
    2b80:	eb e3       	ldi	r30, 0x3B	; 59
    2b82:	f0 e0       	ldi	r31, 0x00	; 0
    2b84:	80 81       	ld	r24, Z
    2b86:	8b 7f       	andi	r24, 0xFB	; 251
    2b88:	8c 93       	st	X, r24
    2b8a:	80 e0       	ldi	r24, 0x00	; 0
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	a0 e8       	ldi	r26, 0x80	; 128
    2b90:	bf e3       	ldi	r27, 0x3F	; 63
    2b92:	8d 8b       	std	Y+21, r24	; 0x15
    2b94:	9e 8b       	std	Y+22, r25	; 0x16
    2b96:	af 8b       	std	Y+23, r26	; 0x17
    2b98:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2b9a:	6d 89       	ldd	r22, Y+21	; 0x15
    2b9c:	7e 89       	ldd	r23, Y+22	; 0x16
    2b9e:	8f 89       	ldd	r24, Y+23	; 0x17
    2ba0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ba2:	2b ea       	ldi	r18, 0xAB	; 171
    2ba4:	3a ea       	ldi	r19, 0xAA	; 170
    2ba6:	4a e2       	ldi	r20, 0x2A	; 42
    2ba8:	50 e4       	ldi	r21, 0x40	; 64
    2baa:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2bae:	dc 01       	movw	r26, r24
    2bb0:	cb 01       	movw	r24, r22
    2bb2:	89 8b       	std	Y+17, r24	; 0x11
    2bb4:	9a 8b       	std	Y+18, r25	; 0x12
    2bb6:	ab 8b       	std	Y+19, r26	; 0x13
    2bb8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2bba:	69 89       	ldd	r22, Y+17	; 0x11
    2bbc:	7a 89       	ldd	r23, Y+18	; 0x12
    2bbe:	8b 89       	ldd	r24, Y+19	; 0x13
    2bc0:	9c 89       	ldd	r25, Y+20	; 0x14
    2bc2:	20 e0       	ldi	r18, 0x00	; 0
    2bc4:	30 e0       	ldi	r19, 0x00	; 0
    2bc6:	40 e8       	ldi	r20, 0x80	; 128
    2bc8:	5f e3       	ldi	r21, 0x3F	; 63
    2bca:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2bce:	88 23       	and	r24, r24
    2bd0:	1c f4       	brge	.+6      	; 0x2bd8 <LCDBusyLoop+0xdc8>
		__ticks = 1;
    2bd2:	81 e0       	ldi	r24, 0x01	; 1
    2bd4:	88 8b       	std	Y+16, r24	; 0x10
    2bd6:	91 c0       	rjmp	.+290    	; 0x2cfa <LCDBusyLoop+0xeea>
	else if (__tmp > 255)
    2bd8:	69 89       	ldd	r22, Y+17	; 0x11
    2bda:	7a 89       	ldd	r23, Y+18	; 0x12
    2bdc:	8b 89       	ldd	r24, Y+19	; 0x13
    2bde:	9c 89       	ldd	r25, Y+20	; 0x14
    2be0:	20 e0       	ldi	r18, 0x00	; 0
    2be2:	30 e0       	ldi	r19, 0x00	; 0
    2be4:	4f e7       	ldi	r20, 0x7F	; 127
    2be6:	53 e4       	ldi	r21, 0x43	; 67
    2be8:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2bec:	18 16       	cp	r1, r24
    2bee:	0c f0       	brlt	.+2      	; 0x2bf2 <LCDBusyLoop+0xde2>
    2bf0:	7b c0       	rjmp	.+246    	; 0x2ce8 <LCDBusyLoop+0xed8>
	{
		_delay_ms(__us / 1000.0);
    2bf2:	6d 89       	ldd	r22, Y+21	; 0x15
    2bf4:	7e 89       	ldd	r23, Y+22	; 0x16
    2bf6:	8f 89       	ldd	r24, Y+23	; 0x17
    2bf8:	98 8d       	ldd	r25, Y+24	; 0x18
    2bfa:	20 e0       	ldi	r18, 0x00	; 0
    2bfc:	30 e0       	ldi	r19, 0x00	; 0
    2bfe:	4a e7       	ldi	r20, 0x7A	; 122
    2c00:	54 e4       	ldi	r21, 0x44	; 68
    2c02:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    2c06:	dc 01       	movw	r26, r24
    2c08:	cb 01       	movw	r24, r22
    2c0a:	8c 87       	std	Y+12, r24	; 0x0c
    2c0c:	9d 87       	std	Y+13, r25	; 0x0d
    2c0e:	ae 87       	std	Y+14, r26	; 0x0e
    2c10:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c12:	6c 85       	ldd	r22, Y+12	; 0x0c
    2c14:	7d 85       	ldd	r23, Y+13	; 0x0d
    2c16:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c18:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c1a:	20 e0       	ldi	r18, 0x00	; 0
    2c1c:	30 e0       	ldi	r19, 0x00	; 0
    2c1e:	4a ef       	ldi	r20, 0xFA	; 250
    2c20:	54 e4       	ldi	r21, 0x44	; 68
    2c22:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2c26:	dc 01       	movw	r26, r24
    2c28:	cb 01       	movw	r24, r22
    2c2a:	88 87       	std	Y+8, r24	; 0x08
    2c2c:	99 87       	std	Y+9, r25	; 0x09
    2c2e:	aa 87       	std	Y+10, r26	; 0x0a
    2c30:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2c32:	68 85       	ldd	r22, Y+8	; 0x08
    2c34:	79 85       	ldd	r23, Y+9	; 0x09
    2c36:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c38:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c3a:	20 e0       	ldi	r18, 0x00	; 0
    2c3c:	30 e0       	ldi	r19, 0x00	; 0
    2c3e:	40 e8       	ldi	r20, 0x80	; 128
    2c40:	5f e3       	ldi	r21, 0x3F	; 63
    2c42:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2c46:	88 23       	and	r24, r24
    2c48:	2c f4       	brge	.+10     	; 0x2c54 <LCDBusyLoop+0xe44>
		__ticks = 1;
    2c4a:	81 e0       	ldi	r24, 0x01	; 1
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	9f 83       	std	Y+7, r25	; 0x07
    2c50:	8e 83       	std	Y+6, r24	; 0x06
    2c52:	3f c0       	rjmp	.+126    	; 0x2cd2 <LCDBusyLoop+0xec2>
	else if (__tmp > 65535)
    2c54:	68 85       	ldd	r22, Y+8	; 0x08
    2c56:	79 85       	ldd	r23, Y+9	; 0x09
    2c58:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c5a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c5c:	20 e0       	ldi	r18, 0x00	; 0
    2c5e:	3f ef       	ldi	r19, 0xFF	; 255
    2c60:	4f e7       	ldi	r20, 0x7F	; 127
    2c62:	57 e4       	ldi	r21, 0x47	; 71
    2c64:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2c68:	18 16       	cp	r1, r24
    2c6a:	4c f5       	brge	.+82     	; 0x2cbe <LCDBusyLoop+0xeae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c6c:	6c 85       	ldd	r22, Y+12	; 0x0c
    2c6e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2c70:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c72:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c74:	20 e0       	ldi	r18, 0x00	; 0
    2c76:	30 e0       	ldi	r19, 0x00	; 0
    2c78:	40 e2       	ldi	r20, 0x20	; 32
    2c7a:	51 e4       	ldi	r21, 0x41	; 65
    2c7c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2c80:	dc 01       	movw	r26, r24
    2c82:	cb 01       	movw	r24, r22
    2c84:	bc 01       	movw	r22, r24
    2c86:	cd 01       	movw	r24, r26
    2c88:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2c8c:	dc 01       	movw	r26, r24
    2c8e:	cb 01       	movw	r24, r22
    2c90:	9f 83       	std	Y+7, r25	; 0x07
    2c92:	8e 83       	std	Y+6, r24	; 0x06
    2c94:	0f c0       	rjmp	.+30     	; 0x2cb4 <LCDBusyLoop+0xea4>
    2c96:	88 ec       	ldi	r24, 0xC8	; 200
    2c98:	90 e0       	ldi	r25, 0x00	; 0
    2c9a:	9d 83       	std	Y+5, r25	; 0x05
    2c9c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c9e:	8c 81       	ldd	r24, Y+4	; 0x04
    2ca0:	9d 81       	ldd	r25, Y+5	; 0x05
    2ca2:	01 97       	sbiw	r24, 0x01	; 1
    2ca4:	f1 f7       	brne	.-4      	; 0x2ca2 <LCDBusyLoop+0xe92>
    2ca6:	9d 83       	std	Y+5, r25	; 0x05
    2ca8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2caa:	8e 81       	ldd	r24, Y+6	; 0x06
    2cac:	9f 81       	ldd	r25, Y+7	; 0x07
    2cae:	01 97       	sbiw	r24, 0x01	; 1
    2cb0:	9f 83       	std	Y+7, r25	; 0x07
    2cb2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cb4:	8e 81       	ldd	r24, Y+6	; 0x06
    2cb6:	9f 81       	ldd	r25, Y+7	; 0x07
    2cb8:	00 97       	sbiw	r24, 0x00	; 0
    2cba:	69 f7       	brne	.-38     	; 0x2c96 <LCDBusyLoop+0xe86>
    2cbc:	24 c0       	rjmp	.+72     	; 0x2d06 <LCDBusyLoop+0xef6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cbe:	68 85       	ldd	r22, Y+8	; 0x08
    2cc0:	79 85       	ldd	r23, Y+9	; 0x09
    2cc2:	8a 85       	ldd	r24, Y+10	; 0x0a
    2cc4:	9b 85       	ldd	r25, Y+11	; 0x0b
    2cc6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2cca:	dc 01       	movw	r26, r24
    2ccc:	cb 01       	movw	r24, r22
    2cce:	9f 83       	std	Y+7, r25	; 0x07
    2cd0:	8e 83       	std	Y+6, r24	; 0x06
    2cd2:	8e 81       	ldd	r24, Y+6	; 0x06
    2cd4:	9f 81       	ldd	r25, Y+7	; 0x07
    2cd6:	9b 83       	std	Y+3, r25	; 0x03
    2cd8:	8a 83       	std	Y+2, r24	; 0x02
    2cda:	8a 81       	ldd	r24, Y+2	; 0x02
    2cdc:	9b 81       	ldd	r25, Y+3	; 0x03
    2cde:	01 97       	sbiw	r24, 0x01	; 1
    2ce0:	f1 f7       	brne	.-4      	; 0x2cde <LCDBusyLoop+0xece>
    2ce2:	9b 83       	std	Y+3, r25	; 0x03
    2ce4:	8a 83       	std	Y+2, r24	; 0x02
    2ce6:	0f c0       	rjmp	.+30     	; 0x2d06 <LCDBusyLoop+0xef6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2ce8:	69 89       	ldd	r22, Y+17	; 0x11
    2cea:	7a 89       	ldd	r23, Y+18	; 0x12
    2cec:	8b 89       	ldd	r24, Y+19	; 0x13
    2cee:	9c 89       	ldd	r25, Y+20	; 0x14
    2cf0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2cf4:	dc 01       	movw	r26, r24
    2cf6:	cb 01       	movw	r24, r22
    2cf8:	88 8b       	std	Y+16, r24	; 0x10
    2cfa:	88 89       	ldd	r24, Y+16	; 0x10
    2cfc:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2cfe:	89 81       	ldd	r24, Y+1	; 0x01
    2d00:	8a 95       	dec	r24
    2d02:	f1 f7       	brne	.-4      	; 0x2d00 <LCDBusyLoop+0xef0>
    2d04:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(1);	//tEL
	}while(busy);
    2d06:	fe 01       	movw	r30, r28
    2d08:	e5 55       	subi	r30, 0x55	; 85
    2d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0c:	80 81       	ld	r24, Z
    2d0e:	88 23       	and	r24, r24
    2d10:	09 f0       	breq	.+2      	; 0x2d14 <LCDBusyLoop+0xf04>
    2d12:	cd c9       	rjmp	.-3174   	; 0x20ae <LCDBusyLoop+0x29e>

	CLEAR_RW();		//write mode
    2d14:	ab e3       	ldi	r26, 0x3B	; 59
    2d16:	b0 e0       	ldi	r27, 0x00	; 0
    2d18:	eb e3       	ldi	r30, 0x3B	; 59
    2d1a:	f0 e0       	ldi	r31, 0x00	; 0
    2d1c:	80 81       	ld	r24, Z
    2d1e:	8d 7f       	andi	r24, 0xFD	; 253
    2d20:	8c 93       	st	X, r24
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
    2d22:	aa e3       	ldi	r26, 0x3A	; 58
    2d24:	b0 e0       	ldi	r27, 0x00	; 0
    2d26:	ea e3       	ldi	r30, 0x3A	; 58
    2d28:	f0 e0       	ldi	r31, 0x00	; 0
    2d2a:	80 81       	ld	r24, Z
    2d2c:	80 6f       	ori	r24, 0xF0	; 240
    2d2e:	8c 93       	st	X, r24

}
    2d30:	c5 55       	subi	r28, 0x55	; 85
    2d32:	df 4f       	sbci	r29, 0xFF	; 255
    2d34:	0f b6       	in	r0, 0x3f	; 63
    2d36:	f8 94       	cli
    2d38:	de bf       	out	0x3e, r29	; 62
    2d3a:	0f be       	out	0x3f, r0	; 63
    2d3c:	cd bf       	out	0x3d, r28	; 61
    2d3e:	cf 91       	pop	r28
    2d40:	df 91       	pop	r29
    2d42:	1f 91       	pop	r17
    2d44:	0f 91       	pop	r16
    2d46:	08 95       	ret

00002d48 <LCDInit>:

void LCDInit(uint8_t style)
{
    2d48:	0f 93       	push	r16
    2d4a:	1f 93       	push	r17
    2d4c:	df 93       	push	r29
    2d4e:	cf 93       	push	r28
    2d50:	cd b7       	in	r28, 0x3d	; 61
    2d52:	de b7       	in	r29, 0x3e	; 62
    2d54:	c7 55       	subi	r28, 0x57	; 87
    2d56:	d0 40       	sbci	r29, 0x00	; 0
    2d58:	0f b6       	in	r0, 0x3f	; 63
    2d5a:	f8 94       	cli
    2d5c:	de bf       	out	0x3e, r29	; 62
    2d5e:	0f be       	out	0x3f, r0	; 63
    2d60:	cd bf       	out	0x3d, r28	; 61
    2d62:	fe 01       	movw	r30, r28
    2d64:	e9 5a       	subi	r30, 0xA9	; 169
    2d66:	ff 4f       	sbci	r31, 0xFF	; 255
    2d68:	80 83       	st	Z, r24
    2d6a:	fe 01       	movw	r30, r28
    2d6c:	ed 5a       	subi	r30, 0xAD	; 173
    2d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d70:	80 e0       	ldi	r24, 0x00	; 0
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	a0 ef       	ldi	r26, 0xF0	; 240
    2d76:	b1 e4       	ldi	r27, 0x41	; 65
    2d78:	80 83       	st	Z, r24
    2d7a:	91 83       	std	Z+1, r25	; 0x01
    2d7c:	a2 83       	std	Z+2, r26	; 0x02
    2d7e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d80:	8e 01       	movw	r16, r28
    2d82:	01 5b       	subi	r16, 0xB1	; 177
    2d84:	1f 4f       	sbci	r17, 0xFF	; 255
    2d86:	fe 01       	movw	r30, r28
    2d88:	ed 5a       	subi	r30, 0xAD	; 173
    2d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8c:	60 81       	ld	r22, Z
    2d8e:	71 81       	ldd	r23, Z+1	; 0x01
    2d90:	82 81       	ldd	r24, Z+2	; 0x02
    2d92:	93 81       	ldd	r25, Z+3	; 0x03
    2d94:	20 e0       	ldi	r18, 0x00	; 0
    2d96:	30 e0       	ldi	r19, 0x00	; 0
    2d98:	4a ef       	ldi	r20, 0xFA	; 250
    2d9a:	54 e4       	ldi	r21, 0x44	; 68
    2d9c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2da0:	dc 01       	movw	r26, r24
    2da2:	cb 01       	movw	r24, r22
    2da4:	f8 01       	movw	r30, r16
    2da6:	80 83       	st	Z, r24
    2da8:	91 83       	std	Z+1, r25	; 0x01
    2daa:	a2 83       	std	Z+2, r26	; 0x02
    2dac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2dae:	fe 01       	movw	r30, r28
    2db0:	e1 5b       	subi	r30, 0xB1	; 177
    2db2:	ff 4f       	sbci	r31, 0xFF	; 255
    2db4:	60 81       	ld	r22, Z
    2db6:	71 81       	ldd	r23, Z+1	; 0x01
    2db8:	82 81       	ldd	r24, Z+2	; 0x02
    2dba:	93 81       	ldd	r25, Z+3	; 0x03
    2dbc:	20 e0       	ldi	r18, 0x00	; 0
    2dbe:	30 e0       	ldi	r19, 0x00	; 0
    2dc0:	40 e8       	ldi	r20, 0x80	; 128
    2dc2:	5f e3       	ldi	r21, 0x3F	; 63
    2dc4:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2dc8:	88 23       	and	r24, r24
    2dca:	44 f4       	brge	.+16     	; 0x2ddc <LCDInit+0x94>
		__ticks = 1;
    2dcc:	fe 01       	movw	r30, r28
    2dce:	e3 5b       	subi	r30, 0xB3	; 179
    2dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd2:	81 e0       	ldi	r24, 0x01	; 1
    2dd4:	90 e0       	ldi	r25, 0x00	; 0
    2dd6:	91 83       	std	Z+1, r25	; 0x01
    2dd8:	80 83       	st	Z, r24
    2dda:	64 c0       	rjmp	.+200    	; 0x2ea4 <LCDInit+0x15c>
	else if (__tmp > 65535)
    2ddc:	fe 01       	movw	r30, r28
    2dde:	e1 5b       	subi	r30, 0xB1	; 177
    2de0:	ff 4f       	sbci	r31, 0xFF	; 255
    2de2:	60 81       	ld	r22, Z
    2de4:	71 81       	ldd	r23, Z+1	; 0x01
    2de6:	82 81       	ldd	r24, Z+2	; 0x02
    2de8:	93 81       	ldd	r25, Z+3	; 0x03
    2dea:	20 e0       	ldi	r18, 0x00	; 0
    2dec:	3f ef       	ldi	r19, 0xFF	; 255
    2dee:	4f e7       	ldi	r20, 0x7F	; 127
    2df0:	57 e4       	ldi	r21, 0x47	; 71
    2df2:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2df6:	18 16       	cp	r1, r24
    2df8:	0c f0       	brlt	.+2      	; 0x2dfc <LCDInit+0xb4>
    2dfa:	43 c0       	rjmp	.+134    	; 0x2e82 <LCDInit+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dfc:	fe 01       	movw	r30, r28
    2dfe:	ed 5a       	subi	r30, 0xAD	; 173
    2e00:	ff 4f       	sbci	r31, 0xFF	; 255
    2e02:	60 81       	ld	r22, Z
    2e04:	71 81       	ldd	r23, Z+1	; 0x01
    2e06:	82 81       	ldd	r24, Z+2	; 0x02
    2e08:	93 81       	ldd	r25, Z+3	; 0x03
    2e0a:	20 e0       	ldi	r18, 0x00	; 0
    2e0c:	30 e0       	ldi	r19, 0x00	; 0
    2e0e:	40 e2       	ldi	r20, 0x20	; 32
    2e10:	51 e4       	ldi	r21, 0x41	; 65
    2e12:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2e16:	dc 01       	movw	r26, r24
    2e18:	cb 01       	movw	r24, r22
    2e1a:	8e 01       	movw	r16, r28
    2e1c:	03 5b       	subi	r16, 0xB3	; 179
    2e1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2e20:	bc 01       	movw	r22, r24
    2e22:	cd 01       	movw	r24, r26
    2e24:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2e28:	dc 01       	movw	r26, r24
    2e2a:	cb 01       	movw	r24, r22
    2e2c:	f8 01       	movw	r30, r16
    2e2e:	91 83       	std	Z+1, r25	; 0x01
    2e30:	80 83       	st	Z, r24
    2e32:	1f c0       	rjmp	.+62     	; 0x2e72 <LCDInit+0x12a>
    2e34:	fe 01       	movw	r30, r28
    2e36:	e5 5b       	subi	r30, 0xB5	; 181
    2e38:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3a:	88 ec       	ldi	r24, 0xC8	; 200
    2e3c:	90 e0       	ldi	r25, 0x00	; 0
    2e3e:	91 83       	std	Z+1, r25	; 0x01
    2e40:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e42:	fe 01       	movw	r30, r28
    2e44:	e5 5b       	subi	r30, 0xB5	; 181
    2e46:	ff 4f       	sbci	r31, 0xFF	; 255
    2e48:	80 81       	ld	r24, Z
    2e4a:	91 81       	ldd	r25, Z+1	; 0x01
    2e4c:	01 97       	sbiw	r24, 0x01	; 1
    2e4e:	f1 f7       	brne	.-4      	; 0x2e4c <LCDInit+0x104>
    2e50:	fe 01       	movw	r30, r28
    2e52:	e5 5b       	subi	r30, 0xB5	; 181
    2e54:	ff 4f       	sbci	r31, 0xFF	; 255
    2e56:	91 83       	std	Z+1, r25	; 0x01
    2e58:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e5a:	de 01       	movw	r26, r28
    2e5c:	a3 5b       	subi	r26, 0xB3	; 179
    2e5e:	bf 4f       	sbci	r27, 0xFF	; 255
    2e60:	fe 01       	movw	r30, r28
    2e62:	e3 5b       	subi	r30, 0xB3	; 179
    2e64:	ff 4f       	sbci	r31, 0xFF	; 255
    2e66:	80 81       	ld	r24, Z
    2e68:	91 81       	ldd	r25, Z+1	; 0x01
    2e6a:	01 97       	sbiw	r24, 0x01	; 1
    2e6c:	11 96       	adiw	r26, 0x01	; 1
    2e6e:	9c 93       	st	X, r25
    2e70:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e72:	fe 01       	movw	r30, r28
    2e74:	e3 5b       	subi	r30, 0xB3	; 179
    2e76:	ff 4f       	sbci	r31, 0xFF	; 255
    2e78:	80 81       	ld	r24, Z
    2e7a:	91 81       	ldd	r25, Z+1	; 0x01
    2e7c:	00 97       	sbiw	r24, 0x00	; 0
    2e7e:	d1 f6       	brne	.-76     	; 0x2e34 <LCDInit+0xec>
    2e80:	27 c0       	rjmp	.+78     	; 0x2ed0 <LCDInit+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e82:	8e 01       	movw	r16, r28
    2e84:	03 5b       	subi	r16, 0xB3	; 179
    2e86:	1f 4f       	sbci	r17, 0xFF	; 255
    2e88:	fe 01       	movw	r30, r28
    2e8a:	e1 5b       	subi	r30, 0xB1	; 177
    2e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8e:	60 81       	ld	r22, Z
    2e90:	71 81       	ldd	r23, Z+1	; 0x01
    2e92:	82 81       	ldd	r24, Z+2	; 0x02
    2e94:	93 81       	ldd	r25, Z+3	; 0x03
    2e96:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2e9a:	dc 01       	movw	r26, r24
    2e9c:	cb 01       	movw	r24, r22
    2e9e:	f8 01       	movw	r30, r16
    2ea0:	91 83       	std	Z+1, r25	; 0x01
    2ea2:	80 83       	st	Z, r24
    2ea4:	de 01       	movw	r26, r28
    2ea6:	a7 5b       	subi	r26, 0xB7	; 183
    2ea8:	bf 4f       	sbci	r27, 0xFF	; 255
    2eaa:	fe 01       	movw	r30, r28
    2eac:	e3 5b       	subi	r30, 0xB3	; 179
    2eae:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb0:	80 81       	ld	r24, Z
    2eb2:	91 81       	ldd	r25, Z+1	; 0x01
    2eb4:	8d 93       	st	X+, r24
    2eb6:	9c 93       	st	X, r25
    2eb8:	fe 01       	movw	r30, r28
    2eba:	e7 5b       	subi	r30, 0xB7	; 183
    2ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ebe:	80 81       	ld	r24, Z
    2ec0:	91 81       	ldd	r25, Z+1	; 0x01
    2ec2:	01 97       	sbiw	r24, 0x01	; 1
    2ec4:	f1 f7       	brne	.-4      	; 0x2ec2 <LCDInit+0x17a>
    2ec6:	fe 01       	movw	r30, r28
    2ec8:	e7 5b       	subi	r30, 0xB7	; 183
    2eca:	ff 4f       	sbci	r31, 0xFF	; 255
    2ecc:	91 83       	std	Z+1, r25	; 0x01
    2ece:	80 83       	st	Z, r24

	//After power on Wait for LCD to Initialize
	_delay_ms(30);

	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
    2ed0:	aa e3       	ldi	r26, 0x3A	; 58
    2ed2:	b0 e0       	ldi	r27, 0x00	; 0
    2ed4:	ea e3       	ldi	r30, 0x3A	; 58
    2ed6:	f0 e0       	ldi	r31, 0x00	; 0
    2ed8:	80 81       	ld	r24, Z
    2eda:	80 6f       	ori	r24, 0xF0	; 240
    2edc:	8c 93       	st	X, r24
	LCD_E_DDR|=(1<<LCD_E_POS);
    2ede:	aa e3       	ldi	r26, 0x3A	; 58
    2ee0:	b0 e0       	ldi	r27, 0x00	; 0
    2ee2:	ea e3       	ldi	r30, 0x3A	; 58
    2ee4:	f0 e0       	ldi	r31, 0x00	; 0
    2ee6:	80 81       	ld	r24, Z
    2ee8:	84 60       	ori	r24, 0x04	; 4
    2eea:	8c 93       	st	X, r24
	LCD_RS_DDR|=(1<<LCD_RS_POS);
    2eec:	aa e3       	ldi	r26, 0x3A	; 58
    2eee:	b0 e0       	ldi	r27, 0x00	; 0
    2ef0:	ea e3       	ldi	r30, 0x3A	; 58
    2ef2:	f0 e0       	ldi	r31, 0x00	; 0
    2ef4:	80 81       	ld	r24, Z
    2ef6:	81 60       	ori	r24, 0x01	; 1
    2ef8:	8c 93       	st	X, r24
	LCD_RW_DDR|=(1<<LCD_RW_POS);
    2efa:	aa e3       	ldi	r26, 0x3A	; 58
    2efc:	b0 e0       	ldi	r27, 0x00	; 0
    2efe:	ea e3       	ldi	r30, 0x3A	; 58
    2f00:	f0 e0       	ldi	r31, 0x00	; 0
    2f02:	80 81       	ld	r24, Z
    2f04:	82 60       	ori	r24, 0x02	; 2
    2f06:	8c 93       	st	X, r24

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
    2f08:	ab e3       	ldi	r26, 0x3B	; 59
    2f0a:	b0 e0       	ldi	r27, 0x00	; 0
    2f0c:	eb e3       	ldi	r30, 0x3B	; 59
    2f0e:	f0 e0       	ldi	r31, 0x00	; 0
    2f10:	80 81       	ld	r24, Z
    2f12:	8f 70       	andi	r24, 0x0F	; 15
    2f14:	8c 93       	st	X, r24
	CLEAR_E();
    2f16:	ab e3       	ldi	r26, 0x3B	; 59
    2f18:	b0 e0       	ldi	r27, 0x00	; 0
    2f1a:	eb e3       	ldi	r30, 0x3B	; 59
    2f1c:	f0 e0       	ldi	r31, 0x00	; 0
    2f1e:	80 81       	ld	r24, Z
    2f20:	8b 7f       	andi	r24, 0xFB	; 251
    2f22:	8c 93       	st	X, r24
	CLEAR_RW();
    2f24:	ab e3       	ldi	r26, 0x3B	; 59
    2f26:	b0 e0       	ldi	r27, 0x00	; 0
    2f28:	eb e3       	ldi	r30, 0x3B	; 59
    2f2a:	f0 e0       	ldi	r31, 0x00	; 0
    2f2c:	80 81       	ld	r24, Z
    2f2e:	8d 7f       	andi	r24, 0xFD	; 253
    2f30:	8c 93       	st	X, r24
	CLEAR_RS();
    2f32:	ab e3       	ldi	r26, 0x3B	; 59
    2f34:	b0 e0       	ldi	r27, 0x00	; 0
    2f36:	eb e3       	ldi	r30, 0x3B	; 59
    2f38:	f0 e0       	ldi	r31, 0x00	; 0
    2f3a:	80 81       	ld	r24, Z
    2f3c:	8e 7f       	andi	r24, 0xFE	; 254
    2f3e:	8c 93       	st	X, r24
    2f40:	fe 01       	movw	r30, r28
    2f42:	eb 5b       	subi	r30, 0xBB	; 187
    2f44:	ff 4f       	sbci	r31, 0xFF	; 255
    2f46:	8a e9       	ldi	r24, 0x9A	; 154
    2f48:	99 e9       	ldi	r25, 0x99	; 153
    2f4a:	a9 e9       	ldi	r26, 0x99	; 153
    2f4c:	be e3       	ldi	r27, 0x3E	; 62
    2f4e:	80 83       	st	Z, r24
    2f50:	91 83       	std	Z+1, r25	; 0x01
    2f52:	a2 83       	std	Z+2, r26	; 0x02
    2f54:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2f56:	8e 01       	movw	r16, r28
    2f58:	0f 5b       	subi	r16, 0xBF	; 191
    2f5a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f5c:	fe 01       	movw	r30, r28
    2f5e:	eb 5b       	subi	r30, 0xBB	; 187
    2f60:	ff 4f       	sbci	r31, 0xFF	; 255
    2f62:	60 81       	ld	r22, Z
    2f64:	71 81       	ldd	r23, Z+1	; 0x01
    2f66:	82 81       	ldd	r24, Z+2	; 0x02
    2f68:	93 81       	ldd	r25, Z+3	; 0x03
    2f6a:	2b ea       	ldi	r18, 0xAB	; 171
    2f6c:	3a ea       	ldi	r19, 0xAA	; 170
    2f6e:	4a e2       	ldi	r20, 0x2A	; 42
    2f70:	50 e4       	ldi	r21, 0x40	; 64
    2f72:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2f76:	dc 01       	movw	r26, r24
    2f78:	cb 01       	movw	r24, r22
    2f7a:	f8 01       	movw	r30, r16
    2f7c:	80 83       	st	Z, r24
    2f7e:	91 83       	std	Z+1, r25	; 0x01
    2f80:	a2 83       	std	Z+2, r26	; 0x02
    2f82:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f84:	fe 01       	movw	r30, r28
    2f86:	ef 5b       	subi	r30, 0xBF	; 191
    2f88:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8a:	60 81       	ld	r22, Z
    2f8c:	71 81       	ldd	r23, Z+1	; 0x01
    2f8e:	82 81       	ldd	r24, Z+2	; 0x02
    2f90:	93 81       	ldd	r25, Z+3	; 0x03
    2f92:	20 e0       	ldi	r18, 0x00	; 0
    2f94:	30 e0       	ldi	r19, 0x00	; 0
    2f96:	40 e8       	ldi	r20, 0x80	; 128
    2f98:	5f e3       	ldi	r21, 0x3F	; 63
    2f9a:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2f9e:	88 23       	and	r24, r24
    2fa0:	34 f4       	brge	.+12     	; 0x2fae <LCDInit+0x266>
		__ticks = 1;
    2fa2:	81 e0       	ldi	r24, 0x01	; 1
    2fa4:	fe 01       	movw	r30, r28
    2fa6:	e0 5c       	subi	r30, 0xC0	; 192
    2fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2faa:	80 83       	st	Z, r24
    2fac:	9d c0       	rjmp	.+314    	; 0x30e8 <LCDInit+0x3a0>
	else if (__tmp > 255)
    2fae:	fe 01       	movw	r30, r28
    2fb0:	ef 5b       	subi	r30, 0xBF	; 191
    2fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb4:	60 81       	ld	r22, Z
    2fb6:	71 81       	ldd	r23, Z+1	; 0x01
    2fb8:	82 81       	ldd	r24, Z+2	; 0x02
    2fba:	93 81       	ldd	r25, Z+3	; 0x03
    2fbc:	20 e0       	ldi	r18, 0x00	; 0
    2fbe:	30 e0       	ldi	r19, 0x00	; 0
    2fc0:	4f e7       	ldi	r20, 0x7F	; 127
    2fc2:	53 e4       	ldi	r21, 0x43	; 67
    2fc4:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2fc8:	18 16       	cp	r1, r24
    2fca:	0c f0       	brlt	.+2      	; 0x2fce <LCDInit+0x286>
    2fcc:	7e c0       	rjmp	.+252    	; 0x30ca <LCDInit+0x382>
	{
		_delay_ms(__us / 1000.0);
    2fce:	fe 01       	movw	r30, r28
    2fd0:	eb 5b       	subi	r30, 0xBB	; 187
    2fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd4:	60 81       	ld	r22, Z
    2fd6:	71 81       	ldd	r23, Z+1	; 0x01
    2fd8:	82 81       	ldd	r24, Z+2	; 0x02
    2fda:	93 81       	ldd	r25, Z+3	; 0x03
    2fdc:	20 e0       	ldi	r18, 0x00	; 0
    2fde:	30 e0       	ldi	r19, 0x00	; 0
    2fe0:	4a e7       	ldi	r20, 0x7A	; 122
    2fe2:	54 e4       	ldi	r21, 0x44	; 68
    2fe4:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    2fe8:	dc 01       	movw	r26, r24
    2fea:	cb 01       	movw	r24, r22
    2fec:	8c af       	std	Y+60, r24	; 0x3c
    2fee:	9d af       	std	Y+61, r25	; 0x3d
    2ff0:	ae af       	std	Y+62, r26	; 0x3e
    2ff2:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ff4:	6c ad       	ldd	r22, Y+60	; 0x3c
    2ff6:	7d ad       	ldd	r23, Y+61	; 0x3d
    2ff8:	8e ad       	ldd	r24, Y+62	; 0x3e
    2ffa:	9f ad       	ldd	r25, Y+63	; 0x3f
    2ffc:	20 e0       	ldi	r18, 0x00	; 0
    2ffe:	30 e0       	ldi	r19, 0x00	; 0
    3000:	4a ef       	ldi	r20, 0xFA	; 250
    3002:	54 e4       	ldi	r21, 0x44	; 68
    3004:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3008:	dc 01       	movw	r26, r24
    300a:	cb 01       	movw	r24, r22
    300c:	88 af       	std	Y+56, r24	; 0x38
    300e:	99 af       	std	Y+57, r25	; 0x39
    3010:	aa af       	std	Y+58, r26	; 0x3a
    3012:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    3014:	68 ad       	ldd	r22, Y+56	; 0x38
    3016:	79 ad       	ldd	r23, Y+57	; 0x39
    3018:	8a ad       	ldd	r24, Y+58	; 0x3a
    301a:	9b ad       	ldd	r25, Y+59	; 0x3b
    301c:	20 e0       	ldi	r18, 0x00	; 0
    301e:	30 e0       	ldi	r19, 0x00	; 0
    3020:	40 e8       	ldi	r20, 0x80	; 128
    3022:	5f e3       	ldi	r21, 0x3F	; 63
    3024:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3028:	88 23       	and	r24, r24
    302a:	2c f4       	brge	.+10     	; 0x3036 <LCDInit+0x2ee>
		__ticks = 1;
    302c:	81 e0       	ldi	r24, 0x01	; 1
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	9f ab       	std	Y+55, r25	; 0x37
    3032:	8e ab       	std	Y+54, r24	; 0x36
    3034:	3f c0       	rjmp	.+126    	; 0x30b4 <LCDInit+0x36c>
	else if (__tmp > 65535)
    3036:	68 ad       	ldd	r22, Y+56	; 0x38
    3038:	79 ad       	ldd	r23, Y+57	; 0x39
    303a:	8a ad       	ldd	r24, Y+58	; 0x3a
    303c:	9b ad       	ldd	r25, Y+59	; 0x3b
    303e:	20 e0       	ldi	r18, 0x00	; 0
    3040:	3f ef       	ldi	r19, 0xFF	; 255
    3042:	4f e7       	ldi	r20, 0x7F	; 127
    3044:	57 e4       	ldi	r21, 0x47	; 71
    3046:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    304a:	18 16       	cp	r1, r24
    304c:	4c f5       	brge	.+82     	; 0x30a0 <LCDInit+0x358>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    304e:	6c ad       	ldd	r22, Y+60	; 0x3c
    3050:	7d ad       	ldd	r23, Y+61	; 0x3d
    3052:	8e ad       	ldd	r24, Y+62	; 0x3e
    3054:	9f ad       	ldd	r25, Y+63	; 0x3f
    3056:	20 e0       	ldi	r18, 0x00	; 0
    3058:	30 e0       	ldi	r19, 0x00	; 0
    305a:	40 e2       	ldi	r20, 0x20	; 32
    305c:	51 e4       	ldi	r21, 0x41	; 65
    305e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3062:	dc 01       	movw	r26, r24
    3064:	cb 01       	movw	r24, r22
    3066:	bc 01       	movw	r22, r24
    3068:	cd 01       	movw	r24, r26
    306a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    306e:	dc 01       	movw	r26, r24
    3070:	cb 01       	movw	r24, r22
    3072:	9f ab       	std	Y+55, r25	; 0x37
    3074:	8e ab       	std	Y+54, r24	; 0x36
    3076:	0f c0       	rjmp	.+30     	; 0x3096 <LCDInit+0x34e>
    3078:	88 ec       	ldi	r24, 0xC8	; 200
    307a:	90 e0       	ldi	r25, 0x00	; 0
    307c:	9d ab       	std	Y+53, r25	; 0x35
    307e:	8c ab       	std	Y+52, r24	; 0x34
    3080:	8c a9       	ldd	r24, Y+52	; 0x34
    3082:	9d a9       	ldd	r25, Y+53	; 0x35
    3084:	01 97       	sbiw	r24, 0x01	; 1
    3086:	f1 f7       	brne	.-4      	; 0x3084 <LCDInit+0x33c>
    3088:	9d ab       	std	Y+53, r25	; 0x35
    308a:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    308c:	8e a9       	ldd	r24, Y+54	; 0x36
    308e:	9f a9       	ldd	r25, Y+55	; 0x37
    3090:	01 97       	sbiw	r24, 0x01	; 1
    3092:	9f ab       	std	Y+55, r25	; 0x37
    3094:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3096:	8e a9       	ldd	r24, Y+54	; 0x36
    3098:	9f a9       	ldd	r25, Y+55	; 0x37
    309a:	00 97       	sbiw	r24, 0x00	; 0
    309c:	69 f7       	brne	.-38     	; 0x3078 <LCDInit+0x330>
    309e:	2d c0       	rjmp	.+90     	; 0x30fa <LCDInit+0x3b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30a0:	68 ad       	ldd	r22, Y+56	; 0x38
    30a2:	79 ad       	ldd	r23, Y+57	; 0x39
    30a4:	8a ad       	ldd	r24, Y+58	; 0x3a
    30a6:	9b ad       	ldd	r25, Y+59	; 0x3b
    30a8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    30ac:	dc 01       	movw	r26, r24
    30ae:	cb 01       	movw	r24, r22
    30b0:	9f ab       	std	Y+55, r25	; 0x37
    30b2:	8e ab       	std	Y+54, r24	; 0x36
    30b4:	8e a9       	ldd	r24, Y+54	; 0x36
    30b6:	9f a9       	ldd	r25, Y+55	; 0x37
    30b8:	9b ab       	std	Y+51, r25	; 0x33
    30ba:	8a ab       	std	Y+50, r24	; 0x32
    30bc:	8a a9       	ldd	r24, Y+50	; 0x32
    30be:	9b a9       	ldd	r25, Y+51	; 0x33
    30c0:	01 97       	sbiw	r24, 0x01	; 1
    30c2:	f1 f7       	brne	.-4      	; 0x30c0 <LCDInit+0x378>
    30c4:	9b ab       	std	Y+51, r25	; 0x33
    30c6:	8a ab       	std	Y+50, r24	; 0x32
    30c8:	18 c0       	rjmp	.+48     	; 0x30fa <LCDInit+0x3b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    30ca:	fe 01       	movw	r30, r28
    30cc:	ef 5b       	subi	r30, 0xBF	; 191
    30ce:	ff 4f       	sbci	r31, 0xFF	; 255
    30d0:	60 81       	ld	r22, Z
    30d2:	71 81       	ldd	r23, Z+1	; 0x01
    30d4:	82 81       	ldd	r24, Z+2	; 0x02
    30d6:	93 81       	ldd	r25, Z+3	; 0x03
    30d8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    30dc:	dc 01       	movw	r26, r24
    30de:	cb 01       	movw	r24, r22
    30e0:	fe 01       	movw	r30, r28
    30e2:	e0 5c       	subi	r30, 0xC0	; 192
    30e4:	ff 4f       	sbci	r31, 0xFF	; 255
    30e6:	80 83       	st	Z, r24
    30e8:	fe 01       	movw	r30, r28
    30ea:	e0 5c       	subi	r30, 0xC0	; 192
    30ec:	ff 4f       	sbci	r31, 0xFF	; 255
    30ee:	80 81       	ld	r24, Z
    30f0:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    30f2:	89 a9       	ldd	r24, Y+49	; 0x31
    30f4:	8a 95       	dec	r24
    30f6:	f1 f7       	brne	.-4      	; 0x30f4 <LCDInit+0x3ac>
    30f8:	89 ab       	std	Y+49, r24	; 0x31

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
    30fa:	ab e3       	ldi	r26, 0x3B	; 59
    30fc:	b0 e0       	ldi	r27, 0x00	; 0
    30fe:	eb e3       	ldi	r30, 0x3B	; 59
    3100:	f0 e0       	ldi	r31, 0x00	; 0
    3102:	80 81       	ld	r24, Z
    3104:	84 60       	ori	r24, 0x04	; 4
    3106:	8c 93       	st	X, r24
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
    3108:	ab e3       	ldi	r26, 0x3B	; 59
    310a:	b0 e0       	ldi	r27, 0x00	; 0
    310c:	eb e3       	ldi	r30, 0x3B	; 59
    310e:	f0 e0       	ldi	r31, 0x00	; 0
    3110:	80 81       	ld	r24, Z
    3112:	80 62       	ori	r24, 0x20	; 32
    3114:	8c 93       	st	X, r24
    3116:	80 e0       	ldi	r24, 0x00	; 0
    3118:	90 e0       	ldi	r25, 0x00	; 0
    311a:	a0 e8       	ldi	r26, 0x80	; 128
    311c:	bf e3       	ldi	r27, 0x3F	; 63
    311e:	8d a7       	std	Y+45, r24	; 0x2d
    3120:	9e a7       	std	Y+46, r25	; 0x2e
    3122:	af a7       	std	Y+47, r26	; 0x2f
    3124:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3126:	6d a5       	ldd	r22, Y+45	; 0x2d
    3128:	7e a5       	ldd	r23, Y+46	; 0x2e
    312a:	8f a5       	ldd	r24, Y+47	; 0x2f
    312c:	98 a9       	ldd	r25, Y+48	; 0x30
    312e:	2b ea       	ldi	r18, 0xAB	; 171
    3130:	3a ea       	ldi	r19, 0xAA	; 170
    3132:	4a e2       	ldi	r20, 0x2A	; 42
    3134:	50 e4       	ldi	r21, 0x40	; 64
    3136:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    313a:	dc 01       	movw	r26, r24
    313c:	cb 01       	movw	r24, r22
    313e:	89 a7       	std	Y+41, r24	; 0x29
    3140:	9a a7       	std	Y+42, r25	; 0x2a
    3142:	ab a7       	std	Y+43, r26	; 0x2b
    3144:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    3146:	69 a5       	ldd	r22, Y+41	; 0x29
    3148:	7a a5       	ldd	r23, Y+42	; 0x2a
    314a:	8b a5       	ldd	r24, Y+43	; 0x2b
    314c:	9c a5       	ldd	r25, Y+44	; 0x2c
    314e:	20 e0       	ldi	r18, 0x00	; 0
    3150:	30 e0       	ldi	r19, 0x00	; 0
    3152:	40 e8       	ldi	r20, 0x80	; 128
    3154:	5f e3       	ldi	r21, 0x3F	; 63
    3156:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    315a:	88 23       	and	r24, r24
    315c:	1c f4       	brge	.+6      	; 0x3164 <LCDInit+0x41c>
		__ticks = 1;
    315e:	81 e0       	ldi	r24, 0x01	; 1
    3160:	88 a7       	std	Y+40, r24	; 0x28
    3162:	91 c0       	rjmp	.+290    	; 0x3286 <LCDInit+0x53e>
	else if (__tmp > 255)
    3164:	69 a5       	ldd	r22, Y+41	; 0x29
    3166:	7a a5       	ldd	r23, Y+42	; 0x2a
    3168:	8b a5       	ldd	r24, Y+43	; 0x2b
    316a:	9c a5       	ldd	r25, Y+44	; 0x2c
    316c:	20 e0       	ldi	r18, 0x00	; 0
    316e:	30 e0       	ldi	r19, 0x00	; 0
    3170:	4f e7       	ldi	r20, 0x7F	; 127
    3172:	53 e4       	ldi	r21, 0x43	; 67
    3174:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3178:	18 16       	cp	r1, r24
    317a:	0c f0       	brlt	.+2      	; 0x317e <LCDInit+0x436>
    317c:	7b c0       	rjmp	.+246    	; 0x3274 <LCDInit+0x52c>
	{
		_delay_ms(__us / 1000.0);
    317e:	6d a5       	ldd	r22, Y+45	; 0x2d
    3180:	7e a5       	ldd	r23, Y+46	; 0x2e
    3182:	8f a5       	ldd	r24, Y+47	; 0x2f
    3184:	98 a9       	ldd	r25, Y+48	; 0x30
    3186:	20 e0       	ldi	r18, 0x00	; 0
    3188:	30 e0       	ldi	r19, 0x00	; 0
    318a:	4a e7       	ldi	r20, 0x7A	; 122
    318c:	54 e4       	ldi	r21, 0x44	; 68
    318e:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    3192:	dc 01       	movw	r26, r24
    3194:	cb 01       	movw	r24, r22
    3196:	8c a3       	std	Y+36, r24	; 0x24
    3198:	9d a3       	std	Y+37, r25	; 0x25
    319a:	ae a3       	std	Y+38, r26	; 0x26
    319c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    319e:	6c a1       	ldd	r22, Y+36	; 0x24
    31a0:	7d a1       	ldd	r23, Y+37	; 0x25
    31a2:	8e a1       	ldd	r24, Y+38	; 0x26
    31a4:	9f a1       	ldd	r25, Y+39	; 0x27
    31a6:	20 e0       	ldi	r18, 0x00	; 0
    31a8:	30 e0       	ldi	r19, 0x00	; 0
    31aa:	4a ef       	ldi	r20, 0xFA	; 250
    31ac:	54 e4       	ldi	r21, 0x44	; 68
    31ae:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    31b2:	dc 01       	movw	r26, r24
    31b4:	cb 01       	movw	r24, r22
    31b6:	88 a3       	std	Y+32, r24	; 0x20
    31b8:	99 a3       	std	Y+33, r25	; 0x21
    31ba:	aa a3       	std	Y+34, r26	; 0x22
    31bc:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    31be:	68 a1       	ldd	r22, Y+32	; 0x20
    31c0:	79 a1       	ldd	r23, Y+33	; 0x21
    31c2:	8a a1       	ldd	r24, Y+34	; 0x22
    31c4:	9b a1       	ldd	r25, Y+35	; 0x23
    31c6:	20 e0       	ldi	r18, 0x00	; 0
    31c8:	30 e0       	ldi	r19, 0x00	; 0
    31ca:	40 e8       	ldi	r20, 0x80	; 128
    31cc:	5f e3       	ldi	r21, 0x3F	; 63
    31ce:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    31d2:	88 23       	and	r24, r24
    31d4:	2c f4       	brge	.+10     	; 0x31e0 <LCDInit+0x498>
		__ticks = 1;
    31d6:	81 e0       	ldi	r24, 0x01	; 1
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	9f 8f       	std	Y+31, r25	; 0x1f
    31dc:	8e 8f       	std	Y+30, r24	; 0x1e
    31de:	3f c0       	rjmp	.+126    	; 0x325e <LCDInit+0x516>
	else if (__tmp > 65535)
    31e0:	68 a1       	ldd	r22, Y+32	; 0x20
    31e2:	79 a1       	ldd	r23, Y+33	; 0x21
    31e4:	8a a1       	ldd	r24, Y+34	; 0x22
    31e6:	9b a1       	ldd	r25, Y+35	; 0x23
    31e8:	20 e0       	ldi	r18, 0x00	; 0
    31ea:	3f ef       	ldi	r19, 0xFF	; 255
    31ec:	4f e7       	ldi	r20, 0x7F	; 127
    31ee:	57 e4       	ldi	r21, 0x47	; 71
    31f0:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    31f4:	18 16       	cp	r1, r24
    31f6:	4c f5       	brge	.+82     	; 0x324a <LCDInit+0x502>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31f8:	6c a1       	ldd	r22, Y+36	; 0x24
    31fa:	7d a1       	ldd	r23, Y+37	; 0x25
    31fc:	8e a1       	ldd	r24, Y+38	; 0x26
    31fe:	9f a1       	ldd	r25, Y+39	; 0x27
    3200:	20 e0       	ldi	r18, 0x00	; 0
    3202:	30 e0       	ldi	r19, 0x00	; 0
    3204:	40 e2       	ldi	r20, 0x20	; 32
    3206:	51 e4       	ldi	r21, 0x41	; 65
    3208:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    320c:	dc 01       	movw	r26, r24
    320e:	cb 01       	movw	r24, r22
    3210:	bc 01       	movw	r22, r24
    3212:	cd 01       	movw	r24, r26
    3214:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3218:	dc 01       	movw	r26, r24
    321a:	cb 01       	movw	r24, r22
    321c:	9f 8f       	std	Y+31, r25	; 0x1f
    321e:	8e 8f       	std	Y+30, r24	; 0x1e
    3220:	0f c0       	rjmp	.+30     	; 0x3240 <LCDInit+0x4f8>
    3222:	88 ec       	ldi	r24, 0xC8	; 200
    3224:	90 e0       	ldi	r25, 0x00	; 0
    3226:	9d 8f       	std	Y+29, r25	; 0x1d
    3228:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    322a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    322c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    322e:	01 97       	sbiw	r24, 0x01	; 1
    3230:	f1 f7       	brne	.-4      	; 0x322e <LCDInit+0x4e6>
    3232:	9d 8f       	std	Y+29, r25	; 0x1d
    3234:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3236:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3238:	9f 8d       	ldd	r25, Y+31	; 0x1f
    323a:	01 97       	sbiw	r24, 0x01	; 1
    323c:	9f 8f       	std	Y+31, r25	; 0x1f
    323e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3240:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3242:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3244:	00 97       	sbiw	r24, 0x00	; 0
    3246:	69 f7       	brne	.-38     	; 0x3222 <LCDInit+0x4da>
    3248:	24 c0       	rjmp	.+72     	; 0x3292 <LCDInit+0x54a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    324a:	68 a1       	ldd	r22, Y+32	; 0x20
    324c:	79 a1       	ldd	r23, Y+33	; 0x21
    324e:	8a a1       	ldd	r24, Y+34	; 0x22
    3250:	9b a1       	ldd	r25, Y+35	; 0x23
    3252:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3256:	dc 01       	movw	r26, r24
    3258:	cb 01       	movw	r24, r22
    325a:	9f 8f       	std	Y+31, r25	; 0x1f
    325c:	8e 8f       	std	Y+30, r24	; 0x1e
    325e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3260:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3262:	9b 8f       	std	Y+27, r25	; 0x1b
    3264:	8a 8f       	std	Y+26, r24	; 0x1a
    3266:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3268:	9b 8d       	ldd	r25, Y+27	; 0x1b
    326a:	01 97       	sbiw	r24, 0x01	; 1
    326c:	f1 f7       	brne	.-4      	; 0x326a <LCDInit+0x522>
    326e:	9b 8f       	std	Y+27, r25	; 0x1b
    3270:	8a 8f       	std	Y+26, r24	; 0x1a
    3272:	0f c0       	rjmp	.+30     	; 0x3292 <LCDInit+0x54a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3274:	69 a5       	ldd	r22, Y+41	; 0x29
    3276:	7a a5       	ldd	r23, Y+42	; 0x2a
    3278:	8b a5       	ldd	r24, Y+43	; 0x2b
    327a:	9c a5       	ldd	r25, Y+44	; 0x2c
    327c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3280:	dc 01       	movw	r26, r24
    3282:	cb 01       	movw	r24, r22
    3284:	88 a7       	std	Y+40, r24	; 0x28
    3286:	88 a5       	ldd	r24, Y+40	; 0x28
    3288:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    328a:	89 8d       	ldd	r24, Y+25	; 0x19
    328c:	8a 95       	dec	r24
    328e:	f1 f7       	brne	.-4      	; 0x328c <LCDInit+0x544>
    3290:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	CLEAR_E();
    3292:	ab e3       	ldi	r26, 0x3B	; 59
    3294:	b0 e0       	ldi	r27, 0x00	; 0
    3296:	eb e3       	ldi	r30, 0x3B	; 59
    3298:	f0 e0       	ldi	r31, 0x00	; 0
    329a:	80 81       	ld	r24, Z
    329c:	8b 7f       	andi	r24, 0xFB	; 251
    329e:	8c 93       	st	X, r24
    32a0:	80 e0       	ldi	r24, 0x00	; 0
    32a2:	90 e0       	ldi	r25, 0x00	; 0
    32a4:	a0 e8       	ldi	r26, 0x80	; 128
    32a6:	bf e3       	ldi	r27, 0x3F	; 63
    32a8:	8d 8b       	std	Y+21, r24	; 0x15
    32aa:	9e 8b       	std	Y+22, r25	; 0x16
    32ac:	af 8b       	std	Y+23, r26	; 0x17
    32ae:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    32b0:	6d 89       	ldd	r22, Y+21	; 0x15
    32b2:	7e 89       	ldd	r23, Y+22	; 0x16
    32b4:	8f 89       	ldd	r24, Y+23	; 0x17
    32b6:	98 8d       	ldd	r25, Y+24	; 0x18
    32b8:	2b ea       	ldi	r18, 0xAB	; 171
    32ba:	3a ea       	ldi	r19, 0xAA	; 170
    32bc:	4a e2       	ldi	r20, 0x2A	; 42
    32be:	50 e4       	ldi	r21, 0x40	; 64
    32c0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    32c4:	dc 01       	movw	r26, r24
    32c6:	cb 01       	movw	r24, r22
    32c8:	89 8b       	std	Y+17, r24	; 0x11
    32ca:	9a 8b       	std	Y+18, r25	; 0x12
    32cc:	ab 8b       	std	Y+19, r26	; 0x13
    32ce:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    32d0:	69 89       	ldd	r22, Y+17	; 0x11
    32d2:	7a 89       	ldd	r23, Y+18	; 0x12
    32d4:	8b 89       	ldd	r24, Y+19	; 0x13
    32d6:	9c 89       	ldd	r25, Y+20	; 0x14
    32d8:	20 e0       	ldi	r18, 0x00	; 0
    32da:	30 e0       	ldi	r19, 0x00	; 0
    32dc:	40 e8       	ldi	r20, 0x80	; 128
    32de:	5f e3       	ldi	r21, 0x3F	; 63
    32e0:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    32e4:	88 23       	and	r24, r24
    32e6:	1c f4       	brge	.+6      	; 0x32ee <LCDInit+0x5a6>
		__ticks = 1;
    32e8:	81 e0       	ldi	r24, 0x01	; 1
    32ea:	88 8b       	std	Y+16, r24	; 0x10
    32ec:	91 c0       	rjmp	.+290    	; 0x3410 <LCDInit+0x6c8>
	else if (__tmp > 255)
    32ee:	69 89       	ldd	r22, Y+17	; 0x11
    32f0:	7a 89       	ldd	r23, Y+18	; 0x12
    32f2:	8b 89       	ldd	r24, Y+19	; 0x13
    32f4:	9c 89       	ldd	r25, Y+20	; 0x14
    32f6:	20 e0       	ldi	r18, 0x00	; 0
    32f8:	30 e0       	ldi	r19, 0x00	; 0
    32fa:	4f e7       	ldi	r20, 0x7F	; 127
    32fc:	53 e4       	ldi	r21, 0x43	; 67
    32fe:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3302:	18 16       	cp	r1, r24
    3304:	0c f0       	brlt	.+2      	; 0x3308 <LCDInit+0x5c0>
    3306:	7b c0       	rjmp	.+246    	; 0x33fe <LCDInit+0x6b6>
	{
		_delay_ms(__us / 1000.0);
    3308:	6d 89       	ldd	r22, Y+21	; 0x15
    330a:	7e 89       	ldd	r23, Y+22	; 0x16
    330c:	8f 89       	ldd	r24, Y+23	; 0x17
    330e:	98 8d       	ldd	r25, Y+24	; 0x18
    3310:	20 e0       	ldi	r18, 0x00	; 0
    3312:	30 e0       	ldi	r19, 0x00	; 0
    3314:	4a e7       	ldi	r20, 0x7A	; 122
    3316:	54 e4       	ldi	r21, 0x44	; 68
    3318:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    331c:	dc 01       	movw	r26, r24
    331e:	cb 01       	movw	r24, r22
    3320:	8c 87       	std	Y+12, r24	; 0x0c
    3322:	9d 87       	std	Y+13, r25	; 0x0d
    3324:	ae 87       	std	Y+14, r26	; 0x0e
    3326:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3328:	6c 85       	ldd	r22, Y+12	; 0x0c
    332a:	7d 85       	ldd	r23, Y+13	; 0x0d
    332c:	8e 85       	ldd	r24, Y+14	; 0x0e
    332e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3330:	20 e0       	ldi	r18, 0x00	; 0
    3332:	30 e0       	ldi	r19, 0x00	; 0
    3334:	4a ef       	ldi	r20, 0xFA	; 250
    3336:	54 e4       	ldi	r21, 0x44	; 68
    3338:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    333c:	dc 01       	movw	r26, r24
    333e:	cb 01       	movw	r24, r22
    3340:	88 87       	std	Y+8, r24	; 0x08
    3342:	99 87       	std	Y+9, r25	; 0x09
    3344:	aa 87       	std	Y+10, r26	; 0x0a
    3346:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3348:	68 85       	ldd	r22, Y+8	; 0x08
    334a:	79 85       	ldd	r23, Y+9	; 0x09
    334c:	8a 85       	ldd	r24, Y+10	; 0x0a
    334e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3350:	20 e0       	ldi	r18, 0x00	; 0
    3352:	30 e0       	ldi	r19, 0x00	; 0
    3354:	40 e8       	ldi	r20, 0x80	; 128
    3356:	5f e3       	ldi	r21, 0x3F	; 63
    3358:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    335c:	88 23       	and	r24, r24
    335e:	2c f4       	brge	.+10     	; 0x336a <LCDInit+0x622>
		__ticks = 1;
    3360:	81 e0       	ldi	r24, 0x01	; 1
    3362:	90 e0       	ldi	r25, 0x00	; 0
    3364:	9f 83       	std	Y+7, r25	; 0x07
    3366:	8e 83       	std	Y+6, r24	; 0x06
    3368:	3f c0       	rjmp	.+126    	; 0x33e8 <LCDInit+0x6a0>
	else if (__tmp > 65535)
    336a:	68 85       	ldd	r22, Y+8	; 0x08
    336c:	79 85       	ldd	r23, Y+9	; 0x09
    336e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3370:	9b 85       	ldd	r25, Y+11	; 0x0b
    3372:	20 e0       	ldi	r18, 0x00	; 0
    3374:	3f ef       	ldi	r19, 0xFF	; 255
    3376:	4f e7       	ldi	r20, 0x7F	; 127
    3378:	57 e4       	ldi	r21, 0x47	; 71
    337a:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    337e:	18 16       	cp	r1, r24
    3380:	4c f5       	brge	.+82     	; 0x33d4 <LCDInit+0x68c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3382:	6c 85       	ldd	r22, Y+12	; 0x0c
    3384:	7d 85       	ldd	r23, Y+13	; 0x0d
    3386:	8e 85       	ldd	r24, Y+14	; 0x0e
    3388:	9f 85       	ldd	r25, Y+15	; 0x0f
    338a:	20 e0       	ldi	r18, 0x00	; 0
    338c:	30 e0       	ldi	r19, 0x00	; 0
    338e:	40 e2       	ldi	r20, 0x20	; 32
    3390:	51 e4       	ldi	r21, 0x41	; 65
    3392:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3396:	dc 01       	movw	r26, r24
    3398:	cb 01       	movw	r24, r22
    339a:	bc 01       	movw	r22, r24
    339c:	cd 01       	movw	r24, r26
    339e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    33a2:	dc 01       	movw	r26, r24
    33a4:	cb 01       	movw	r24, r22
    33a6:	9f 83       	std	Y+7, r25	; 0x07
    33a8:	8e 83       	std	Y+6, r24	; 0x06
    33aa:	0f c0       	rjmp	.+30     	; 0x33ca <LCDInit+0x682>
    33ac:	88 ec       	ldi	r24, 0xC8	; 200
    33ae:	90 e0       	ldi	r25, 0x00	; 0
    33b0:	9d 83       	std	Y+5, r25	; 0x05
    33b2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    33b4:	8c 81       	ldd	r24, Y+4	; 0x04
    33b6:	9d 81       	ldd	r25, Y+5	; 0x05
    33b8:	01 97       	sbiw	r24, 0x01	; 1
    33ba:	f1 f7       	brne	.-4      	; 0x33b8 <LCDInit+0x670>
    33bc:	9d 83       	std	Y+5, r25	; 0x05
    33be:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33c0:	8e 81       	ldd	r24, Y+6	; 0x06
    33c2:	9f 81       	ldd	r25, Y+7	; 0x07
    33c4:	01 97       	sbiw	r24, 0x01	; 1
    33c6:	9f 83       	std	Y+7, r25	; 0x07
    33c8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33ca:	8e 81       	ldd	r24, Y+6	; 0x06
    33cc:	9f 81       	ldd	r25, Y+7	; 0x07
    33ce:	00 97       	sbiw	r24, 0x00	; 0
    33d0:	69 f7       	brne	.-38     	; 0x33ac <LCDInit+0x664>
    33d2:	24 c0       	rjmp	.+72     	; 0x341c <LCDInit+0x6d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33d4:	68 85       	ldd	r22, Y+8	; 0x08
    33d6:	79 85       	ldd	r23, Y+9	; 0x09
    33d8:	8a 85       	ldd	r24, Y+10	; 0x0a
    33da:	9b 85       	ldd	r25, Y+11	; 0x0b
    33dc:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    33e0:	dc 01       	movw	r26, r24
    33e2:	cb 01       	movw	r24, r22
    33e4:	9f 83       	std	Y+7, r25	; 0x07
    33e6:	8e 83       	std	Y+6, r24	; 0x06
    33e8:	8e 81       	ldd	r24, Y+6	; 0x06
    33ea:	9f 81       	ldd	r25, Y+7	; 0x07
    33ec:	9b 83       	std	Y+3, r25	; 0x03
    33ee:	8a 83       	std	Y+2, r24	; 0x02
    33f0:	8a 81       	ldd	r24, Y+2	; 0x02
    33f2:	9b 81       	ldd	r25, Y+3	; 0x03
    33f4:	01 97       	sbiw	r24, 0x01	; 1
    33f6:	f1 f7       	brne	.-4      	; 0x33f4 <LCDInit+0x6ac>
    33f8:	9b 83       	std	Y+3, r25	; 0x03
    33fa:	8a 83       	std	Y+2, r24	; 0x02
    33fc:	0f c0       	rjmp	.+30     	; 0x341c <LCDInit+0x6d4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    33fe:	69 89       	ldd	r22, Y+17	; 0x11
    3400:	7a 89       	ldd	r23, Y+18	; 0x12
    3402:	8b 89       	ldd	r24, Y+19	; 0x13
    3404:	9c 89       	ldd	r25, Y+20	; 0x14
    3406:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    340a:	dc 01       	movw	r26, r24
    340c:	cb 01       	movw	r24, r22
    340e:	88 8b       	std	Y+16, r24	; 0x10
    3410:	88 89       	ldd	r24, Y+16	; 0x10
    3412:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3414:	89 81       	ldd	r24, Y+1	; 0x01
    3416:	8a 95       	dec	r24
    3418:	f1 f7       	brne	.-4      	; 0x3416 <LCDInit+0x6ce>
    341a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);

	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
    341c:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
    3420:	fe 01       	movw	r30, r28
    3422:	e9 5a       	subi	r30, 0xA9	; 169
    3424:	ff 4f       	sbci	r31, 0xFF	; 255
    3426:	80 81       	ld	r24, Z
    3428:	8c 60       	ori	r24, 0x0C	; 12
    342a:	60 e0       	ldi	r22, 0x00	; 0
    342c:	0e 94 bc 09 	call	0x1378	; 0x1378 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
    3430:	88 e2       	ldi	r24, 0x28	; 40
    3432:	60 e0       	ldi	r22, 0x00	; 0
    3434:	0e 94 bc 09 	call	0x1378	; 0x1378 <LCDByte>


	LCDGotoXY(0,0);
    3438:	80 e0       	ldi	r24, 0x00	; 0
    343a:	60 e0       	ldi	r22, 0x00	; 0
    343c:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <LCDGotoXY>

}
    3440:	c9 5a       	subi	r28, 0xA9	; 169
    3442:	df 4f       	sbci	r29, 0xFF	; 255
    3444:	0f b6       	in	r0, 0x3f	; 63
    3446:	f8 94       	cli
    3448:	de bf       	out	0x3e, r29	; 62
    344a:	0f be       	out	0x3f, r0	; 63
    344c:	cd bf       	out	0x3d, r28	; 61
    344e:	cf 91       	pop	r28
    3450:	df 91       	pop	r29
    3452:	1f 91       	pop	r17
    3454:	0f 91       	pop	r16
    3456:	08 95       	ret

00003458 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
    3458:	df 93       	push	r29
    345a:	cf 93       	push	r28
    345c:	00 d0       	rcall	.+0      	; 0x345e <LCDWriteString+0x6>
    345e:	0f 92       	push	r0
    3460:	cd b7       	in	r28, 0x3d	; 61
    3462:	de b7       	in	r29, 0x3e	; 62
    3464:	9b 83       	std	Y+3, r25	; 0x03
    3466:	8a 83       	std	Y+2, r24	; 0x02
    3468:	30 c0       	rjmp	.+96     	; 0x34ca <LCDWriteString+0x72>

	*****************************************************************/
 while(*msg!='\0')
 {
 	//Custom Char Support
	if(*msg=='%')
    346a:	ea 81       	ldd	r30, Y+2	; 0x02
    346c:	fb 81       	ldd	r31, Y+3	; 0x03
    346e:	80 81       	ld	r24, Z
    3470:	85 32       	cpi	r24, 0x25	; 37
    3472:	01 f5       	brne	.+64     	; 0x34b4 <LCDWriteString+0x5c>
	{
		msg++;
    3474:	8a 81       	ldd	r24, Y+2	; 0x02
    3476:	9b 81       	ldd	r25, Y+3	; 0x03
    3478:	01 96       	adiw	r24, 0x01	; 1
    347a:	9b 83       	std	Y+3, r25	; 0x03
    347c:	8a 83       	std	Y+2, r24	; 0x02
		int8_t cc=*msg-'0';
    347e:	ea 81       	ldd	r30, Y+2	; 0x02
    3480:	fb 81       	ldd	r31, Y+3	; 0x03
    3482:	80 81       	ld	r24, Z
    3484:	80 53       	subi	r24, 0x30	; 48
    3486:	89 83       	std	Y+1, r24	; 0x01

		if(cc>=0 && cc<=7)
    3488:	89 81       	ldd	r24, Y+1	; 0x01
    348a:	88 23       	and	r24, r24
    348c:	44 f0       	brlt	.+16     	; 0x349e <LCDWriteString+0x46>
    348e:	89 81       	ldd	r24, Y+1	; 0x01
    3490:	88 30       	cpi	r24, 0x08	; 8
    3492:	2c f4       	brge	.+10     	; 0x349e <LCDWriteString+0x46>
		{
			LCDData(cc);
    3494:	89 81       	ldd	r24, Y+1	; 0x01
    3496:	61 e0       	ldi	r22, 0x01	; 1
    3498:	0e 94 bc 09 	call	0x1378	; 0x1378 <LCDByte>
    349c:	11 c0       	rjmp	.+34     	; 0x34c0 <LCDWriteString+0x68>
		}
		else
		{
			LCDData('%');
    349e:	85 e2       	ldi	r24, 0x25	; 37
    34a0:	61 e0       	ldi	r22, 0x01	; 1
    34a2:	0e 94 bc 09 	call	0x1378	; 0x1378 <LCDByte>
			LCDData(*msg);
    34a6:	ea 81       	ldd	r30, Y+2	; 0x02
    34a8:	fb 81       	ldd	r31, Y+3	; 0x03
    34aa:	80 81       	ld	r24, Z
    34ac:	61 e0       	ldi	r22, 0x01	; 1
    34ae:	0e 94 bc 09 	call	0x1378	; 0x1378 <LCDByte>
    34b2:	06 c0       	rjmp	.+12     	; 0x34c0 <LCDWriteString+0x68>
		}
	}
	else
	{
		LCDData(*msg);
    34b4:	ea 81       	ldd	r30, Y+2	; 0x02
    34b6:	fb 81       	ldd	r31, Y+3	; 0x03
    34b8:	80 81       	ld	r24, Z
    34ba:	61 e0       	ldi	r22, 0x01	; 1
    34bc:	0e 94 bc 09 	call	0x1378	; 0x1378 <LCDByte>
	}
	msg++;
    34c0:	8a 81       	ldd	r24, Y+2	; 0x02
    34c2:	9b 81       	ldd	r25, Y+3	; 0x03
    34c4:	01 96       	adiw	r24, 0x01	; 1
    34c6:	9b 83       	std	Y+3, r25	; 0x03
    34c8:	8a 83       	std	Y+2, r24	; 0x02

	In the same way you can insert any syblom numbered 0-7


	*****************************************************************/
 while(*msg!='\0')
    34ca:	ea 81       	ldd	r30, Y+2	; 0x02
    34cc:	fb 81       	ldd	r31, Y+3	; 0x03
    34ce:	80 81       	ld	r24, Z
    34d0:	88 23       	and	r24, r24
    34d2:	59 f6       	brne	.-106    	; 0x346a <LCDWriteString+0x12>
	{
		LCDData(*msg);
	}
	msg++;
 }
}
    34d4:	0f 90       	pop	r0
    34d6:	0f 90       	pop	r0
    34d8:	0f 90       	pop	r0
    34da:	cf 91       	pop	r28
    34dc:	df 91       	pop	r29
    34de:	08 95       	ret

000034e0 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
    34e0:	df 93       	push	r29
    34e2:	cf 93       	push	r28
    34e4:	cd b7       	in	r28, 0x3d	; 61
    34e6:	de b7       	in	r29, 0x3e	; 62
    34e8:	2d 97       	sbiw	r28, 0x0d	; 13
    34ea:	0f b6       	in	r0, 0x3f	; 63
    34ec:	f8 94       	cli
    34ee:	de bf       	out	0x3e, r29	; 62
    34f0:	0f be       	out	0x3f, r0	; 63
    34f2:	cd bf       	out	0x3d, r28	; 61
    34f4:	9b 87       	std	Y+11, r25	; 0x0b
    34f6:	8a 87       	std	Y+10, r24	; 0x0a
    34f8:	7d 87       	std	Y+13, r23	; 0x0d
    34fa:	6c 87       	std	Y+12, r22	; 0x0c
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
    34fc:	85 e0       	ldi	r24, 0x05	; 5
    34fe:	fe 01       	movw	r30, r28
    3500:	35 96       	adiw	r30, 0x05	; 5
    3502:	df 01       	movw	r26, r30
    3504:	28 2f       	mov	r18, r24
    3506:	1d 92       	st	X+, r1
    3508:	2a 95       	dec	r18
    350a:	e9 f7       	brne	.-6      	; 0x3506 <LCDWriteInt+0x26>
	int i=4,j=0;
    350c:	84 e0       	ldi	r24, 0x04	; 4
    350e:	90 e0       	ldi	r25, 0x00	; 0
    3510:	9c 83       	std	Y+4, r25	; 0x04
    3512:	8b 83       	std	Y+3, r24	; 0x03
    3514:	1a 82       	std	Y+2, r1	; 0x02
    3516:	19 82       	std	Y+1, r1	; 0x01
    3518:	1e c0       	rjmp	.+60     	; 0x3556 <LCDWriteInt+0x76>
	while(val)
	{
	str[i]=val%10;
    351a:	eb 81       	ldd	r30, Y+3	; 0x03
    351c:	fc 81       	ldd	r31, Y+4	; 0x04
    351e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3520:	9b 85       	ldd	r25, Y+11	; 0x0b
    3522:	2a e0       	ldi	r18, 0x0A	; 10
    3524:	30 e0       	ldi	r19, 0x00	; 0
    3526:	b9 01       	movw	r22, r18
    3528:	0e 94 74 28 	call	0x50e8	; 0x50e8 <__divmodhi4>
    352c:	28 2f       	mov	r18, r24
    352e:	ce 01       	movw	r24, r28
    3530:	05 96       	adiw	r24, 0x05	; 5
    3532:	e8 0f       	add	r30, r24
    3534:	f9 1f       	adc	r31, r25
    3536:	20 83       	st	Z, r18
	val=val/10;
    3538:	8a 85       	ldd	r24, Y+10	; 0x0a
    353a:	9b 85       	ldd	r25, Y+11	; 0x0b
    353c:	2a e0       	ldi	r18, 0x0A	; 10
    353e:	30 e0       	ldi	r19, 0x00	; 0
    3540:	b9 01       	movw	r22, r18
    3542:	0e 94 74 28 	call	0x50e8	; 0x50e8 <__divmodhi4>
    3546:	cb 01       	movw	r24, r22
    3548:	9b 87       	std	Y+11, r25	; 0x0b
    354a:	8a 87       	std	Y+10, r24	; 0x0a
	i--;
    354c:	8b 81       	ldd	r24, Y+3	; 0x03
    354e:	9c 81       	ldd	r25, Y+4	; 0x04
    3550:	01 97       	sbiw	r24, 0x01	; 1
    3552:	9c 83       	std	Y+4, r25	; 0x04
    3554:	8b 83       	std	Y+3, r24	; 0x03

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
    3556:	8a 85       	ldd	r24, Y+10	; 0x0a
    3558:	9b 85       	ldd	r25, Y+11	; 0x0b
    355a:	00 97       	sbiw	r24, 0x00	; 0
    355c:	f1 f6       	brne	.-68     	; 0x351a <LCDWriteInt+0x3a>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
    355e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3560:	9d 85       	ldd	r25, Y+13	; 0x0d
    3562:	af ef       	ldi	r26, 0xFF	; 255
    3564:	8f 3f       	cpi	r24, 0xFF	; 255
    3566:	9a 07       	cpc	r25, r26
    3568:	89 f4       	brne	.+34     	; 0x358c <LCDWriteInt+0xac>
    356a:	05 c0       	rjmp	.+10     	; 0x3576 <LCDWriteInt+0x96>
		while(str[j]==0) j++;
    356c:	89 81       	ldd	r24, Y+1	; 0x01
    356e:	9a 81       	ldd	r25, Y+2	; 0x02
    3570:	01 96       	adiw	r24, 0x01	; 1
    3572:	9a 83       	std	Y+2, r25	; 0x02
    3574:	89 83       	std	Y+1, r24	; 0x01
    3576:	29 81       	ldd	r18, Y+1	; 0x01
    3578:	3a 81       	ldd	r19, Y+2	; 0x02
    357a:	ce 01       	movw	r24, r28
    357c:	05 96       	adiw	r24, 0x05	; 5
    357e:	fc 01       	movw	r30, r24
    3580:	e2 0f       	add	r30, r18
    3582:	f3 1f       	adc	r31, r19
    3584:	80 81       	ld	r24, Z
    3586:	88 23       	and	r24, r24
    3588:	89 f3       	breq	.-30     	; 0x356c <LCDWriteInt+0x8c>
    358a:	08 c0       	rjmp	.+16     	; 0x359c <LCDWriteInt+0xbc>
	else
		j=5-field_length;
    358c:	85 e0       	ldi	r24, 0x05	; 5
    358e:	90 e0       	ldi	r25, 0x00	; 0
    3590:	2c 85       	ldd	r18, Y+12	; 0x0c
    3592:	3d 85       	ldd	r19, Y+13	; 0x0d
    3594:	82 1b       	sub	r24, r18
    3596:	93 0b       	sbc	r25, r19
    3598:	9a 83       	std	Y+2, r25	; 0x02
    359a:	89 83       	std	Y+1, r24	; 0x01

	if(val<0) LCDData('-');
    359c:	8a 85       	ldd	r24, Y+10	; 0x0a
    359e:	9b 85       	ldd	r25, Y+11	; 0x0b
    35a0:	99 23       	and	r25, r25
    35a2:	24 f4       	brge	.+8      	; 0x35ac <LCDWriteInt+0xcc>
    35a4:	8d e2       	ldi	r24, 0x2D	; 45
    35a6:	61 e0       	ldi	r22, 0x01	; 1
    35a8:	0e 94 bc 09 	call	0x1378	; 0x1378 <LCDByte>
	for(i=j;i<5;i++)
    35ac:	89 81       	ldd	r24, Y+1	; 0x01
    35ae:	9a 81       	ldd	r25, Y+2	; 0x02
    35b0:	9c 83       	std	Y+4, r25	; 0x04
    35b2:	8b 83       	std	Y+3, r24	; 0x03
    35b4:	11 c0       	rjmp	.+34     	; 0x35d8 <LCDWriteInt+0xf8>
	{
	LCDData(48+str[i]);
    35b6:	2b 81       	ldd	r18, Y+3	; 0x03
    35b8:	3c 81       	ldd	r19, Y+4	; 0x04
    35ba:	ce 01       	movw	r24, r28
    35bc:	05 96       	adiw	r24, 0x05	; 5
    35be:	fc 01       	movw	r30, r24
    35c0:	e2 0f       	add	r30, r18
    35c2:	f3 1f       	adc	r31, r19
    35c4:	80 81       	ld	r24, Z
    35c6:	80 5d       	subi	r24, 0xD0	; 208
    35c8:	61 e0       	ldi	r22, 0x01	; 1
    35ca:	0e 94 bc 09 	call	0x1378	; 0x1378 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
    35ce:	8b 81       	ldd	r24, Y+3	; 0x03
    35d0:	9c 81       	ldd	r25, Y+4	; 0x04
    35d2:	01 96       	adiw	r24, 0x01	; 1
    35d4:	9c 83       	std	Y+4, r25	; 0x04
    35d6:	8b 83       	std	Y+3, r24	; 0x03
    35d8:	8b 81       	ldd	r24, Y+3	; 0x03
    35da:	9c 81       	ldd	r25, Y+4	; 0x04
    35dc:	85 30       	cpi	r24, 0x05	; 5
    35de:	91 05       	cpc	r25, r1
    35e0:	54 f3       	brlt	.-44     	; 0x35b6 <LCDWriteInt+0xd6>
	{
	LCDData(48+str[i]);
	}
}
    35e2:	2d 96       	adiw	r28, 0x0d	; 13
    35e4:	0f b6       	in	r0, 0x3f	; 63
    35e6:	f8 94       	cli
    35e8:	de bf       	out	0x3e, r29	; 62
    35ea:	0f be       	out	0x3f, r0	; 63
    35ec:	cd bf       	out	0x3d, r28	; 61
    35ee:	cf 91       	pop	r28
    35f0:	df 91       	pop	r29
    35f2:	08 95       	ret

000035f4 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
    35f4:	df 93       	push	r29
    35f6:	cf 93       	push	r28
    35f8:	00 d0       	rcall	.+0      	; 0x35fa <LCDGotoXY+0x6>
    35fa:	00 d0       	rcall	.+0      	; 0x35fc <LCDGotoXY+0x8>
    35fc:	cd b7       	in	r28, 0x3d	; 61
    35fe:	de b7       	in	r29, 0x3e	; 62
    3600:	89 83       	std	Y+1, r24	; 0x01
    3602:	6a 83       	std	Y+2, r22	; 0x02
 	if(x>=20) return;
    3604:	89 81       	ldd	r24, Y+1	; 0x01
    3606:	84 31       	cpi	r24, 0x14	; 20
    3608:	60 f5       	brcc	.+88     	; 0x3662 <LCDGotoXY+0x6e>

	#ifdef LCD_TYPE_204

	switch(y)
    360a:	8a 81       	ldd	r24, Y+2	; 0x02
    360c:	28 2f       	mov	r18, r24
    360e:	30 e0       	ldi	r19, 0x00	; 0
    3610:	3c 83       	std	Y+4, r19	; 0x04
    3612:	2b 83       	std	Y+3, r18	; 0x03
    3614:	8b 81       	ldd	r24, Y+3	; 0x03
    3616:	9c 81       	ldd	r25, Y+4	; 0x04
    3618:	81 30       	cpi	r24, 0x01	; 1
    361a:	91 05       	cpc	r25, r1
    361c:	81 f0       	breq	.+32     	; 0x363e <LCDGotoXY+0x4a>
    361e:	2b 81       	ldd	r18, Y+3	; 0x03
    3620:	3c 81       	ldd	r19, Y+4	; 0x04
    3622:	22 30       	cpi	r18, 0x02	; 2
    3624:	31 05       	cpc	r19, r1
    3626:	b4 f0       	brlt	.+44     	; 0x3654 <LCDGotoXY+0x60>
    3628:	8b 81       	ldd	r24, Y+3	; 0x03
    362a:	9c 81       	ldd	r25, Y+4	; 0x04
    362c:	82 30       	cpi	r24, 0x02	; 2
    362e:	91 05       	cpc	r25, r1
    3630:	51 f0       	breq	.+20     	; 0x3646 <LCDGotoXY+0x52>
    3632:	2b 81       	ldd	r18, Y+3	; 0x03
    3634:	3c 81       	ldd	r19, Y+4	; 0x04
    3636:	23 30       	cpi	r18, 0x03	; 3
    3638:	31 05       	cpc	r19, r1
    363a:	49 f0       	breq	.+18     	; 0x364e <LCDGotoXY+0x5a>
    363c:	0b c0       	rjmp	.+22     	; 0x3654 <LCDGotoXY+0x60>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
    363e:	89 81       	ldd	r24, Y+1	; 0x01
    3640:	80 64       	ori	r24, 0x40	; 64
    3642:	89 83       	std	Y+1, r24	; 0x01
    3644:	07 c0       	rjmp	.+14     	; 0x3654 <LCDGotoXY+0x60>
			break;
		case 2:
			x+=0x14;
    3646:	89 81       	ldd	r24, Y+1	; 0x01
    3648:	8c 5e       	subi	r24, 0xEC	; 236
    364a:	89 83       	std	Y+1, r24	; 0x01
    364c:	03 c0       	rjmp	.+6      	; 0x3654 <LCDGotoXY+0x60>
			break;
		case 3:
			x+=0x54;
    364e:	89 81       	ldd	r24, Y+1	; 0x01
    3650:	8c 5a       	subi	r24, 0xAC	; 172
    3652:	89 83       	std	Y+1, r24	; 0x01
			break;
	}

	#endif

	x|=0b10000000;
    3654:	89 81       	ldd	r24, Y+1	; 0x01
    3656:	80 68       	ori	r24, 0x80	; 128
    3658:	89 83       	std	Y+1, r24	; 0x01
  	LCDCmd(x);
    365a:	89 81       	ldd	r24, Y+1	; 0x01
    365c:	60 e0       	ldi	r22, 0x00	; 0
    365e:	0e 94 bc 09 	call	0x1378	; 0x1378 <LCDByte>
}
    3662:	0f 90       	pop	r0
    3664:	0f 90       	pop	r0
    3666:	0f 90       	pop	r0
    3668:	0f 90       	pop	r0
    366a:	cf 91       	pop	r28
    366c:	df 91       	pop	r29
    366e:	08 95       	ret

00003670 <LCDHexDumpXY>:



void LCDHexDumpXY(uint8_t x, uint8_t y,uint8_t d)
{
    3670:	df 93       	push	r29
    3672:	cf 93       	push	r28
    3674:	00 d0       	rcall	.+0      	; 0x3676 <LCDHexDumpXY+0x6>
    3676:	00 d0       	rcall	.+0      	; 0x3678 <LCDHexDumpXY+0x8>
    3678:	cd b7       	in	r28, 0x3d	; 61
    367a:	de b7       	in	r29, 0x3e	; 62
    367c:	8a 83       	std	Y+2, r24	; 0x02
    367e:	6b 83       	std	Y+3, r22	; 0x03
    3680:	4c 83       	std	Y+4, r20	; 0x04
	LCDGotoXY(x,y);
    3682:	8a 81       	ldd	r24, Y+2	; 0x02
    3684:	6b 81       	ldd	r22, Y+3	; 0x03
    3686:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <LCDGotoXY>
	uint8_t byte = '0';
    368a:	80 e3       	ldi	r24, 0x30	; 48
    368c:	89 83       	std	Y+1, r24	; 0x01
	(((d>>4)&0x0F)<=9) ? (byte='0'+((d>>4)&0x0F)) : (byte='A'+ ((d>>4)&0x0F)-0x0A);
    368e:	8c 81       	ldd	r24, Y+4	; 0x04
    3690:	82 95       	swap	r24
    3692:	8f 70       	andi	r24, 0x0F	; 15
    3694:	8a 30       	cpi	r24, 0x0A	; 10
    3696:	30 f4       	brcc	.+12     	; 0x36a4 <LCDHexDumpXY+0x34>
    3698:	8c 81       	ldd	r24, Y+4	; 0x04
    369a:	82 95       	swap	r24
    369c:	8f 70       	andi	r24, 0x0F	; 15
    369e:	80 5d       	subi	r24, 0xD0	; 208
    36a0:	89 83       	std	Y+1, r24	; 0x01
    36a2:	05 c0       	rjmp	.+10     	; 0x36ae <LCDHexDumpXY+0x3e>
    36a4:	8c 81       	ldd	r24, Y+4	; 0x04
    36a6:	82 95       	swap	r24
    36a8:	8f 70       	andi	r24, 0x0F	; 15
    36aa:	89 5c       	subi	r24, 0xC9	; 201
    36ac:	89 83       	std	Y+1, r24	; 0x01
	LCDByte(byte,1);
    36ae:	89 81       	ldd	r24, Y+1	; 0x01
    36b0:	61 e0       	ldi	r22, 0x01	; 1
    36b2:	0e 94 bc 09 	call	0x1378	; 0x1378 <LCDByte>
	LCDBusyLoop();
    36b6:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <LCDBusyLoop>

	((d&0x0F)<=9) ? (byte='0'+ (d&0x0F)) : (byte='A'+ (d&0x0F)-0x0A);
    36ba:	8c 81       	ldd	r24, Y+4	; 0x04
    36bc:	88 2f       	mov	r24, r24
    36be:	90 e0       	ldi	r25, 0x00	; 0
    36c0:	8f 70       	andi	r24, 0x0F	; 15
    36c2:	90 70       	andi	r25, 0x00	; 0
    36c4:	8a 30       	cpi	r24, 0x0A	; 10
    36c6:	91 05       	cpc	r25, r1
    36c8:	2c f4       	brge	.+10     	; 0x36d4 <LCDHexDumpXY+0x64>
    36ca:	8c 81       	ldd	r24, Y+4	; 0x04
    36cc:	8f 70       	andi	r24, 0x0F	; 15
    36ce:	80 5d       	subi	r24, 0xD0	; 208
    36d0:	89 83       	std	Y+1, r24	; 0x01
    36d2:	04 c0       	rjmp	.+8      	; 0x36dc <LCDHexDumpXY+0x6c>
    36d4:	8c 81       	ldd	r24, Y+4	; 0x04
    36d6:	8f 70       	andi	r24, 0x0F	; 15
    36d8:	89 5c       	subi	r24, 0xC9	; 201
    36da:	89 83       	std	Y+1, r24	; 0x01
	LCDByte(byte,1);
    36dc:	89 81       	ldd	r24, Y+1	; 0x01
    36de:	61 e0       	ldi	r22, 0x01	; 1
    36e0:	0e 94 bc 09 	call	0x1378	; 0x1378 <LCDByte>
	LCDBusyLoop();
    36e4:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <LCDBusyLoop>
}
    36e8:	0f 90       	pop	r0
    36ea:	0f 90       	pop	r0
    36ec:	0f 90       	pop	r0
    36ee:	0f 90       	pop	r0
    36f0:	cf 91       	pop	r28
    36f2:	df 91       	pop	r29
    36f4:	08 95       	ret

000036f6 <main>:

#define Card1 	2
#define Card2 	3
#define Card3 	4

int main(void) {
    36f6:	0f 93       	push	r16
    36f8:	1f 93       	push	r17
    36fa:	df 93       	push	r29
    36fc:	cf 93       	push	r28
    36fe:	cd b7       	in	r28, 0x3d	; 61
    3700:	de b7       	in	r29, 0x3e	; 62
    3702:	c2 5d       	subi	r28, 0xD2	; 210
    3704:	d0 40       	sbci	r29, 0x00	; 0
    3706:	0f b6       	in	r0, 0x3f	; 63
    3708:	f8 94       	cli
    370a:	de bf       	out	0x3e, r29	; 62
    370c:	0f be       	out	0x3f, r0	; 63
    370e:	cd bf       	out	0x3d, r28	; 61
	// Ultrasonic
	double distance = 0;
    3710:	fe 01       	movw	r30, r28
    3712:	e9 58       	subi	r30, 0x89	; 137
    3714:	ff 4f       	sbci	r31, 0xFF	; 255
    3716:	80 e0       	ldi	r24, 0x00	; 0
    3718:	90 e0       	ldi	r25, 0x00	; 0
    371a:	a0 e0       	ldi	r26, 0x00	; 0
    371c:	b0 e0       	ldi	r27, 0x00	; 0
    371e:	80 83       	st	Z, r24
    3720:	91 83       	std	Z+1, r25	; 0x01
    3722:	a2 83       	std	Z+2, r26	; 0x02
    3724:	b3 83       	std	Z+3, r27	; 0x03
	char str_ultra[20];
	DDRD |= (1 << 3) | (1 << 4);
    3726:	a1 e3       	ldi	r26, 0x31	; 49
    3728:	b0 e0       	ldi	r27, 0x00	; 0
    372a:	e1 e3       	ldi	r30, 0x31	; 49
    372c:	f0 e0       	ldi	r31, 0x00	; 0
    372e:	80 81       	ld	r24, Z
    3730:	88 61       	ori	r24, 0x18	; 24
    3732:	8c 93       	st	X, r24
	DDRD &= ~(1 << 6);
    3734:	a1 e3       	ldi	r26, 0x31	; 49
    3736:	b0 e0       	ldi	r27, 0x00	; 0
    3738:	e1 e3       	ldi	r30, 0x31	; 49
    373a:	f0 e0       	ldi	r31, 0x00	; 0
    373c:	80 81       	ld	r24, Z
    373e:	8f 7b       	andi	r24, 0xBF	; 191
    3740:	8c 93       	st	X, r24
	PORTD |= (1 << 6);
    3742:	a2 e3       	ldi	r26, 0x32	; 50
    3744:	b0 e0       	ldi	r27, 0x00	; 0
    3746:	e2 e3       	ldi	r30, 0x32	; 50
    3748:	f0 e0       	ldi	r31, 0x00	; 0
    374a:	80 81       	ld	r24, Z
    374c:	80 64       	ori	r24, 0x40	; 64
    374e:	8c 93       	st	X, r24
	//LEDs
	PORTD |= (1 << 3);
    3750:	a2 e3       	ldi	r26, 0x32	; 50
    3752:	b0 e0       	ldi	r27, 0x00	; 0
    3754:	e2 e3       	ldi	r30, 0x32	; 50
    3756:	f0 e0       	ldi	r31, 0x00	; 0
    3758:	80 81       	ld	r24, Z
    375a:	88 60       	ori	r24, 0x08	; 8
    375c:	8c 93       	st	X, r24
	PORTD &= ~(1 << 4);
    375e:	a2 e3       	ldi	r26, 0x32	; 50
    3760:	b0 e0       	ldi	r27, 0x00	; 0
    3762:	e2 e3       	ldi	r30, 0x32	; 50
    3764:	f0 e0       	ldi	r31, 0x00	; 0
    3766:	80 81       	ld	r24, Z
    3768:	8f 7e       	andi	r24, 0xEF	; 239
    376a:	8c 93       	st	X, r24

	//RFID
	uint8_t byte;
	uint8_t str[MAX_LEN];
	//indicator
	DDRD |=(1<<7);
    376c:	a1 e3       	ldi	r26, 0x31	; 49
    376e:	b0 e0       	ldi	r27, 0x00	; 0
    3770:	e1 e3       	ldi	r30, 0x31	; 49
    3772:	f0 e0       	ldi	r31, 0x00	; 0
    3774:	80 81       	ld	r24, Z
    3776:	80 68       	ori	r24, 0x80	; 128
    3778:	8c 93       	st	X, r24

	uint8_t person_recognised = 0;
    377a:	fe 01       	movw	r30, r28
    377c:	eb 58       	subi	r30, 0x8B	; 139
    377e:	ff 4f       	sbci	r31, 0xFF	; 255
    3780:	10 82       	st	Z, r1
	int not_detected = 1;
    3782:	fe 01       	movw	r30, r28
    3784:	ed 58       	subi	r30, 0x8D	; 141
    3786:	ff 4f       	sbci	r31, 0xFF	; 255
    3788:	81 e0       	ldi	r24, 0x01	; 1
    378a:	90 e0       	ldi	r25, 0x00	; 0
    378c:	91 83       	std	Z+1, r25	; 0x01
    378e:	80 83       	st	Z, r24
	int parked = 0;
    3790:	fe 01       	movw	r30, r28
    3792:	ef 58       	subi	r30, 0x8F	; 143
    3794:	ff 4f       	sbci	r31, 0xFF	; 255
    3796:	11 82       	std	Z+1, r1	; 0x01
    3798:	10 82       	st	Z, r1

	//define cards
	uint8_t Card_1[5] = { 0x84, 0x65, 0xac, 0x8b, 0xc6 };
    379a:	ce 01       	movw	r24, r28
    379c:	81 56       	subi	r24, 0x61	; 97
    379e:	9f 4f       	sbci	r25, 0xFF	; 255
    37a0:	cc 53       	subi	r28, 0x3C	; 60
    37a2:	df 4f       	sbci	r29, 0xFF	; 255
    37a4:	99 83       	std	Y+1, r25	; 0x01
    37a6:	88 83       	st	Y, r24
    37a8:	c4 5c       	subi	r28, 0xC4	; 196
    37aa:	d0 40       	sbci	r29, 0x00	; 0
    37ac:	22 e0       	ldi	r18, 0x02	; 2
    37ae:	32 e0       	ldi	r19, 0x02	; 2
    37b0:	ca 53       	subi	r28, 0x3A	; 58
    37b2:	df 4f       	sbci	r29, 0xFF	; 255
    37b4:	39 83       	std	Y+1, r19	; 0x01
    37b6:	28 83       	st	Y, r18
    37b8:	c6 5c       	subi	r28, 0xC6	; 198
    37ba:	d0 40       	sbci	r29, 0x00	; 0
    37bc:	35 e0       	ldi	r19, 0x05	; 5
    37be:	c8 53       	subi	r28, 0x38	; 56
    37c0:	df 4f       	sbci	r29, 0xFF	; 255
    37c2:	38 83       	st	Y, r19
    37c4:	c8 5c       	subi	r28, 0xC8	; 200
    37c6:	d0 40       	sbci	r29, 0x00	; 0
    37c8:	ca 53       	subi	r28, 0x3A	; 58
    37ca:	df 4f       	sbci	r29, 0xFF	; 255
    37cc:	e8 81       	ld	r30, Y
    37ce:	f9 81       	ldd	r31, Y+1	; 0x01
    37d0:	c6 5c       	subi	r28, 0xC6	; 198
    37d2:	d0 40       	sbci	r29, 0x00	; 0
    37d4:	00 80       	ld	r0, Z
    37d6:	ca 53       	subi	r28, 0x3A	; 58
    37d8:	df 4f       	sbci	r29, 0xFF	; 255
    37da:	28 81       	ld	r18, Y
    37dc:	39 81       	ldd	r19, Y+1	; 0x01
    37de:	c6 5c       	subi	r28, 0xC6	; 198
    37e0:	d0 40       	sbci	r29, 0x00	; 0
    37e2:	2f 5f       	subi	r18, 0xFF	; 255
    37e4:	3f 4f       	sbci	r19, 0xFF	; 255
    37e6:	ca 53       	subi	r28, 0x3A	; 58
    37e8:	df 4f       	sbci	r29, 0xFF	; 255
    37ea:	39 83       	std	Y+1, r19	; 0x01
    37ec:	28 83       	st	Y, r18
    37ee:	c6 5c       	subi	r28, 0xC6	; 198
    37f0:	d0 40       	sbci	r29, 0x00	; 0
    37f2:	cc 53       	subi	r28, 0x3C	; 60
    37f4:	df 4f       	sbci	r29, 0xFF	; 255
    37f6:	e8 81       	ld	r30, Y
    37f8:	f9 81       	ldd	r31, Y+1	; 0x01
    37fa:	c4 5c       	subi	r28, 0xC4	; 196
    37fc:	d0 40       	sbci	r29, 0x00	; 0
    37fe:	00 82       	st	Z, r0
    3800:	cc 53       	subi	r28, 0x3C	; 60
    3802:	df 4f       	sbci	r29, 0xFF	; 255
    3804:	28 81       	ld	r18, Y
    3806:	39 81       	ldd	r19, Y+1	; 0x01
    3808:	c4 5c       	subi	r28, 0xC4	; 196
    380a:	d0 40       	sbci	r29, 0x00	; 0
    380c:	2f 5f       	subi	r18, 0xFF	; 255
    380e:	3f 4f       	sbci	r19, 0xFF	; 255
    3810:	cc 53       	subi	r28, 0x3C	; 60
    3812:	df 4f       	sbci	r29, 0xFF	; 255
    3814:	39 83       	std	Y+1, r19	; 0x01
    3816:	28 83       	st	Y, r18
    3818:	c4 5c       	subi	r28, 0xC4	; 196
    381a:	d0 40       	sbci	r29, 0x00	; 0
    381c:	c8 53       	subi	r28, 0x38	; 56
    381e:	df 4f       	sbci	r29, 0xFF	; 255
    3820:	38 81       	ld	r19, Y
    3822:	c8 5c       	subi	r28, 0xC8	; 200
    3824:	d0 40       	sbci	r29, 0x00	; 0
    3826:	31 50       	subi	r19, 0x01	; 1
    3828:	c8 53       	subi	r28, 0x38	; 56
    382a:	df 4f       	sbci	r29, 0xFF	; 255
    382c:	38 83       	st	Y, r19
    382e:	c8 5c       	subi	r28, 0xC8	; 200
    3830:	d0 40       	sbci	r29, 0x00	; 0
    3832:	c8 53       	subi	r28, 0x38	; 56
    3834:	df 4f       	sbci	r29, 0xFF	; 255
    3836:	88 81       	ld	r24, Y
    3838:	c8 5c       	subi	r28, 0xC8	; 200
    383a:	d0 40       	sbci	r29, 0x00	; 0
    383c:	88 23       	and	r24, r24
    383e:	21 f6       	brne	.-120    	; 0x37c8 <main+0xd2>
	uint8_t Card_2[5] = { 0xe1, 0x02, 0xad, 0x8b, 0xc5 };
    3840:	ce 01       	movw	r24, r28
    3842:	8c 55       	subi	r24, 0x5C	; 92
    3844:	9f 4f       	sbci	r25, 0xFF	; 255
    3846:	c7 53       	subi	r28, 0x37	; 55
    3848:	df 4f       	sbci	r29, 0xFF	; 255
    384a:	99 83       	std	Y+1, r25	; 0x01
    384c:	88 83       	st	Y, r24
    384e:	c9 5c       	subi	r28, 0xC9	; 201
    3850:	d0 40       	sbci	r29, 0x00	; 0
    3852:	ed ef       	ldi	r30, 0xFD	; 253
    3854:	f1 e0       	ldi	r31, 0x01	; 1
    3856:	c5 53       	subi	r28, 0x35	; 53
    3858:	df 4f       	sbci	r29, 0xFF	; 255
    385a:	f9 83       	std	Y+1, r31	; 0x01
    385c:	e8 83       	st	Y, r30
    385e:	cb 5c       	subi	r28, 0xCB	; 203
    3860:	d0 40       	sbci	r29, 0x00	; 0
    3862:	f5 e0       	ldi	r31, 0x05	; 5
    3864:	c3 53       	subi	r28, 0x33	; 51
    3866:	df 4f       	sbci	r29, 0xFF	; 255
    3868:	f8 83       	st	Y, r31
    386a:	cd 5c       	subi	r28, 0xCD	; 205
    386c:	d0 40       	sbci	r29, 0x00	; 0
    386e:	c5 53       	subi	r28, 0x35	; 53
    3870:	df 4f       	sbci	r29, 0xFF	; 255
    3872:	e8 81       	ld	r30, Y
    3874:	f9 81       	ldd	r31, Y+1	; 0x01
    3876:	cb 5c       	subi	r28, 0xCB	; 203
    3878:	d0 40       	sbci	r29, 0x00	; 0
    387a:	00 80       	ld	r0, Z
    387c:	c5 53       	subi	r28, 0x35	; 53
    387e:	df 4f       	sbci	r29, 0xFF	; 255
    3880:	28 81       	ld	r18, Y
    3882:	39 81       	ldd	r19, Y+1	; 0x01
    3884:	cb 5c       	subi	r28, 0xCB	; 203
    3886:	d0 40       	sbci	r29, 0x00	; 0
    3888:	2f 5f       	subi	r18, 0xFF	; 255
    388a:	3f 4f       	sbci	r19, 0xFF	; 255
    388c:	c5 53       	subi	r28, 0x35	; 53
    388e:	df 4f       	sbci	r29, 0xFF	; 255
    3890:	39 83       	std	Y+1, r19	; 0x01
    3892:	28 83       	st	Y, r18
    3894:	cb 5c       	subi	r28, 0xCB	; 203
    3896:	d0 40       	sbci	r29, 0x00	; 0
    3898:	c7 53       	subi	r28, 0x37	; 55
    389a:	df 4f       	sbci	r29, 0xFF	; 255
    389c:	e8 81       	ld	r30, Y
    389e:	f9 81       	ldd	r31, Y+1	; 0x01
    38a0:	c9 5c       	subi	r28, 0xC9	; 201
    38a2:	d0 40       	sbci	r29, 0x00	; 0
    38a4:	00 82       	st	Z, r0
    38a6:	c7 53       	subi	r28, 0x37	; 55
    38a8:	df 4f       	sbci	r29, 0xFF	; 255
    38aa:	28 81       	ld	r18, Y
    38ac:	39 81       	ldd	r19, Y+1	; 0x01
    38ae:	c9 5c       	subi	r28, 0xC9	; 201
    38b0:	d0 40       	sbci	r29, 0x00	; 0
    38b2:	2f 5f       	subi	r18, 0xFF	; 255
    38b4:	3f 4f       	sbci	r19, 0xFF	; 255
    38b6:	c7 53       	subi	r28, 0x37	; 55
    38b8:	df 4f       	sbci	r29, 0xFF	; 255
    38ba:	39 83       	std	Y+1, r19	; 0x01
    38bc:	28 83       	st	Y, r18
    38be:	c9 5c       	subi	r28, 0xC9	; 201
    38c0:	d0 40       	sbci	r29, 0x00	; 0
    38c2:	c3 53       	subi	r28, 0x33	; 51
    38c4:	df 4f       	sbci	r29, 0xFF	; 255
    38c6:	38 81       	ld	r19, Y
    38c8:	cd 5c       	subi	r28, 0xCD	; 205
    38ca:	d0 40       	sbci	r29, 0x00	; 0
    38cc:	31 50       	subi	r19, 0x01	; 1
    38ce:	c3 53       	subi	r28, 0x33	; 51
    38d0:	df 4f       	sbci	r29, 0xFF	; 255
    38d2:	38 83       	st	Y, r19
    38d4:	cd 5c       	subi	r28, 0xCD	; 205
    38d6:	d0 40       	sbci	r29, 0x00	; 0
    38d8:	c3 53       	subi	r28, 0x33	; 51
    38da:	df 4f       	sbci	r29, 0xFF	; 255
    38dc:	88 81       	ld	r24, Y
    38de:	cd 5c       	subi	r28, 0xCD	; 205
    38e0:	d0 40       	sbci	r29, 0x00	; 0
    38e2:	88 23       	and	r24, r24
    38e4:	21 f6       	brne	.-120    	; 0x386e <main+0x178>
	uint8_t Card_3[5] = { 0x3e, 0x55, 0xac, 0x8b, 0x4c };
    38e6:	ce 01       	movw	r24, r28
    38e8:	87 55       	subi	r24, 0x57	; 87
    38ea:	9f 4f       	sbci	r25, 0xFF	; 255
    38ec:	c2 53       	subi	r28, 0x32	; 50
    38ee:	df 4f       	sbci	r29, 0xFF	; 255
    38f0:	99 83       	std	Y+1, r25	; 0x01
    38f2:	88 83       	st	Y, r24
    38f4:	ce 5c       	subi	r28, 0xCE	; 206
    38f6:	d0 40       	sbci	r29, 0x00	; 0
    38f8:	e8 ef       	ldi	r30, 0xF8	; 248
    38fa:	f1 e0       	ldi	r31, 0x01	; 1
    38fc:	c0 53       	subi	r28, 0x30	; 48
    38fe:	df 4f       	sbci	r29, 0xFF	; 255
    3900:	f9 83       	std	Y+1, r31	; 0x01
    3902:	e8 83       	st	Y, r30
    3904:	c0 5d       	subi	r28, 0xD0	; 208
    3906:	d0 40       	sbci	r29, 0x00	; 0
    3908:	f5 e0       	ldi	r31, 0x05	; 5
    390a:	ce 52       	subi	r28, 0x2E	; 46
    390c:	df 4f       	sbci	r29, 0xFF	; 255
    390e:	f8 83       	st	Y, r31
    3910:	c2 5d       	subi	r28, 0xD2	; 210
    3912:	d0 40       	sbci	r29, 0x00	; 0
    3914:	c0 53       	subi	r28, 0x30	; 48
    3916:	df 4f       	sbci	r29, 0xFF	; 255
    3918:	e8 81       	ld	r30, Y
    391a:	f9 81       	ldd	r31, Y+1	; 0x01
    391c:	c0 5d       	subi	r28, 0xD0	; 208
    391e:	d0 40       	sbci	r29, 0x00	; 0
    3920:	00 80       	ld	r0, Z
    3922:	c0 53       	subi	r28, 0x30	; 48
    3924:	df 4f       	sbci	r29, 0xFF	; 255
    3926:	28 81       	ld	r18, Y
    3928:	39 81       	ldd	r19, Y+1	; 0x01
    392a:	c0 5d       	subi	r28, 0xD0	; 208
    392c:	d0 40       	sbci	r29, 0x00	; 0
    392e:	2f 5f       	subi	r18, 0xFF	; 255
    3930:	3f 4f       	sbci	r19, 0xFF	; 255
    3932:	c0 53       	subi	r28, 0x30	; 48
    3934:	df 4f       	sbci	r29, 0xFF	; 255
    3936:	39 83       	std	Y+1, r19	; 0x01
    3938:	28 83       	st	Y, r18
    393a:	c0 5d       	subi	r28, 0xD0	; 208
    393c:	d0 40       	sbci	r29, 0x00	; 0
    393e:	c2 53       	subi	r28, 0x32	; 50
    3940:	df 4f       	sbci	r29, 0xFF	; 255
    3942:	e8 81       	ld	r30, Y
    3944:	f9 81       	ldd	r31, Y+1	; 0x01
    3946:	ce 5c       	subi	r28, 0xCE	; 206
    3948:	d0 40       	sbci	r29, 0x00	; 0
    394a:	00 82       	st	Z, r0
    394c:	c2 53       	subi	r28, 0x32	; 50
    394e:	df 4f       	sbci	r29, 0xFF	; 255
    3950:	28 81       	ld	r18, Y
    3952:	39 81       	ldd	r19, Y+1	; 0x01
    3954:	ce 5c       	subi	r28, 0xCE	; 206
    3956:	d0 40       	sbci	r29, 0x00	; 0
    3958:	2f 5f       	subi	r18, 0xFF	; 255
    395a:	3f 4f       	sbci	r19, 0xFF	; 255
    395c:	c2 53       	subi	r28, 0x32	; 50
    395e:	df 4f       	sbci	r29, 0xFF	; 255
    3960:	39 83       	std	Y+1, r19	; 0x01
    3962:	28 83       	st	Y, r18
    3964:	ce 5c       	subi	r28, 0xCE	; 206
    3966:	d0 40       	sbci	r29, 0x00	; 0
    3968:	ce 52       	subi	r28, 0x2E	; 46
    396a:	df 4f       	sbci	r29, 0xFF	; 255
    396c:	38 81       	ld	r19, Y
    396e:	c2 5d       	subi	r28, 0xD2	; 210
    3970:	d0 40       	sbci	r29, 0x00	; 0
    3972:	31 50       	subi	r19, 0x01	; 1
    3974:	ce 52       	subi	r28, 0x2E	; 46
    3976:	df 4f       	sbci	r29, 0xFF	; 255
    3978:	38 83       	st	Y, r19
    397a:	c2 5d       	subi	r28, 0xD2	; 210
    397c:	d0 40       	sbci	r29, 0x00	; 0
    397e:	ce 52       	subi	r28, 0x2E	; 46
    3980:	df 4f       	sbci	r29, 0xFF	; 255
    3982:	88 81       	ld	r24, Y
    3984:	c2 5d       	subi	r28, 0xD2	; 210
    3986:	d0 40       	sbci	r29, 0x00	; 0
    3988:	88 23       	and	r24, r24
    398a:	21 f6       	brne	.-120    	; 0x3914 <main+0x21e>
    398c:	fe 01       	movw	r30, r28
    398e:	e3 59       	subi	r30, 0x93	; 147
    3990:	ff 4f       	sbci	r31, 0xFF	; 255
    3992:	80 e0       	ldi	r24, 0x00	; 0
    3994:	90 e0       	ldi	r25, 0x00	; 0
    3996:	a8 e4       	ldi	r26, 0x48	; 72
    3998:	b2 e4       	ldi	r27, 0x42	; 66
    399a:	80 83       	st	Z, r24
    399c:	91 83       	std	Z+1, r25	; 0x01
    399e:	a2 83       	std	Z+2, r26	; 0x02
    39a0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39a2:	8e 01       	movw	r16, r28
    39a4:	07 59       	subi	r16, 0x97	; 151
    39a6:	1f 4f       	sbci	r17, 0xFF	; 255
    39a8:	fe 01       	movw	r30, r28
    39aa:	e3 59       	subi	r30, 0x93	; 147
    39ac:	ff 4f       	sbci	r31, 0xFF	; 255
    39ae:	60 81       	ld	r22, Z
    39b0:	71 81       	ldd	r23, Z+1	; 0x01
    39b2:	82 81       	ldd	r24, Z+2	; 0x02
    39b4:	93 81       	ldd	r25, Z+3	; 0x03
    39b6:	20 e0       	ldi	r18, 0x00	; 0
    39b8:	30 e0       	ldi	r19, 0x00	; 0
    39ba:	4a ef       	ldi	r20, 0xFA	; 250
    39bc:	54 e4       	ldi	r21, 0x44	; 68
    39be:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    39c2:	dc 01       	movw	r26, r24
    39c4:	cb 01       	movw	r24, r22
    39c6:	f8 01       	movw	r30, r16
    39c8:	80 83       	st	Z, r24
    39ca:	91 83       	std	Z+1, r25	; 0x01
    39cc:	a2 83       	std	Z+2, r26	; 0x02
    39ce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    39d0:	fe 01       	movw	r30, r28
    39d2:	e7 59       	subi	r30, 0x97	; 151
    39d4:	ff 4f       	sbci	r31, 0xFF	; 255
    39d6:	60 81       	ld	r22, Z
    39d8:	71 81       	ldd	r23, Z+1	; 0x01
    39da:	82 81       	ldd	r24, Z+2	; 0x02
    39dc:	93 81       	ldd	r25, Z+3	; 0x03
    39de:	20 e0       	ldi	r18, 0x00	; 0
    39e0:	30 e0       	ldi	r19, 0x00	; 0
    39e2:	40 e8       	ldi	r20, 0x80	; 128
    39e4:	5f e3       	ldi	r21, 0x3F	; 63
    39e6:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    39ea:	88 23       	and	r24, r24
    39ec:	44 f4       	brge	.+16     	; 0x39fe <main+0x308>
		__ticks = 1;
    39ee:	fe 01       	movw	r30, r28
    39f0:	e9 59       	subi	r30, 0x99	; 153
    39f2:	ff 4f       	sbci	r31, 0xFF	; 255
    39f4:	81 e0       	ldi	r24, 0x01	; 1
    39f6:	90 e0       	ldi	r25, 0x00	; 0
    39f8:	91 83       	std	Z+1, r25	; 0x01
    39fa:	80 83       	st	Z, r24
    39fc:	64 c0       	rjmp	.+200    	; 0x3ac6 <main+0x3d0>
	else if (__tmp > 65535)
    39fe:	fe 01       	movw	r30, r28
    3a00:	e7 59       	subi	r30, 0x97	; 151
    3a02:	ff 4f       	sbci	r31, 0xFF	; 255
    3a04:	60 81       	ld	r22, Z
    3a06:	71 81       	ldd	r23, Z+1	; 0x01
    3a08:	82 81       	ldd	r24, Z+2	; 0x02
    3a0a:	93 81       	ldd	r25, Z+3	; 0x03
    3a0c:	20 e0       	ldi	r18, 0x00	; 0
    3a0e:	3f ef       	ldi	r19, 0xFF	; 255
    3a10:	4f e7       	ldi	r20, 0x7F	; 127
    3a12:	57 e4       	ldi	r21, 0x47	; 71
    3a14:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3a18:	18 16       	cp	r1, r24
    3a1a:	0c f0       	brlt	.+2      	; 0x3a1e <main+0x328>
    3a1c:	43 c0       	rjmp	.+134    	; 0x3aa4 <main+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a1e:	fe 01       	movw	r30, r28
    3a20:	e3 59       	subi	r30, 0x93	; 147
    3a22:	ff 4f       	sbci	r31, 0xFF	; 255
    3a24:	60 81       	ld	r22, Z
    3a26:	71 81       	ldd	r23, Z+1	; 0x01
    3a28:	82 81       	ldd	r24, Z+2	; 0x02
    3a2a:	93 81       	ldd	r25, Z+3	; 0x03
    3a2c:	20 e0       	ldi	r18, 0x00	; 0
    3a2e:	30 e0       	ldi	r19, 0x00	; 0
    3a30:	40 e2       	ldi	r20, 0x20	; 32
    3a32:	51 e4       	ldi	r21, 0x41	; 65
    3a34:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3a38:	dc 01       	movw	r26, r24
    3a3a:	cb 01       	movw	r24, r22
    3a3c:	8e 01       	movw	r16, r28
    3a3e:	09 59       	subi	r16, 0x99	; 153
    3a40:	1f 4f       	sbci	r17, 0xFF	; 255
    3a42:	bc 01       	movw	r22, r24
    3a44:	cd 01       	movw	r24, r26
    3a46:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3a4a:	dc 01       	movw	r26, r24
    3a4c:	cb 01       	movw	r24, r22
    3a4e:	f8 01       	movw	r30, r16
    3a50:	91 83       	std	Z+1, r25	; 0x01
    3a52:	80 83       	st	Z, r24
    3a54:	1f c0       	rjmp	.+62     	; 0x3a94 <main+0x39e>
    3a56:	fe 01       	movw	r30, r28
    3a58:	eb 59       	subi	r30, 0x9B	; 155
    3a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a5c:	88 ec       	ldi	r24, 0xC8	; 200
    3a5e:	90 e0       	ldi	r25, 0x00	; 0
    3a60:	91 83       	std	Z+1, r25	; 0x01
    3a62:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3a64:	fe 01       	movw	r30, r28
    3a66:	eb 59       	subi	r30, 0x9B	; 155
    3a68:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6a:	80 81       	ld	r24, Z
    3a6c:	91 81       	ldd	r25, Z+1	; 0x01
    3a6e:	01 97       	sbiw	r24, 0x01	; 1
    3a70:	f1 f7       	brne	.-4      	; 0x3a6e <main+0x378>
    3a72:	fe 01       	movw	r30, r28
    3a74:	eb 59       	subi	r30, 0x9B	; 155
    3a76:	ff 4f       	sbci	r31, 0xFF	; 255
    3a78:	91 83       	std	Z+1, r25	; 0x01
    3a7a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a7c:	de 01       	movw	r26, r28
    3a7e:	a9 59       	subi	r26, 0x99	; 153
    3a80:	bf 4f       	sbci	r27, 0xFF	; 255
    3a82:	fe 01       	movw	r30, r28
    3a84:	e9 59       	subi	r30, 0x99	; 153
    3a86:	ff 4f       	sbci	r31, 0xFF	; 255
    3a88:	80 81       	ld	r24, Z
    3a8a:	91 81       	ldd	r25, Z+1	; 0x01
    3a8c:	01 97       	sbiw	r24, 0x01	; 1
    3a8e:	11 96       	adiw	r26, 0x01	; 1
    3a90:	9c 93       	st	X, r25
    3a92:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a94:	fe 01       	movw	r30, r28
    3a96:	e9 59       	subi	r30, 0x99	; 153
    3a98:	ff 4f       	sbci	r31, 0xFF	; 255
    3a9a:	80 81       	ld	r24, Z
    3a9c:	91 81       	ldd	r25, Z+1	; 0x01
    3a9e:	00 97       	sbiw	r24, 0x00	; 0
    3aa0:	d1 f6       	brne	.-76     	; 0x3a56 <main+0x360>
    3aa2:	27 c0       	rjmp	.+78     	; 0x3af2 <main+0x3fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3aa4:	8e 01       	movw	r16, r28
    3aa6:	09 59       	subi	r16, 0x99	; 153
    3aa8:	1f 4f       	sbci	r17, 0xFF	; 255
    3aaa:	fe 01       	movw	r30, r28
    3aac:	e7 59       	subi	r30, 0x97	; 151
    3aae:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab0:	60 81       	ld	r22, Z
    3ab2:	71 81       	ldd	r23, Z+1	; 0x01
    3ab4:	82 81       	ldd	r24, Z+2	; 0x02
    3ab6:	93 81       	ldd	r25, Z+3	; 0x03
    3ab8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3abc:	dc 01       	movw	r26, r24
    3abe:	cb 01       	movw	r24, r22
    3ac0:	f8 01       	movw	r30, r16
    3ac2:	91 83       	std	Z+1, r25	; 0x01
    3ac4:	80 83       	st	Z, r24
    3ac6:	de 01       	movw	r26, r28
    3ac8:	ad 59       	subi	r26, 0x9D	; 157
    3aca:	bf 4f       	sbci	r27, 0xFF	; 255
    3acc:	fe 01       	movw	r30, r28
    3ace:	e9 59       	subi	r30, 0x99	; 153
    3ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad2:	80 81       	ld	r24, Z
    3ad4:	91 81       	ldd	r25, Z+1	; 0x01
    3ad6:	8d 93       	st	X+, r24
    3ad8:	9c 93       	st	X, r25
    3ada:	fe 01       	movw	r30, r28
    3adc:	ed 59       	subi	r30, 0x9D	; 157
    3ade:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae0:	80 81       	ld	r24, Z
    3ae2:	91 81       	ldd	r25, Z+1	; 0x01
    3ae4:	01 97       	sbiw	r24, 0x01	; 1
    3ae6:	f1 f7       	brne	.-4      	; 0x3ae4 <main+0x3ee>
    3ae8:	fe 01       	movw	r30, r28
    3aea:	ed 59       	subi	r30, 0x9D	; 157
    3aec:	ff 4f       	sbci	r31, 0xFF	; 255
    3aee:	91 83       	std	Z+1, r25	; 0x01
    3af0:	80 83       	st	Z, r24

	_delay_ms(50);
	LCDInit(LS_BLINK);
    3af2:	81 e0       	ldi	r24, 0x01	; 1
    3af4:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <LCDInit>
	LCDWriteStringXY(2, 0, "RFID Reader");
    3af8:	82 e0       	ldi	r24, 0x02	; 2
    3afa:	60 e0       	ldi	r22, 0x00	; 0
    3afc:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <LCDGotoXY>
    3b00:	80 e6       	ldi	r24, 0x60	; 96
    3b02:	90 e0       	ldi	r25, 0x00	; 0
    3b04:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCDWriteString>
	LCDWriteStringXY(5, 1, VERSION_STR);
    3b08:	85 e0       	ldi	r24, 0x05	; 5
    3b0a:	61 e0       	ldi	r22, 0x01	; 1
    3b0c:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <LCDGotoXY>
    3b10:	8c e6       	ldi	r24, 0x6C	; 108
    3b12:	90 e0       	ldi	r25, 0x00	; 0
    3b14:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCDWriteString>

	//Spi_INIT();
	spi_init();
    3b18:	0e 94 30 28 	call	0x5060	; 0x5060 <spi_init>

	//init reader
	mfrc522_init();
    3b1c:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <mfrc522_init>
    3b20:	fe 01       	movw	r30, r28
    3b22:	e1 5a       	subi	r30, 0xA1	; 161
    3b24:	ff 4f       	sbci	r31, 0xFF	; 255
    3b26:	80 e0       	ldi	r24, 0x00	; 0
    3b28:	90 e8       	ldi	r25, 0x80	; 128
    3b2a:	ab eb       	ldi	r26, 0xBB	; 187
    3b2c:	b4 e4       	ldi	r27, 0x44	; 68
    3b2e:	80 83       	st	Z, r24
    3b30:	91 83       	std	Z+1, r25	; 0x01
    3b32:	a2 83       	std	Z+2, r26	; 0x02
    3b34:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b36:	8e 01       	movw	r16, r28
    3b38:	05 5a       	subi	r16, 0xA5	; 165
    3b3a:	1f 4f       	sbci	r17, 0xFF	; 255
    3b3c:	fe 01       	movw	r30, r28
    3b3e:	e1 5a       	subi	r30, 0xA1	; 161
    3b40:	ff 4f       	sbci	r31, 0xFF	; 255
    3b42:	60 81       	ld	r22, Z
    3b44:	71 81       	ldd	r23, Z+1	; 0x01
    3b46:	82 81       	ldd	r24, Z+2	; 0x02
    3b48:	93 81       	ldd	r25, Z+3	; 0x03
    3b4a:	20 e0       	ldi	r18, 0x00	; 0
    3b4c:	30 e0       	ldi	r19, 0x00	; 0
    3b4e:	4a ef       	ldi	r20, 0xFA	; 250
    3b50:	54 e4       	ldi	r21, 0x44	; 68
    3b52:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3b56:	dc 01       	movw	r26, r24
    3b58:	cb 01       	movw	r24, r22
    3b5a:	f8 01       	movw	r30, r16
    3b5c:	80 83       	st	Z, r24
    3b5e:	91 83       	std	Z+1, r25	; 0x01
    3b60:	a2 83       	std	Z+2, r26	; 0x02
    3b62:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b64:	fe 01       	movw	r30, r28
    3b66:	e5 5a       	subi	r30, 0xA5	; 165
    3b68:	ff 4f       	sbci	r31, 0xFF	; 255
    3b6a:	60 81       	ld	r22, Z
    3b6c:	71 81       	ldd	r23, Z+1	; 0x01
    3b6e:	82 81       	ldd	r24, Z+2	; 0x02
    3b70:	93 81       	ldd	r25, Z+3	; 0x03
    3b72:	20 e0       	ldi	r18, 0x00	; 0
    3b74:	30 e0       	ldi	r19, 0x00	; 0
    3b76:	40 e8       	ldi	r20, 0x80	; 128
    3b78:	5f e3       	ldi	r21, 0x3F	; 63
    3b7a:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3b7e:	88 23       	and	r24, r24
    3b80:	44 f4       	brge	.+16     	; 0x3b92 <main+0x49c>
		__ticks = 1;
    3b82:	fe 01       	movw	r30, r28
    3b84:	e7 5a       	subi	r30, 0xA7	; 167
    3b86:	ff 4f       	sbci	r31, 0xFF	; 255
    3b88:	81 e0       	ldi	r24, 0x01	; 1
    3b8a:	90 e0       	ldi	r25, 0x00	; 0
    3b8c:	91 83       	std	Z+1, r25	; 0x01
    3b8e:	80 83       	st	Z, r24
    3b90:	64 c0       	rjmp	.+200    	; 0x3c5a <main+0x564>
	else if (__tmp > 65535)
    3b92:	fe 01       	movw	r30, r28
    3b94:	e5 5a       	subi	r30, 0xA5	; 165
    3b96:	ff 4f       	sbci	r31, 0xFF	; 255
    3b98:	60 81       	ld	r22, Z
    3b9a:	71 81       	ldd	r23, Z+1	; 0x01
    3b9c:	82 81       	ldd	r24, Z+2	; 0x02
    3b9e:	93 81       	ldd	r25, Z+3	; 0x03
    3ba0:	20 e0       	ldi	r18, 0x00	; 0
    3ba2:	3f ef       	ldi	r19, 0xFF	; 255
    3ba4:	4f e7       	ldi	r20, 0x7F	; 127
    3ba6:	57 e4       	ldi	r21, 0x47	; 71
    3ba8:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3bac:	18 16       	cp	r1, r24
    3bae:	0c f0       	brlt	.+2      	; 0x3bb2 <main+0x4bc>
    3bb0:	43 c0       	rjmp	.+134    	; 0x3c38 <main+0x542>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bb2:	fe 01       	movw	r30, r28
    3bb4:	e1 5a       	subi	r30, 0xA1	; 161
    3bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb8:	60 81       	ld	r22, Z
    3bba:	71 81       	ldd	r23, Z+1	; 0x01
    3bbc:	82 81       	ldd	r24, Z+2	; 0x02
    3bbe:	93 81       	ldd	r25, Z+3	; 0x03
    3bc0:	20 e0       	ldi	r18, 0x00	; 0
    3bc2:	30 e0       	ldi	r19, 0x00	; 0
    3bc4:	40 e2       	ldi	r20, 0x20	; 32
    3bc6:	51 e4       	ldi	r21, 0x41	; 65
    3bc8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3bcc:	dc 01       	movw	r26, r24
    3bce:	cb 01       	movw	r24, r22
    3bd0:	8e 01       	movw	r16, r28
    3bd2:	07 5a       	subi	r16, 0xA7	; 167
    3bd4:	1f 4f       	sbci	r17, 0xFF	; 255
    3bd6:	bc 01       	movw	r22, r24
    3bd8:	cd 01       	movw	r24, r26
    3bda:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3bde:	dc 01       	movw	r26, r24
    3be0:	cb 01       	movw	r24, r22
    3be2:	f8 01       	movw	r30, r16
    3be4:	91 83       	std	Z+1, r25	; 0x01
    3be6:	80 83       	st	Z, r24
    3be8:	1f c0       	rjmp	.+62     	; 0x3c28 <main+0x532>
    3bea:	fe 01       	movw	r30, r28
    3bec:	e9 5a       	subi	r30, 0xA9	; 169
    3bee:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf0:	88 ec       	ldi	r24, 0xC8	; 200
    3bf2:	90 e0       	ldi	r25, 0x00	; 0
    3bf4:	91 83       	std	Z+1, r25	; 0x01
    3bf6:	80 83       	st	Z, r24
    3bf8:	fe 01       	movw	r30, r28
    3bfa:	e9 5a       	subi	r30, 0xA9	; 169
    3bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bfe:	80 81       	ld	r24, Z
    3c00:	91 81       	ldd	r25, Z+1	; 0x01
    3c02:	01 97       	sbiw	r24, 0x01	; 1
    3c04:	f1 f7       	brne	.-4      	; 0x3c02 <main+0x50c>
    3c06:	fe 01       	movw	r30, r28
    3c08:	e9 5a       	subi	r30, 0xA9	; 169
    3c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c0c:	91 83       	std	Z+1, r25	; 0x01
    3c0e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c10:	de 01       	movw	r26, r28
    3c12:	a7 5a       	subi	r26, 0xA7	; 167
    3c14:	bf 4f       	sbci	r27, 0xFF	; 255
    3c16:	fe 01       	movw	r30, r28
    3c18:	e7 5a       	subi	r30, 0xA7	; 167
    3c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c1c:	80 81       	ld	r24, Z
    3c1e:	91 81       	ldd	r25, Z+1	; 0x01
    3c20:	01 97       	sbiw	r24, 0x01	; 1
    3c22:	11 96       	adiw	r26, 0x01	; 1
    3c24:	9c 93       	st	X, r25
    3c26:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c28:	fe 01       	movw	r30, r28
    3c2a:	e7 5a       	subi	r30, 0xA7	; 167
    3c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c2e:	80 81       	ld	r24, Z
    3c30:	91 81       	ldd	r25, Z+1	; 0x01
    3c32:	00 97       	sbiw	r24, 0x00	; 0
    3c34:	d1 f6       	brne	.-76     	; 0x3bea <main+0x4f4>
    3c36:	27 c0       	rjmp	.+78     	; 0x3c86 <main+0x590>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c38:	8e 01       	movw	r16, r28
    3c3a:	07 5a       	subi	r16, 0xA7	; 167
    3c3c:	1f 4f       	sbci	r17, 0xFF	; 255
    3c3e:	fe 01       	movw	r30, r28
    3c40:	e5 5a       	subi	r30, 0xA5	; 165
    3c42:	ff 4f       	sbci	r31, 0xFF	; 255
    3c44:	60 81       	ld	r22, Z
    3c46:	71 81       	ldd	r23, Z+1	; 0x01
    3c48:	82 81       	ldd	r24, Z+2	; 0x02
    3c4a:	93 81       	ldd	r25, Z+3	; 0x03
    3c4c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3c50:	dc 01       	movw	r26, r24
    3c52:	cb 01       	movw	r24, r22
    3c54:	f8 01       	movw	r30, r16
    3c56:	91 83       	std	Z+1, r25	; 0x01
    3c58:	80 83       	st	Z, r24
    3c5a:	de 01       	movw	r26, r28
    3c5c:	ab 5a       	subi	r26, 0xAB	; 171
    3c5e:	bf 4f       	sbci	r27, 0xFF	; 255
    3c60:	fe 01       	movw	r30, r28
    3c62:	e7 5a       	subi	r30, 0xA7	; 167
    3c64:	ff 4f       	sbci	r31, 0xFF	; 255
    3c66:	80 81       	ld	r24, Z
    3c68:	91 81       	ldd	r25, Z+1	; 0x01
    3c6a:	8d 93       	st	X+, r24
    3c6c:	9c 93       	st	X, r25
    3c6e:	fe 01       	movw	r30, r28
    3c70:	eb 5a       	subi	r30, 0xAB	; 171
    3c72:	ff 4f       	sbci	r31, 0xFF	; 255
    3c74:	80 81       	ld	r24, Z
    3c76:	91 81       	ldd	r25, Z+1	; 0x01
    3c78:	01 97       	sbiw	r24, 0x01	; 1
    3c7a:	f1 f7       	brne	.-4      	; 0x3c78 <main+0x582>
    3c7c:	fe 01       	movw	r30, r28
    3c7e:	eb 5a       	subi	r30, 0xAB	; 171
    3c80:	ff 4f       	sbci	r31, 0xFF	; 255
    3c82:	91 83       	std	Z+1, r25	; 0x01
    3c84:	80 83       	st	Z, r24
	_delay_ms(1500);
	LCDClear();
    3c86:	81 e0       	ldi	r24, 0x01	; 1
    3c88:	60 e0       	ldi	r22, 0x00	; 0
    3c8a:	0e 94 bc 09 	call	0x1378	; 0x1378 <LCDByte>

	//check version of the reader

	byte = mfrc522_read(VersionReg);
    3c8e:	87 e3       	ldi	r24, 0x37	; 55
    3c90:	0e 94 06 26 	call	0x4c0c	; 0x4c0c <mfrc522_read>
    3c94:	fe 01       	movw	r30, r28
    3c96:	ea 58       	subi	r30, 0x8A	; 138
    3c98:	ff 4f       	sbci	r31, 0xFF	; 255
    3c9a:	80 83       	st	Z, r24
    3c9c:	fe 01       	movw	r30, r28
    3c9e:	ef 5a       	subi	r30, 0xAF	; 175
    3ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca2:	80 e0       	ldi	r24, 0x00	; 0
    3ca4:	90 e0       	ldi	r25, 0x00	; 0
    3ca6:	aa e7       	ldi	r26, 0x7A	; 122
    3ca8:	b4 e4       	ldi	r27, 0x44	; 68
    3caa:	80 83       	st	Z, r24
    3cac:	91 83       	std	Z+1, r25	; 0x01
    3cae:	a2 83       	std	Z+2, r26	; 0x02
    3cb0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cb2:	8e 01       	movw	r16, r28
    3cb4:	03 5b       	subi	r16, 0xB3	; 179
    3cb6:	1f 4f       	sbci	r17, 0xFF	; 255
    3cb8:	fe 01       	movw	r30, r28
    3cba:	ef 5a       	subi	r30, 0xAF	; 175
    3cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    3cbe:	60 81       	ld	r22, Z
    3cc0:	71 81       	ldd	r23, Z+1	; 0x01
    3cc2:	82 81       	ldd	r24, Z+2	; 0x02
    3cc4:	93 81       	ldd	r25, Z+3	; 0x03
    3cc6:	20 e0       	ldi	r18, 0x00	; 0
    3cc8:	30 e0       	ldi	r19, 0x00	; 0
    3cca:	4a ef       	ldi	r20, 0xFA	; 250
    3ccc:	54 e4       	ldi	r21, 0x44	; 68
    3cce:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3cd2:	dc 01       	movw	r26, r24
    3cd4:	cb 01       	movw	r24, r22
    3cd6:	f8 01       	movw	r30, r16
    3cd8:	80 83       	st	Z, r24
    3cda:	91 83       	std	Z+1, r25	; 0x01
    3cdc:	a2 83       	std	Z+2, r26	; 0x02
    3cde:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ce0:	fe 01       	movw	r30, r28
    3ce2:	e3 5b       	subi	r30, 0xB3	; 179
    3ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce6:	60 81       	ld	r22, Z
    3ce8:	71 81       	ldd	r23, Z+1	; 0x01
    3cea:	82 81       	ldd	r24, Z+2	; 0x02
    3cec:	93 81       	ldd	r25, Z+3	; 0x03
    3cee:	20 e0       	ldi	r18, 0x00	; 0
    3cf0:	30 e0       	ldi	r19, 0x00	; 0
    3cf2:	40 e8       	ldi	r20, 0x80	; 128
    3cf4:	5f e3       	ldi	r21, 0x3F	; 63
    3cf6:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3cfa:	88 23       	and	r24, r24
    3cfc:	44 f4       	brge	.+16     	; 0x3d0e <main+0x618>
		__ticks = 1;
    3cfe:	fe 01       	movw	r30, r28
    3d00:	e5 5b       	subi	r30, 0xB5	; 181
    3d02:	ff 4f       	sbci	r31, 0xFF	; 255
    3d04:	81 e0       	ldi	r24, 0x01	; 1
    3d06:	90 e0       	ldi	r25, 0x00	; 0
    3d08:	91 83       	std	Z+1, r25	; 0x01
    3d0a:	80 83       	st	Z, r24
    3d0c:	64 c0       	rjmp	.+200    	; 0x3dd6 <main+0x6e0>
	else if (__tmp > 65535)
    3d0e:	fe 01       	movw	r30, r28
    3d10:	e3 5b       	subi	r30, 0xB3	; 179
    3d12:	ff 4f       	sbci	r31, 0xFF	; 255
    3d14:	60 81       	ld	r22, Z
    3d16:	71 81       	ldd	r23, Z+1	; 0x01
    3d18:	82 81       	ldd	r24, Z+2	; 0x02
    3d1a:	93 81       	ldd	r25, Z+3	; 0x03
    3d1c:	20 e0       	ldi	r18, 0x00	; 0
    3d1e:	3f ef       	ldi	r19, 0xFF	; 255
    3d20:	4f e7       	ldi	r20, 0x7F	; 127
    3d22:	57 e4       	ldi	r21, 0x47	; 71
    3d24:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3d28:	18 16       	cp	r1, r24
    3d2a:	0c f0       	brlt	.+2      	; 0x3d2e <main+0x638>
    3d2c:	43 c0       	rjmp	.+134    	; 0x3db4 <main+0x6be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d2e:	fe 01       	movw	r30, r28
    3d30:	ef 5a       	subi	r30, 0xAF	; 175
    3d32:	ff 4f       	sbci	r31, 0xFF	; 255
    3d34:	60 81       	ld	r22, Z
    3d36:	71 81       	ldd	r23, Z+1	; 0x01
    3d38:	82 81       	ldd	r24, Z+2	; 0x02
    3d3a:	93 81       	ldd	r25, Z+3	; 0x03
    3d3c:	20 e0       	ldi	r18, 0x00	; 0
    3d3e:	30 e0       	ldi	r19, 0x00	; 0
    3d40:	40 e2       	ldi	r20, 0x20	; 32
    3d42:	51 e4       	ldi	r21, 0x41	; 65
    3d44:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3d48:	dc 01       	movw	r26, r24
    3d4a:	cb 01       	movw	r24, r22
    3d4c:	8e 01       	movw	r16, r28
    3d4e:	05 5b       	subi	r16, 0xB5	; 181
    3d50:	1f 4f       	sbci	r17, 0xFF	; 255
    3d52:	bc 01       	movw	r22, r24
    3d54:	cd 01       	movw	r24, r26
    3d56:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3d5a:	dc 01       	movw	r26, r24
    3d5c:	cb 01       	movw	r24, r22
    3d5e:	f8 01       	movw	r30, r16
    3d60:	91 83       	std	Z+1, r25	; 0x01
    3d62:	80 83       	st	Z, r24
    3d64:	1f c0       	rjmp	.+62     	; 0x3da4 <main+0x6ae>
    3d66:	fe 01       	movw	r30, r28
    3d68:	e7 5b       	subi	r30, 0xB7	; 183
    3d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d6c:	88 ec       	ldi	r24, 0xC8	; 200
    3d6e:	90 e0       	ldi	r25, 0x00	; 0
    3d70:	91 83       	std	Z+1, r25	; 0x01
    3d72:	80 83       	st	Z, r24
    3d74:	fe 01       	movw	r30, r28
    3d76:	e7 5b       	subi	r30, 0xB7	; 183
    3d78:	ff 4f       	sbci	r31, 0xFF	; 255
    3d7a:	80 81       	ld	r24, Z
    3d7c:	91 81       	ldd	r25, Z+1	; 0x01
    3d7e:	01 97       	sbiw	r24, 0x01	; 1
    3d80:	f1 f7       	brne	.-4      	; 0x3d7e <main+0x688>
    3d82:	fe 01       	movw	r30, r28
    3d84:	e7 5b       	subi	r30, 0xB7	; 183
    3d86:	ff 4f       	sbci	r31, 0xFF	; 255
    3d88:	91 83       	std	Z+1, r25	; 0x01
    3d8a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d8c:	de 01       	movw	r26, r28
    3d8e:	a5 5b       	subi	r26, 0xB5	; 181
    3d90:	bf 4f       	sbci	r27, 0xFF	; 255
    3d92:	fe 01       	movw	r30, r28
    3d94:	e5 5b       	subi	r30, 0xB5	; 181
    3d96:	ff 4f       	sbci	r31, 0xFF	; 255
    3d98:	80 81       	ld	r24, Z
    3d9a:	91 81       	ldd	r25, Z+1	; 0x01
    3d9c:	01 97       	sbiw	r24, 0x01	; 1
    3d9e:	11 96       	adiw	r26, 0x01	; 1
    3da0:	9c 93       	st	X, r25
    3da2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3da4:	fe 01       	movw	r30, r28
    3da6:	e5 5b       	subi	r30, 0xB5	; 181
    3da8:	ff 4f       	sbci	r31, 0xFF	; 255
    3daa:	80 81       	ld	r24, Z
    3dac:	91 81       	ldd	r25, Z+1	; 0x01
    3dae:	00 97       	sbiw	r24, 0x00	; 0
    3db0:	d1 f6       	brne	.-76     	; 0x3d66 <main+0x670>
    3db2:	28 c0       	rjmp	.+80     	; 0x3e04 <main+0x70e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3db4:	8e 01       	movw	r16, r28
    3db6:	05 5b       	subi	r16, 0xB5	; 181
    3db8:	1f 4f       	sbci	r17, 0xFF	; 255
    3dba:	fe 01       	movw	r30, r28
    3dbc:	e3 5b       	subi	r30, 0xB3	; 179
    3dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc0:	60 81       	ld	r22, Z
    3dc2:	71 81       	ldd	r23, Z+1	; 0x01
    3dc4:	82 81       	ldd	r24, Z+2	; 0x02
    3dc6:	93 81       	ldd	r25, Z+3	; 0x03
    3dc8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3dcc:	dc 01       	movw	r26, r24
    3dce:	cb 01       	movw	r24, r22
    3dd0:	f8 01       	movw	r30, r16
    3dd2:	91 83       	std	Z+1, r25	; 0x01
    3dd4:	80 83       	st	Z, r24
    3dd6:	de 01       	movw	r26, r28
    3dd8:	a9 5b       	subi	r26, 0xB9	; 185
    3dda:	bf 4f       	sbci	r27, 0xFF	; 255
    3ddc:	fe 01       	movw	r30, r28
    3dde:	e5 5b       	subi	r30, 0xB5	; 181
    3de0:	ff 4f       	sbci	r31, 0xFF	; 255
    3de2:	80 81       	ld	r24, Z
    3de4:	91 81       	ldd	r25, Z+1	; 0x01
    3de6:	11 96       	adiw	r26, 0x01	; 1
    3de8:	9c 93       	st	X, r25
    3dea:	8e 93       	st	-X, r24
    3dec:	fe 01       	movw	r30, r28
    3dee:	e9 5b       	subi	r30, 0xB9	; 185
    3df0:	ff 4f       	sbci	r31, 0xFF	; 255
    3df2:	80 81       	ld	r24, Z
    3df4:	91 81       	ldd	r25, Z+1	; 0x01
    3df6:	01 97       	sbiw	r24, 0x01	; 1
    3df8:	f1 f7       	brne	.-4      	; 0x3df6 <main+0x700>
    3dfa:	fe 01       	movw	r30, r28
    3dfc:	e9 5b       	subi	r30, 0xB9	; 185
    3dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    3e00:	91 83       	std	Z+1, r25	; 0x01
    3e02:	80 83       	st	Z, r24
	_delay_ms(1000);
	if (byte == 0x92) {
    3e04:	fe 01       	movw	r30, r28
    3e06:	ea 58       	subi	r30, 0x8A	; 138
    3e08:	ff 4f       	sbci	r31, 0xFF	; 255
    3e0a:	80 81       	ld	r24, Z
    3e0c:	82 39       	cpi	r24, 0x92	; 146
    3e0e:	89 f4       	brne	.+34     	; 0x3e32 <main+0x73c>
		LCDWriteStringXY(2, 0, "MIFARE RC522v2");
    3e10:	82 e0       	ldi	r24, 0x02	; 2
    3e12:	60 e0       	ldi	r22, 0x00	; 0
    3e14:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <LCDGotoXY>
    3e18:	82 e7       	ldi	r24, 0x72	; 114
    3e1a:	90 e0       	ldi	r25, 0x00	; 0
    3e1c:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCDWriteString>
		LCDWriteStringXY(4, 1, "Detected");
    3e20:	84 e0       	ldi	r24, 0x04	; 4
    3e22:	61 e0       	ldi	r22, 0x01	; 1
    3e24:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <LCDGotoXY>
    3e28:	81 e8       	ldi	r24, 0x81	; 129
    3e2a:	90 e0       	ldi	r25, 0x00	; 0
    3e2c:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCDWriteString>
    3e30:	25 c0       	rjmp	.+74     	; 0x3e7c <main+0x786>
	} else if (byte == 0x91 || byte == 0x90) {
    3e32:	fe 01       	movw	r30, r28
    3e34:	ea 58       	subi	r30, 0x8A	; 138
    3e36:	ff 4f       	sbci	r31, 0xFF	; 255
    3e38:	80 81       	ld	r24, Z
    3e3a:	81 39       	cpi	r24, 0x91	; 145
    3e3c:	31 f0       	breq	.+12     	; 0x3e4a <main+0x754>
    3e3e:	fe 01       	movw	r30, r28
    3e40:	ea 58       	subi	r30, 0x8A	; 138
    3e42:	ff 4f       	sbci	r31, 0xFF	; 255
    3e44:	80 81       	ld	r24, Z
    3e46:	80 39       	cpi	r24, 0x90	; 144
    3e48:	89 f4       	brne	.+34     	; 0x3e6c <main+0x776>
		LCDWriteStringXY(2, 0, "MIFARE RC522v1");
    3e4a:	82 e0       	ldi	r24, 0x02	; 2
    3e4c:	60 e0       	ldi	r22, 0x00	; 0
    3e4e:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <LCDGotoXY>
    3e52:	8a e8       	ldi	r24, 0x8A	; 138
    3e54:	90 e0       	ldi	r25, 0x00	; 0
    3e56:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCDWriteString>
		LCDWriteStringXY(4, 1, "Detected");
    3e5a:	84 e0       	ldi	r24, 0x04	; 4
    3e5c:	61 e0       	ldi	r22, 0x01	; 1
    3e5e:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <LCDGotoXY>
    3e62:	81 e8       	ldi	r24, 0x81	; 129
    3e64:	90 e0       	ldi	r25, 0x00	; 0
    3e66:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCDWriteString>
    3e6a:	08 c0       	rjmp	.+16     	; 0x3e7c <main+0x786>
	} else {
		LCDWriteStringXY(0, 0, "No reader found");
    3e6c:	80 e0       	ldi	r24, 0x00	; 0
    3e6e:	60 e0       	ldi	r22, 0x00	; 0
    3e70:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <LCDGotoXY>
    3e74:	89 e9       	ldi	r24, 0x99	; 153
    3e76:	90 e0       	ldi	r25, 0x00	; 0
    3e78:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCDWriteString>
    3e7c:	fe 01       	movw	r30, r28
    3e7e:	ed 5b       	subi	r30, 0xBD	; 189
    3e80:	ff 4f       	sbci	r31, 0xFF	; 255
    3e82:	80 e0       	ldi	r24, 0x00	; 0
    3e84:	90 e8       	ldi	r25, 0x80	; 128
    3e86:	ab eb       	ldi	r26, 0xBB	; 187
    3e88:	b4 e4       	ldi	r27, 0x44	; 68
    3e8a:	80 83       	st	Z, r24
    3e8c:	91 83       	std	Z+1, r25	; 0x01
    3e8e:	a2 83       	std	Z+2, r26	; 0x02
    3e90:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e92:	8e 01       	movw	r16, r28
    3e94:	01 5c       	subi	r16, 0xC1	; 193
    3e96:	1f 4f       	sbci	r17, 0xFF	; 255
    3e98:	fe 01       	movw	r30, r28
    3e9a:	ed 5b       	subi	r30, 0xBD	; 189
    3e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e9e:	60 81       	ld	r22, Z
    3ea0:	71 81       	ldd	r23, Z+1	; 0x01
    3ea2:	82 81       	ldd	r24, Z+2	; 0x02
    3ea4:	93 81       	ldd	r25, Z+3	; 0x03
    3ea6:	20 e0       	ldi	r18, 0x00	; 0
    3ea8:	30 e0       	ldi	r19, 0x00	; 0
    3eaa:	4a ef       	ldi	r20, 0xFA	; 250
    3eac:	54 e4       	ldi	r21, 0x44	; 68
    3eae:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3eb2:	dc 01       	movw	r26, r24
    3eb4:	cb 01       	movw	r24, r22
    3eb6:	f8 01       	movw	r30, r16
    3eb8:	80 83       	st	Z, r24
    3eba:	91 83       	std	Z+1, r25	; 0x01
    3ebc:	a2 83       	std	Z+2, r26	; 0x02
    3ebe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ec0:	fe 01       	movw	r30, r28
    3ec2:	ff 96       	adiw	r30, 0x3f	; 63
    3ec4:	60 81       	ld	r22, Z
    3ec6:	71 81       	ldd	r23, Z+1	; 0x01
    3ec8:	82 81       	ldd	r24, Z+2	; 0x02
    3eca:	93 81       	ldd	r25, Z+3	; 0x03
    3ecc:	20 e0       	ldi	r18, 0x00	; 0
    3ece:	30 e0       	ldi	r19, 0x00	; 0
    3ed0:	40 e8       	ldi	r20, 0x80	; 128
    3ed2:	5f e3       	ldi	r21, 0x3F	; 63
    3ed4:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3ed8:	88 23       	and	r24, r24
    3eda:	2c f4       	brge	.+10     	; 0x3ee6 <main+0x7f0>
		__ticks = 1;
    3edc:	81 e0       	ldi	r24, 0x01	; 1
    3ede:	90 e0       	ldi	r25, 0x00	; 0
    3ee0:	9e af       	std	Y+62, r25	; 0x3e
    3ee2:	8d af       	std	Y+61, r24	; 0x3d
    3ee4:	46 c0       	rjmp	.+140    	; 0x3f72 <main+0x87c>
	else if (__tmp > 65535)
    3ee6:	fe 01       	movw	r30, r28
    3ee8:	ff 96       	adiw	r30, 0x3f	; 63
    3eea:	60 81       	ld	r22, Z
    3eec:	71 81       	ldd	r23, Z+1	; 0x01
    3eee:	82 81       	ldd	r24, Z+2	; 0x02
    3ef0:	93 81       	ldd	r25, Z+3	; 0x03
    3ef2:	20 e0       	ldi	r18, 0x00	; 0
    3ef4:	3f ef       	ldi	r19, 0xFF	; 255
    3ef6:	4f e7       	ldi	r20, 0x7F	; 127
    3ef8:	57 e4       	ldi	r21, 0x47	; 71
    3efa:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3efe:	18 16       	cp	r1, r24
    3f00:	64 f5       	brge	.+88     	; 0x3f5a <main+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f02:	fe 01       	movw	r30, r28
    3f04:	ed 5b       	subi	r30, 0xBD	; 189
    3f06:	ff 4f       	sbci	r31, 0xFF	; 255
    3f08:	60 81       	ld	r22, Z
    3f0a:	71 81       	ldd	r23, Z+1	; 0x01
    3f0c:	82 81       	ldd	r24, Z+2	; 0x02
    3f0e:	93 81       	ldd	r25, Z+3	; 0x03
    3f10:	20 e0       	ldi	r18, 0x00	; 0
    3f12:	30 e0       	ldi	r19, 0x00	; 0
    3f14:	40 e2       	ldi	r20, 0x20	; 32
    3f16:	51 e4       	ldi	r21, 0x41	; 65
    3f18:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3f1c:	dc 01       	movw	r26, r24
    3f1e:	cb 01       	movw	r24, r22
    3f20:	bc 01       	movw	r22, r24
    3f22:	cd 01       	movw	r24, r26
    3f24:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3f28:	dc 01       	movw	r26, r24
    3f2a:	cb 01       	movw	r24, r22
    3f2c:	9e af       	std	Y+62, r25	; 0x3e
    3f2e:	8d af       	std	Y+61, r24	; 0x3d
    3f30:	0f c0       	rjmp	.+30     	; 0x3f50 <main+0x85a>
    3f32:	88 ec       	ldi	r24, 0xC8	; 200
    3f34:	90 e0       	ldi	r25, 0x00	; 0
    3f36:	9c af       	std	Y+60, r25	; 0x3c
    3f38:	8b af       	std	Y+59, r24	; 0x3b
    3f3a:	8b ad       	ldd	r24, Y+59	; 0x3b
    3f3c:	9c ad       	ldd	r25, Y+60	; 0x3c
    3f3e:	01 97       	sbiw	r24, 0x01	; 1
    3f40:	f1 f7       	brne	.-4      	; 0x3f3e <main+0x848>
    3f42:	9c af       	std	Y+60, r25	; 0x3c
    3f44:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f46:	8d ad       	ldd	r24, Y+61	; 0x3d
    3f48:	9e ad       	ldd	r25, Y+62	; 0x3e
    3f4a:	01 97       	sbiw	r24, 0x01	; 1
    3f4c:	9e af       	std	Y+62, r25	; 0x3e
    3f4e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f50:	8d ad       	ldd	r24, Y+61	; 0x3d
    3f52:	9e ad       	ldd	r25, Y+62	; 0x3e
    3f54:	00 97       	sbiw	r24, 0x00	; 0
    3f56:	69 f7       	brne	.-38     	; 0x3f32 <main+0x83c>
    3f58:	16 c0       	rjmp	.+44     	; 0x3f86 <main+0x890>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f5a:	fe 01       	movw	r30, r28
    3f5c:	ff 96       	adiw	r30, 0x3f	; 63
    3f5e:	60 81       	ld	r22, Z
    3f60:	71 81       	ldd	r23, Z+1	; 0x01
    3f62:	82 81       	ldd	r24, Z+2	; 0x02
    3f64:	93 81       	ldd	r25, Z+3	; 0x03
    3f66:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3f6a:	dc 01       	movw	r26, r24
    3f6c:	cb 01       	movw	r24, r22
    3f6e:	9e af       	std	Y+62, r25	; 0x3e
    3f70:	8d af       	std	Y+61, r24	; 0x3d
    3f72:	8d ad       	ldd	r24, Y+61	; 0x3d
    3f74:	9e ad       	ldd	r25, Y+62	; 0x3e
    3f76:	9a af       	std	Y+58, r25	; 0x3a
    3f78:	89 af       	std	Y+57, r24	; 0x39
    3f7a:	89 ad       	ldd	r24, Y+57	; 0x39
    3f7c:	9a ad       	ldd	r25, Y+58	; 0x3a
    3f7e:	01 97       	sbiw	r24, 0x01	; 1
    3f80:	f1 f7       	brne	.-4      	; 0x3f7e <main+0x888>
    3f82:	9a af       	std	Y+58, r25	; 0x3a
    3f84:	89 af       	std	Y+57, r24	; 0x39
	}

	_delay_ms(1500);
	LCDClear();
    3f86:	81 e0       	ldi	r24, 0x01	; 1
    3f88:	60 e0       	ldi	r22, 0x00	; 0
    3f8a:	0e 94 bc 09 	call	0x1378	; 0x1378 <LCDByte>

	while (1) {
		// Ultrasonic
		if (!not_detected) {
    3f8e:	fe 01       	movw	r30, r28
    3f90:	ed 58       	subi	r30, 0x8D	; 141
    3f92:	ff 4f       	sbci	r31, 0xFF	; 255
    3f94:	80 81       	ld	r24, Z
    3f96:	91 81       	ldd	r25, Z+1	; 0x01
    3f98:	00 97       	sbiw	r24, 0x00	; 0
    3f9a:	09 f0       	breq	.+2      	; 0x3f9e <main+0x8a8>
    3f9c:	41 c1       	rjmp	.+642    	; 0x4220 <main+0xb2a>
			dtostrf(distance, 2, 2, str_ultra);
    3f9e:	fe 01       	movw	r30, r28
    3fa0:	e9 58       	subi	r30, 0x89	; 137
    3fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa4:	80 81       	ld	r24, Z
    3fa6:	91 81       	ldd	r25, Z+1	; 0x01
    3fa8:	a2 81       	ldd	r26, Z+2	; 0x02
    3faa:	b3 81       	ldd	r27, Z+3	; 0x03
    3fac:	fe 01       	movw	r30, r28
    3fae:	e5 58       	subi	r30, 0x85	; 133
    3fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb2:	bc 01       	movw	r22, r24
    3fb4:	cd 01       	movw	r24, r26
    3fb6:	42 e0       	ldi	r20, 0x02	; 2
    3fb8:	22 e0       	ldi	r18, 0x02	; 2
    3fba:	8f 01       	movw	r16, r30
    3fbc:	0e 94 d2 28 	call	0x51a4	; 0x51a4 <dtostrf>
			distance = Ultrasonic_Read();
    3fc0:	0e 94 16 08 	call	0x102c	; 0x102c <Ultrasonic_Read>
    3fc4:	dc 01       	movw	r26, r24
    3fc6:	cb 01       	movw	r24, r22
    3fc8:	fe 01       	movw	r30, r28
    3fca:	e9 58       	subi	r30, 0x89	; 137
    3fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    3fce:	80 83       	st	Z, r24
    3fd0:	91 83       	std	Z+1, r25	; 0x01
    3fd2:	a2 83       	std	Z+2, r26	; 0x02
    3fd4:	b3 83       	std	Z+3, r27	; 0x03
			LCDWriteStringXY(0, 0, "Distance = ");
    3fd6:	80 e0       	ldi	r24, 0x00	; 0
    3fd8:	60 e0       	ldi	r22, 0x00	; 0
    3fda:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <LCDGotoXY>
    3fde:	89 ea       	ldi	r24, 0xA9	; 169
    3fe0:	90 e0       	ldi	r25, 0x00	; 0
    3fe2:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCDWriteString>
			LCDWriteStringXY(10, 0, str_ultra);
    3fe6:	8a e0       	ldi	r24, 0x0A	; 10
    3fe8:	60 e0       	ldi	r22, 0x00	; 0
    3fea:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <LCDGotoXY>
    3fee:	ce 01       	movw	r24, r28
    3ff0:	85 58       	subi	r24, 0x85	; 133
    3ff2:	9f 4f       	sbci	r25, 0xFF	; 255
    3ff4:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCDWriteString>
			if (distance <= 5) {
    3ff8:	fe 01       	movw	r30, r28
    3ffa:	e9 58       	subi	r30, 0x89	; 137
    3ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ffe:	60 81       	ld	r22, Z
    4000:	71 81       	ldd	r23, Z+1	; 0x01
    4002:	82 81       	ldd	r24, Z+2	; 0x02
    4004:	93 81       	ldd	r25, Z+3	; 0x03
    4006:	20 e0       	ldi	r18, 0x00	; 0
    4008:	30 e0       	ldi	r19, 0x00	; 0
    400a:	40 ea       	ldi	r20, 0xA0	; 160
    400c:	50 e4       	ldi	r21, 0x40	; 64
    400e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__lesf2>
    4012:	18 16       	cp	r1, r24
    4014:	0c f4       	brge	.+2      	; 0x4018 <main+0x922>
    4016:	87 c0       	rjmp	.+270    	; 0x4126 <main+0xa30>
				// disable Green led and enable Red led
				PORTD |= (1 << 4);
    4018:	a2 e3       	ldi	r26, 0x32	; 50
    401a:	b0 e0       	ldi	r27, 0x00	; 0
    401c:	e2 e3       	ldi	r30, 0x32	; 50
    401e:	f0 e0       	ldi	r31, 0x00	; 0
    4020:	80 81       	ld	r24, Z
    4022:	80 61       	ori	r24, 0x10	; 16
    4024:	8c 93       	st	X, r24
				PORTD &= ~(1 << 3);
    4026:	a2 e3       	ldi	r26, 0x32	; 50
    4028:	b0 e0       	ldi	r27, 0x00	; 0
    402a:	e2 e3       	ldi	r30, 0x32	; 50
    402c:	f0 e0       	ldi	r31, 0x00	; 0
    402e:	80 81       	ld	r24, Z
    4030:	87 7f       	andi	r24, 0xF7	; 247
    4032:	8c 93       	st	X, r24
    4034:	80 e0       	ldi	r24, 0x00	; 0
    4036:	90 e4       	ldi	r25, 0x40	; 64
    4038:	ac e9       	ldi	r26, 0x9C	; 156
    403a:	b5 e4       	ldi	r27, 0x45	; 69
    403c:	8d ab       	std	Y+53, r24	; 0x35
    403e:	9e ab       	std	Y+54, r25	; 0x36
    4040:	af ab       	std	Y+55, r26	; 0x37
    4042:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4044:	6d a9       	ldd	r22, Y+53	; 0x35
    4046:	7e a9       	ldd	r23, Y+54	; 0x36
    4048:	8f a9       	ldd	r24, Y+55	; 0x37
    404a:	98 ad       	ldd	r25, Y+56	; 0x38
    404c:	20 e0       	ldi	r18, 0x00	; 0
    404e:	30 e0       	ldi	r19, 0x00	; 0
    4050:	4a ef       	ldi	r20, 0xFA	; 250
    4052:	54 e4       	ldi	r21, 0x44	; 68
    4054:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    4058:	dc 01       	movw	r26, r24
    405a:	cb 01       	movw	r24, r22
    405c:	89 ab       	std	Y+49, r24	; 0x31
    405e:	9a ab       	std	Y+50, r25	; 0x32
    4060:	ab ab       	std	Y+51, r26	; 0x33
    4062:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4064:	69 a9       	ldd	r22, Y+49	; 0x31
    4066:	7a a9       	ldd	r23, Y+50	; 0x32
    4068:	8b a9       	ldd	r24, Y+51	; 0x33
    406a:	9c a9       	ldd	r25, Y+52	; 0x34
    406c:	20 e0       	ldi	r18, 0x00	; 0
    406e:	30 e0       	ldi	r19, 0x00	; 0
    4070:	40 e8       	ldi	r20, 0x80	; 128
    4072:	5f e3       	ldi	r21, 0x3F	; 63
    4074:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    4078:	88 23       	and	r24, r24
    407a:	2c f4       	brge	.+10     	; 0x4086 <main+0x990>
		__ticks = 1;
    407c:	81 e0       	ldi	r24, 0x01	; 1
    407e:	90 e0       	ldi	r25, 0x00	; 0
    4080:	98 ab       	std	Y+48, r25	; 0x30
    4082:	8f a7       	std	Y+47, r24	; 0x2f
    4084:	3f c0       	rjmp	.+126    	; 0x4104 <main+0xa0e>
	else if (__tmp > 65535)
    4086:	69 a9       	ldd	r22, Y+49	; 0x31
    4088:	7a a9       	ldd	r23, Y+50	; 0x32
    408a:	8b a9       	ldd	r24, Y+51	; 0x33
    408c:	9c a9       	ldd	r25, Y+52	; 0x34
    408e:	20 e0       	ldi	r18, 0x00	; 0
    4090:	3f ef       	ldi	r19, 0xFF	; 255
    4092:	4f e7       	ldi	r20, 0x7F	; 127
    4094:	57 e4       	ldi	r21, 0x47	; 71
    4096:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    409a:	18 16       	cp	r1, r24
    409c:	4c f5       	brge	.+82     	; 0x40f0 <main+0x9fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    409e:	6d a9       	ldd	r22, Y+53	; 0x35
    40a0:	7e a9       	ldd	r23, Y+54	; 0x36
    40a2:	8f a9       	ldd	r24, Y+55	; 0x37
    40a4:	98 ad       	ldd	r25, Y+56	; 0x38
    40a6:	20 e0       	ldi	r18, 0x00	; 0
    40a8:	30 e0       	ldi	r19, 0x00	; 0
    40aa:	40 e2       	ldi	r20, 0x20	; 32
    40ac:	51 e4       	ldi	r21, 0x41	; 65
    40ae:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    40b2:	dc 01       	movw	r26, r24
    40b4:	cb 01       	movw	r24, r22
    40b6:	bc 01       	movw	r22, r24
    40b8:	cd 01       	movw	r24, r26
    40ba:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    40be:	dc 01       	movw	r26, r24
    40c0:	cb 01       	movw	r24, r22
    40c2:	98 ab       	std	Y+48, r25	; 0x30
    40c4:	8f a7       	std	Y+47, r24	; 0x2f
    40c6:	0f c0       	rjmp	.+30     	; 0x40e6 <main+0x9f0>
    40c8:	88 ec       	ldi	r24, 0xC8	; 200
    40ca:	90 e0       	ldi	r25, 0x00	; 0
    40cc:	9e a7       	std	Y+46, r25	; 0x2e
    40ce:	8d a7       	std	Y+45, r24	; 0x2d
    40d0:	8d a5       	ldd	r24, Y+45	; 0x2d
    40d2:	9e a5       	ldd	r25, Y+46	; 0x2e
    40d4:	01 97       	sbiw	r24, 0x01	; 1
    40d6:	f1 f7       	brne	.-4      	; 0x40d4 <main+0x9de>
    40d8:	9e a7       	std	Y+46, r25	; 0x2e
    40da:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    40de:	98 a9       	ldd	r25, Y+48	; 0x30
    40e0:	01 97       	sbiw	r24, 0x01	; 1
    40e2:	98 ab       	std	Y+48, r25	; 0x30
    40e4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    40e8:	98 a9       	ldd	r25, Y+48	; 0x30
    40ea:	00 97       	sbiw	r24, 0x00	; 0
    40ec:	69 f7       	brne	.-38     	; 0x40c8 <main+0x9d2>
    40ee:	14 c0       	rjmp	.+40     	; 0x4118 <main+0xa22>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40f0:	69 a9       	ldd	r22, Y+49	; 0x31
    40f2:	7a a9       	ldd	r23, Y+50	; 0x32
    40f4:	8b a9       	ldd	r24, Y+51	; 0x33
    40f6:	9c a9       	ldd	r25, Y+52	; 0x34
    40f8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    40fc:	dc 01       	movw	r26, r24
    40fe:	cb 01       	movw	r24, r22
    4100:	98 ab       	std	Y+48, r25	; 0x30
    4102:	8f a7       	std	Y+47, r24	; 0x2f
    4104:	8f a5       	ldd	r24, Y+47	; 0x2f
    4106:	98 a9       	ldd	r25, Y+48	; 0x30
    4108:	9c a7       	std	Y+44, r25	; 0x2c
    410a:	8b a7       	std	Y+43, r24	; 0x2b
    410c:	8b a5       	ldd	r24, Y+43	; 0x2b
    410e:	9c a5       	ldd	r25, Y+44	; 0x2c
    4110:	01 97       	sbiw	r24, 0x01	; 1
    4112:	f1 f7       	brne	.-4      	; 0x4110 <main+0xa1a>
    4114:	9c a7       	std	Y+44, r25	; 0x2c
    4116:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(5000);
				parked = 1;
    4118:	fe 01       	movw	r30, r28
    411a:	ef 58       	subi	r30, 0x8F	; 143
    411c:	ff 4f       	sbci	r31, 0xFF	; 255
    411e:	81 e0       	ldi	r24, 0x01	; 1
    4120:	90 e0       	ldi	r25, 0x00	; 0
    4122:	91 83       	std	Z+1, r25	; 0x01
    4124:	80 83       	st	Z, r24
			}
			if ((!not_detected) && parked) {
    4126:	fe 01       	movw	r30, r28
    4128:	ed 58       	subi	r30, 0x8D	; 141
    412a:	ff 4f       	sbci	r31, 0xFF	; 255
    412c:	80 81       	ld	r24, Z
    412e:	91 81       	ldd	r25, Z+1	; 0x01
    4130:	00 97       	sbiw	r24, 0x00	; 0
    4132:	09 f0       	breq	.+2      	; 0x4136 <main+0xa40>
    4134:	75 c0       	rjmp	.+234    	; 0x4220 <main+0xb2a>
    4136:	fe 01       	movw	r30, r28
    4138:	ef 58       	subi	r30, 0x8F	; 143
    413a:	ff 4f       	sbci	r31, 0xFF	; 255
    413c:	80 81       	ld	r24, Z
    413e:	91 81       	ldd	r25, Z+1	; 0x01
    4140:	00 97       	sbiw	r24, 0x00	; 0
    4142:	09 f4       	brne	.+2      	; 0x4146 <main+0xa50>
    4144:	6d c0       	rjmp	.+218    	; 0x4220 <main+0xb2a>
				if (distance >= 7) {
    4146:	fe 01       	movw	r30, r28
    4148:	e9 58       	subi	r30, 0x89	; 137
    414a:	ff 4f       	sbci	r31, 0xFF	; 255
    414c:	60 81       	ld	r22, Z
    414e:	71 81       	ldd	r23, Z+1	; 0x01
    4150:	82 81       	ldd	r24, Z+2	; 0x02
    4152:	93 81       	ldd	r25, Z+3	; 0x03
    4154:	20 e0       	ldi	r18, 0x00	; 0
    4156:	30 e0       	ldi	r19, 0x00	; 0
    4158:	40 ee       	ldi	r20, 0xE0	; 224
    415a:	50 e4       	ldi	r21, 0x40	; 64
    415c:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gesf2>
    4160:	88 23       	and	r24, r24
    4162:	0c f4       	brge	.+2      	; 0x4166 <main+0xa70>
    4164:	5d c0       	rjmp	.+186    	; 0x4220 <main+0xb2a>
					// reset all system
					PORTB &= ~((1 << 1) |(1<<2));
    4166:	a8 e3       	ldi	r26, 0x38	; 56
    4168:	b0 e0       	ldi	r27, 0x00	; 0
    416a:	e8 e3       	ldi	r30, 0x38	; 56
    416c:	f0 e0       	ldi	r31, 0x00	; 0
    416e:	80 81       	ld	r24, Z
    4170:	89 7f       	andi	r24, 0xF9	; 249
    4172:	8c 93       	st	X, r24
					Tmer0_OVF_Count = 0;
    4174:	10 92 0c 02 	sts	0x020C, r1
    4178:	10 92 0d 02 	sts	0x020D, r1
    417c:	10 92 0e 02 	sts	0x020E, r1
    4180:	10 92 0f 02 	sts	0x020F, r1
					Seven_Left = 0;
    4184:	10 92 10 02 	sts	0x0210, r1
    4188:	10 92 11 02 	sts	0x0211, r1
    418c:	10 92 12 02 	sts	0x0212, r1
    4190:	10 92 13 02 	sts	0x0213, r1
					Seven_Right = 0;
    4194:	10 92 14 02 	sts	0x0214, r1
    4198:	10 92 15 02 	sts	0x0215, r1
    419c:	10 92 16 02 	sts	0x0216, r1
    41a0:	10 92 17 02 	sts	0x0217, r1
					COUNTER = 0;
    41a4:	10 92 18 02 	sts	0x0218, r1
    41a8:	10 92 19 02 	sts	0x0219, r1
    41ac:	10 92 1a 02 	sts	0x021A, r1
    41b0:	10 92 1b 02 	sts	0x021B, r1
					LCDClear();
    41b4:	81 e0       	ldi	r24, 0x01	; 1
    41b6:	60 e0       	ldi	r22, 0x00	; 0
    41b8:	0e 94 bc 09 	call	0x1378	; 0x1378 <LCDByte>
					not_detected = 1;
    41bc:	fe 01       	movw	r30, r28
    41be:	ed 58       	subi	r30, 0x8D	; 141
    41c0:	ff 4f       	sbci	r31, 0xFF	; 255
    41c2:	81 e0       	ldi	r24, 0x01	; 1
    41c4:	90 e0       	ldi	r25, 0x00	; 0
    41c6:	91 83       	std	Z+1, r25	; 0x01
    41c8:	80 83       	st	Z, r24
					person_recognised = 0;
    41ca:	fe 01       	movw	r30, r28
    41cc:	eb 58       	subi	r30, 0x8B	; 139
    41ce:	ff 4f       	sbci	r31, 0xFF	; 255
    41d0:	10 82       	st	Z, r1
					parked = 0;
    41d2:	fe 01       	movw	r30, r28
    41d4:	ef 58       	subi	r30, 0x8F	; 143
    41d6:	ff 4f       	sbci	r31, 0xFF	; 255
    41d8:	11 82       	std	Z+1, r1	; 0x01
    41da:	10 82       	st	Z, r1
					DDRB |= (1 << 1) | (1 << 2);
    41dc:	a7 e3       	ldi	r26, 0x37	; 55
    41de:	b0 e0       	ldi	r27, 0x00	; 0
    41e0:	e7 e3       	ldi	r30, 0x37	; 55
    41e2:	f0 e0       	ldi	r31, 0x00	; 0
    41e4:	80 81       	ld	r24, Z
    41e6:	86 60       	ori	r24, 0x06	; 6
    41e8:	8c 93       	st	X, r24
					PORTD |= (1 << 3);
    41ea:	a2 e3       	ldi	r26, 0x32	; 50
    41ec:	b0 e0       	ldi	r27, 0x00	; 0
    41ee:	e2 e3       	ldi	r30, 0x32	; 50
    41f0:	f0 e0       	ldi	r31, 0x00	; 0
    41f2:	80 81       	ld	r24, Z
    41f4:	88 60       	ori	r24, 0x08	; 8
    41f6:	8c 93       	st	X, r24
					PORTD &= ~(1 << 4);
    41f8:	a2 e3       	ldi	r26, 0x32	; 50
    41fa:	b0 e0       	ldi	r27, 0x00	; 0
    41fc:	e2 e3       	ldi	r30, 0x32	; 50
    41fe:	f0 e0       	ldi	r31, 0x00	; 0
    4200:	80 81       	ld	r24, Z
    4202:	8f 7e       	andi	r24, 0xEF	; 239
    4204:	8c 93       	st	X, r24
					TCCR0 = 0;
    4206:	e3 e5       	ldi	r30, 0x53	; 83
    4208:	f0 e0       	ldi	r31, 0x00	; 0
    420a:	10 82       	st	Z, r1
					TCCR0 = 0;
    420c:	e3 e5       	ldi	r30, 0x53	; 83
    420e:	f0 e0       	ldi	r31, 0x00	; 0
    4210:	10 82       	st	Z, r1
					TIMSK = 0;
    4212:	e9 e5       	ldi	r30, 0x59	; 89
    4214:	f0 e0       	ldi	r31, 0x00	; 0
    4216:	10 82       	st	Z, r1
					TCNT0 = 0;
    4218:	e2 e5       	ldi	r30, 0x52	; 82
    421a:	f0 e0       	ldi	r31, 0x00	; 0
    421c:	10 82       	st	Z, r1
					cli();
    421e:	f8 94       	cli
				}
			}
		}
		// RFID
		if (not_detected) {
    4220:	fe 01       	movw	r30, r28
    4222:	ed 58       	subi	r30, 0x8D	; 141
    4224:	ff 4f       	sbci	r31, 0xFF	; 255
    4226:	80 81       	ld	r24, Z
    4228:	91 81       	ldd	r25, Z+1	; 0x01
    422a:	00 97       	sbiw	r24, 0x00	; 0
    422c:	09 f4       	brne	.+2      	; 0x4230 <main+0xb3a>
    422e:	af ce       	rjmp	.-674    	; 0x3f8e <main+0x898>
			LCDClear();
    4230:	81 e0       	ldi	r24, 0x01	; 1
    4232:	60 e0       	ldi	r22, 0x00	; 0
    4234:	0e 94 bc 09 	call	0x1378	; 0x1378 <LCDByte>
			LCDWriteStringXY(1, 0, "Show Your Card");
    4238:	81 e0       	ldi	r24, 0x01	; 1
    423a:	60 e0       	ldi	r22, 0x00	; 0
    423c:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <LCDGotoXY>
    4240:	85 eb       	ldi	r24, 0xB5	; 181
    4242:	90 e0       	ldi	r25, 0x00	; 0
    4244:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCDWriteString>
			byte = mfrc522_request(PICC_REQALL, str);
    4248:	9e 01       	movw	r18, r28
    424a:	21 57       	subi	r18, 0x71	; 113
    424c:	3f 4f       	sbci	r19, 0xFF	; 255
    424e:	82 e5       	ldi	r24, 0x52	; 82
    4250:	b9 01       	movw	r22, r18
    4252:	0e 94 38 26 	call	0x4c70	; 0x4c70 <mfrc522_request>
    4256:	fe 01       	movw	r30, r28
    4258:	ea 58       	subi	r30, 0x8A	; 138
    425a:	ff 4f       	sbci	r31, 0xFF	; 255
    425c:	80 83       	st	Z, r24

			if (byte == CARD_FOUND) {
    425e:	fe 01       	movw	r30, r28
    4260:	ea 58       	subi	r30, 0x8A	; 138
    4262:	ff 4f       	sbci	r31, 0xFF	; 255
    4264:	80 81       	ld	r24, Z
    4266:	81 30       	cpi	r24, 0x01	; 1
    4268:	09 f0       	breq	.+2      	; 0x426c <main+0xb76>
    426a:	91 ce       	rjmp	.-734    	; 0x3f8e <main+0x898>
				byte = mfrc522_get_card_serial(str);
    426c:	ce 01       	movw	r24, r28
    426e:	81 57       	subi	r24, 0x71	; 113
    4270:	9f 4f       	sbci	r25, 0xFF	; 255
    4272:	0e 94 d4 27 	call	0x4fa8	; 0x4fa8 <mfrc522_get_card_serial>
    4276:	fe 01       	movw	r30, r28
    4278:	ea 58       	subi	r30, 0x8A	; 138
    427a:	ff 4f       	sbci	r31, 0xFF	; 255
    427c:	80 83       	st	Z, r24
				if (byte == CARD_FOUND) {
    427e:	fe 01       	movw	r30, r28
    4280:	ea 58       	subi	r30, 0x8A	; 138
    4282:	ff 4f       	sbci	r31, 0xFF	; 255
    4284:	80 81       	ld	r24, Z
    4286:	81 30       	cpi	r24, 0x01	; 1
    4288:	09 f0       	breq	.+2      	; 0x428c <main+0xb96>
    428a:	72 c2       	rjmp	.+1252   	; 0x4770 <main+0x107a>
					PORTD |= (1<<7);
    428c:	a2 e3       	ldi	r26, 0x32	; 50
    428e:	b0 e0       	ldi	r27, 0x00	; 0
    4290:	e2 e3       	ldi	r30, 0x32	; 50
    4292:	f0 e0       	ldi	r31, 0x00	; 0
    4294:	80 81       	ld	r24, Z
    4296:	80 68       	ori	r24, 0x80	; 128
    4298:	8c 93       	st	X, r24
    429a:	80 e0       	ldi	r24, 0x00	; 0
    429c:	90 e0       	ldi	r25, 0x00	; 0
    429e:	aa ef       	ldi	r26, 0xFA	; 250
    42a0:	b3 e4       	ldi	r27, 0x43	; 67
    42a2:	8f a3       	std	Y+39, r24	; 0x27
    42a4:	98 a7       	std	Y+40, r25	; 0x28
    42a6:	a9 a7       	std	Y+41, r26	; 0x29
    42a8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42aa:	6f a1       	ldd	r22, Y+39	; 0x27
    42ac:	78 a5       	ldd	r23, Y+40	; 0x28
    42ae:	89 a5       	ldd	r24, Y+41	; 0x29
    42b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    42b2:	20 e0       	ldi	r18, 0x00	; 0
    42b4:	30 e0       	ldi	r19, 0x00	; 0
    42b6:	4a ef       	ldi	r20, 0xFA	; 250
    42b8:	54 e4       	ldi	r21, 0x44	; 68
    42ba:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    42be:	dc 01       	movw	r26, r24
    42c0:	cb 01       	movw	r24, r22
    42c2:	8b a3       	std	Y+35, r24	; 0x23
    42c4:	9c a3       	std	Y+36, r25	; 0x24
    42c6:	ad a3       	std	Y+37, r26	; 0x25
    42c8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    42ca:	6b a1       	ldd	r22, Y+35	; 0x23
    42cc:	7c a1       	ldd	r23, Y+36	; 0x24
    42ce:	8d a1       	ldd	r24, Y+37	; 0x25
    42d0:	9e a1       	ldd	r25, Y+38	; 0x26
    42d2:	20 e0       	ldi	r18, 0x00	; 0
    42d4:	30 e0       	ldi	r19, 0x00	; 0
    42d6:	40 e8       	ldi	r20, 0x80	; 128
    42d8:	5f e3       	ldi	r21, 0x3F	; 63
    42da:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    42de:	88 23       	and	r24, r24
    42e0:	2c f4       	brge	.+10     	; 0x42ec <main+0xbf6>
		__ticks = 1;
    42e2:	81 e0       	ldi	r24, 0x01	; 1
    42e4:	90 e0       	ldi	r25, 0x00	; 0
    42e6:	9a a3       	std	Y+34, r25	; 0x22
    42e8:	89 a3       	std	Y+33, r24	; 0x21
    42ea:	3f c0       	rjmp	.+126    	; 0x436a <main+0xc74>
	else if (__tmp > 65535)
    42ec:	6b a1       	ldd	r22, Y+35	; 0x23
    42ee:	7c a1       	ldd	r23, Y+36	; 0x24
    42f0:	8d a1       	ldd	r24, Y+37	; 0x25
    42f2:	9e a1       	ldd	r25, Y+38	; 0x26
    42f4:	20 e0       	ldi	r18, 0x00	; 0
    42f6:	3f ef       	ldi	r19, 0xFF	; 255
    42f8:	4f e7       	ldi	r20, 0x7F	; 127
    42fa:	57 e4       	ldi	r21, 0x47	; 71
    42fc:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    4300:	18 16       	cp	r1, r24
    4302:	4c f5       	brge	.+82     	; 0x4356 <main+0xc60>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4304:	6f a1       	ldd	r22, Y+39	; 0x27
    4306:	78 a5       	ldd	r23, Y+40	; 0x28
    4308:	89 a5       	ldd	r24, Y+41	; 0x29
    430a:	9a a5       	ldd	r25, Y+42	; 0x2a
    430c:	20 e0       	ldi	r18, 0x00	; 0
    430e:	30 e0       	ldi	r19, 0x00	; 0
    4310:	40 e2       	ldi	r20, 0x20	; 32
    4312:	51 e4       	ldi	r21, 0x41	; 65
    4314:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    4318:	dc 01       	movw	r26, r24
    431a:	cb 01       	movw	r24, r22
    431c:	bc 01       	movw	r22, r24
    431e:	cd 01       	movw	r24, r26
    4320:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4324:	dc 01       	movw	r26, r24
    4326:	cb 01       	movw	r24, r22
    4328:	9a a3       	std	Y+34, r25	; 0x22
    432a:	89 a3       	std	Y+33, r24	; 0x21
    432c:	0f c0       	rjmp	.+30     	; 0x434c <main+0xc56>
    432e:	88 ec       	ldi	r24, 0xC8	; 200
    4330:	90 e0       	ldi	r25, 0x00	; 0
    4332:	98 a3       	std	Y+32, r25	; 0x20
    4334:	8f 8f       	std	Y+31, r24	; 0x1f
    4336:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4338:	98 a1       	ldd	r25, Y+32	; 0x20
    433a:	01 97       	sbiw	r24, 0x01	; 1
    433c:	f1 f7       	brne	.-4      	; 0x433a <main+0xc44>
    433e:	98 a3       	std	Y+32, r25	; 0x20
    4340:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4342:	89 a1       	ldd	r24, Y+33	; 0x21
    4344:	9a a1       	ldd	r25, Y+34	; 0x22
    4346:	01 97       	sbiw	r24, 0x01	; 1
    4348:	9a a3       	std	Y+34, r25	; 0x22
    434a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    434c:	89 a1       	ldd	r24, Y+33	; 0x21
    434e:	9a a1       	ldd	r25, Y+34	; 0x22
    4350:	00 97       	sbiw	r24, 0x00	; 0
    4352:	69 f7       	brne	.-38     	; 0x432e <main+0xc38>
    4354:	14 c0       	rjmp	.+40     	; 0x437e <main+0xc88>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4356:	6b a1       	ldd	r22, Y+35	; 0x23
    4358:	7c a1       	ldd	r23, Y+36	; 0x24
    435a:	8d a1       	ldd	r24, Y+37	; 0x25
    435c:	9e a1       	ldd	r25, Y+38	; 0x26
    435e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    4362:	dc 01       	movw	r26, r24
    4364:	cb 01       	movw	r24, r22
    4366:	9a a3       	std	Y+34, r25	; 0x22
    4368:	89 a3       	std	Y+33, r24	; 0x21
    436a:	89 a1       	ldd	r24, Y+33	; 0x21
    436c:	9a a1       	ldd	r25, Y+34	; 0x22
    436e:	9e 8f       	std	Y+30, r25	; 0x1e
    4370:	8d 8f       	std	Y+29, r24	; 0x1d
    4372:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4374:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4376:	01 97       	sbiw	r24, 0x01	; 1
    4378:	f1 f7       	brne	.-4      	; 0x4376 <main+0xc80>
    437a:	9e 8f       	std	Y+30, r25	; 0x1e
    437c:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(500);
					PORTD &=~ (1<<7);
    437e:	a2 e3       	ldi	r26, 0x32	; 50
    4380:	b0 e0       	ldi	r27, 0x00	; 0
    4382:	e2 e3       	ldi	r30, 0x32	; 50
    4384:	f0 e0       	ldi	r31, 0x00	; 0
    4386:	80 81       	ld	r24, Z
    4388:	8f 77       	andi	r24, 0x7F	; 127
    438a:	8c 93       	st	X, r24
					LCDClear();
    438c:	81 e0       	ldi	r24, 0x01	; 1
    438e:	60 e0       	ldi	r22, 0x00	; 0
    4390:	0e 94 bc 09 	call	0x1378	; 0x1378 <LCDByte>
					for (byte = 0; byte < 5; byte++) {
    4394:	fe 01       	movw	r30, r28
    4396:	ea 58       	subi	r30, 0x8A	; 138
    4398:	ff 4f       	sbci	r31, 0xFF	; 255
    439a:	10 82       	st	Z, r1
    439c:	44 c0       	rjmp	.+136    	; 0x4426 <main+0xd30>
						char buffer[20];
						sprintf(buffer, "%x", str[byte]);
    439e:	fe 01       	movw	r30, r28
    43a0:	ea 58       	subi	r30, 0x8A	; 138
    43a2:	ff 4f       	sbci	r31, 0xFF	; 255
    43a4:	80 81       	ld	r24, Z
    43a6:	28 2f       	mov	r18, r24
    43a8:	30 e0       	ldi	r19, 0x00	; 0
    43aa:	ce 01       	movw	r24, r28
    43ac:	81 57       	subi	r24, 0x71	; 113
    43ae:	9f 4f       	sbci	r25, 0xFF	; 255
    43b0:	fc 01       	movw	r30, r24
    43b2:	e2 0f       	add	r30, r18
    43b4:	f3 1f       	adc	r31, r19
    43b6:	80 81       	ld	r24, Z
    43b8:	28 2f       	mov	r18, r24
    43ba:	30 e0       	ldi	r19, 0x00	; 0
    43bc:	00 d0       	rcall	.+0      	; 0x43be <main+0xcc8>
    43be:	00 d0       	rcall	.+0      	; 0x43c0 <main+0xcca>
    43c0:	00 d0       	rcall	.+0      	; 0x43c2 <main+0xccc>
    43c2:	ed b7       	in	r30, 0x3d	; 61
    43c4:	fe b7       	in	r31, 0x3e	; 62
    43c6:	31 96       	adiw	r30, 0x01	; 1
    43c8:	ce 01       	movw	r24, r28
    43ca:	82 55       	subi	r24, 0x52	; 82
    43cc:	9f 4f       	sbci	r25, 0xFF	; 255
    43ce:	91 83       	std	Z+1, r25	; 0x01
    43d0:	80 83       	st	Z, r24
    43d2:	84 ec       	ldi	r24, 0xC4	; 196
    43d4:	90 e0       	ldi	r25, 0x00	; 0
    43d6:	93 83       	std	Z+3, r25	; 0x03
    43d8:	82 83       	std	Z+2, r24	; 0x02
    43da:	35 83       	std	Z+5, r19	; 0x05
    43dc:	24 83       	std	Z+4, r18	; 0x04
    43de:	0e 94 f3 28 	call	0x51e6	; 0x51e6 <sprintf>
    43e2:	2d b7       	in	r18, 0x3d	; 61
    43e4:	3e b7       	in	r19, 0x3e	; 62
    43e6:	2a 5f       	subi	r18, 0xFA	; 250
    43e8:	3f 4f       	sbci	r19, 0xFF	; 255
    43ea:	0f b6       	in	r0, 0x3f	; 63
    43ec:	f8 94       	cli
    43ee:	3e bf       	out	0x3e, r19	; 62
    43f0:	0f be       	out	0x3f, r0	; 63
    43f2:	2d bf       	out	0x3d, r18	; 61
						LCDWriteStringXY(2 * byte, 0, buffer);
    43f4:	fe 01       	movw	r30, r28
    43f6:	ea 58       	subi	r30, 0x8A	; 138
    43f8:	ff 4f       	sbci	r31, 0xFF	; 255
    43fa:	80 81       	ld	r24, Z
    43fc:	88 2f       	mov	r24, r24
    43fe:	90 e0       	ldi	r25, 0x00	; 0
    4400:	88 0f       	add	r24, r24
    4402:	99 1f       	adc	r25, r25
    4404:	60 e0       	ldi	r22, 0x00	; 0
    4406:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <LCDGotoXY>
    440a:	ce 01       	movw	r24, r28
    440c:	82 55       	subi	r24, 0x52	; 82
    440e:	9f 4f       	sbci	r25, 0xFF	; 255
    4410:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCDWriteString>
				if (byte == CARD_FOUND) {
					PORTD |= (1<<7);
					_delay_ms(500);
					PORTD &=~ (1<<7);
					LCDClear();
					for (byte = 0; byte < 5; byte++) {
    4414:	de 01       	movw	r26, r28
    4416:	aa 58       	subi	r26, 0x8A	; 138
    4418:	bf 4f       	sbci	r27, 0xFF	; 255
    441a:	fe 01       	movw	r30, r28
    441c:	ea 58       	subi	r30, 0x8A	; 138
    441e:	ff 4f       	sbci	r31, 0xFF	; 255
    4420:	80 81       	ld	r24, Z
    4422:	8f 5f       	subi	r24, 0xFF	; 255
    4424:	8c 93       	st	X, r24
    4426:	fe 01       	movw	r30, r28
    4428:	ea 58       	subi	r30, 0x8A	; 138
    442a:	ff 4f       	sbci	r31, 0xFF	; 255
    442c:	80 81       	ld	r24, Z
    442e:	85 30       	cpi	r24, 0x05	; 5
    4430:	08 f4       	brcc	.+2      	; 0x4434 <main+0xd3e>
    4432:	b5 cf       	rjmp	.-150    	; 0x439e <main+0xca8>
    4434:	80 e0       	ldi	r24, 0x00	; 0
    4436:	90 e0       	ldi	r25, 0x00	; 0
    4438:	aa ef       	ldi	r26, 0xFA	; 250
    443a:	b4 e4       	ldi	r27, 0x44	; 68
    443c:	89 8f       	std	Y+25, r24	; 0x19
    443e:	9a 8f       	std	Y+26, r25	; 0x1a
    4440:	ab 8f       	std	Y+27, r26	; 0x1b
    4442:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4444:	69 8d       	ldd	r22, Y+25	; 0x19
    4446:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4448:	8b 8d       	ldd	r24, Y+27	; 0x1b
    444a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    444c:	20 e0       	ldi	r18, 0x00	; 0
    444e:	30 e0       	ldi	r19, 0x00	; 0
    4450:	4a ef       	ldi	r20, 0xFA	; 250
    4452:	54 e4       	ldi	r21, 0x44	; 68
    4454:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    4458:	dc 01       	movw	r26, r24
    445a:	cb 01       	movw	r24, r22
    445c:	8d 8b       	std	Y+21, r24	; 0x15
    445e:	9e 8b       	std	Y+22, r25	; 0x16
    4460:	af 8b       	std	Y+23, r26	; 0x17
    4462:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4464:	6d 89       	ldd	r22, Y+21	; 0x15
    4466:	7e 89       	ldd	r23, Y+22	; 0x16
    4468:	8f 89       	ldd	r24, Y+23	; 0x17
    446a:	98 8d       	ldd	r25, Y+24	; 0x18
    446c:	20 e0       	ldi	r18, 0x00	; 0
    446e:	30 e0       	ldi	r19, 0x00	; 0
    4470:	40 e8       	ldi	r20, 0x80	; 128
    4472:	5f e3       	ldi	r21, 0x3F	; 63
    4474:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    4478:	88 23       	and	r24, r24
    447a:	2c f4       	brge	.+10     	; 0x4486 <main+0xd90>
		__ticks = 1;
    447c:	81 e0       	ldi	r24, 0x01	; 1
    447e:	90 e0       	ldi	r25, 0x00	; 0
    4480:	9c 8b       	std	Y+20, r25	; 0x14
    4482:	8b 8b       	std	Y+19, r24	; 0x13
    4484:	3f c0       	rjmp	.+126    	; 0x4504 <main+0xe0e>
	else if (__tmp > 65535)
    4486:	6d 89       	ldd	r22, Y+21	; 0x15
    4488:	7e 89       	ldd	r23, Y+22	; 0x16
    448a:	8f 89       	ldd	r24, Y+23	; 0x17
    448c:	98 8d       	ldd	r25, Y+24	; 0x18
    448e:	20 e0       	ldi	r18, 0x00	; 0
    4490:	3f ef       	ldi	r19, 0xFF	; 255
    4492:	4f e7       	ldi	r20, 0x7F	; 127
    4494:	57 e4       	ldi	r21, 0x47	; 71
    4496:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    449a:	18 16       	cp	r1, r24
    449c:	4c f5       	brge	.+82     	; 0x44f0 <main+0xdfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    449e:	69 8d       	ldd	r22, Y+25	; 0x19
    44a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    44a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    44a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    44a6:	20 e0       	ldi	r18, 0x00	; 0
    44a8:	30 e0       	ldi	r19, 0x00	; 0
    44aa:	40 e2       	ldi	r20, 0x20	; 32
    44ac:	51 e4       	ldi	r21, 0x41	; 65
    44ae:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    44b2:	dc 01       	movw	r26, r24
    44b4:	cb 01       	movw	r24, r22
    44b6:	bc 01       	movw	r22, r24
    44b8:	cd 01       	movw	r24, r26
    44ba:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    44be:	dc 01       	movw	r26, r24
    44c0:	cb 01       	movw	r24, r22
    44c2:	9c 8b       	std	Y+20, r25	; 0x14
    44c4:	8b 8b       	std	Y+19, r24	; 0x13
    44c6:	0f c0       	rjmp	.+30     	; 0x44e6 <main+0xdf0>
    44c8:	88 ec       	ldi	r24, 0xC8	; 200
    44ca:	90 e0       	ldi	r25, 0x00	; 0
    44cc:	9a 8b       	std	Y+18, r25	; 0x12
    44ce:	89 8b       	std	Y+17, r24	; 0x11
    44d0:	89 89       	ldd	r24, Y+17	; 0x11
    44d2:	9a 89       	ldd	r25, Y+18	; 0x12
    44d4:	01 97       	sbiw	r24, 0x01	; 1
    44d6:	f1 f7       	brne	.-4      	; 0x44d4 <main+0xdde>
    44d8:	9a 8b       	std	Y+18, r25	; 0x12
    44da:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44dc:	8b 89       	ldd	r24, Y+19	; 0x13
    44de:	9c 89       	ldd	r25, Y+20	; 0x14
    44e0:	01 97       	sbiw	r24, 0x01	; 1
    44e2:	9c 8b       	std	Y+20, r25	; 0x14
    44e4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44e6:	8b 89       	ldd	r24, Y+19	; 0x13
    44e8:	9c 89       	ldd	r25, Y+20	; 0x14
    44ea:	00 97       	sbiw	r24, 0x00	; 0
    44ec:	69 f7       	brne	.-38     	; 0x44c8 <main+0xdd2>
    44ee:	14 c0       	rjmp	.+40     	; 0x4518 <main+0xe22>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44f0:	6d 89       	ldd	r22, Y+21	; 0x15
    44f2:	7e 89       	ldd	r23, Y+22	; 0x16
    44f4:	8f 89       	ldd	r24, Y+23	; 0x17
    44f6:	98 8d       	ldd	r25, Y+24	; 0x18
    44f8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    44fc:	dc 01       	movw	r26, r24
    44fe:	cb 01       	movw	r24, r22
    4500:	9c 8b       	std	Y+20, r25	; 0x14
    4502:	8b 8b       	std	Y+19, r24	; 0x13
    4504:	8b 89       	ldd	r24, Y+19	; 0x13
    4506:	9c 89       	ldd	r25, Y+20	; 0x14
    4508:	98 8b       	std	Y+16, r25	; 0x10
    450a:	8f 87       	std	Y+15, r24	; 0x0f
    450c:	8f 85       	ldd	r24, Y+15	; 0x0f
    450e:	98 89       	ldd	r25, Y+16	; 0x10
    4510:	01 97       	sbiw	r24, 0x01	; 1
    4512:	f1 f7       	brne	.-4      	; 0x4510 <main+0xe1a>
    4514:	98 8b       	std	Y+16, r25	; 0x10
    4516:	8f 87       	std	Y+15, r24	; 0x0f
						char buffer[20];
						sprintf(buffer, "%x", str[byte]);
						LCDWriteStringXY(2 * byte, 0, buffer);
					}
					_delay_ms(2000);
					person_recognised = 1;
    4518:	fe 01       	movw	r30, r28
    451a:	eb 58       	subi	r30, 0x8B	; 139
    451c:	ff 4f       	sbci	r31, 0xFF	; 255
    451e:	81 e0       	ldi	r24, 0x01	; 1
    4520:	80 83       	st	Z, r24
					// check first card
					for (byte = 0; byte < 5; byte++) {
    4522:	fe 01       	movw	r30, r28
    4524:	ea 58       	subi	r30, 0x8A	; 138
    4526:	ff 4f       	sbci	r31, 0xFF	; 255
    4528:	10 82       	st	Z, r1
    452a:	25 c0       	rjmp	.+74     	; 0x4576 <main+0xe80>
						if (Card_1[byte] != str[byte])
    452c:	fe 01       	movw	r30, r28
    452e:	ea 58       	subi	r30, 0x8A	; 138
    4530:	ff 4f       	sbci	r31, 0xFF	; 255
    4532:	80 81       	ld	r24, Z
    4534:	28 2f       	mov	r18, r24
    4536:	30 e0       	ldi	r19, 0x00	; 0
    4538:	ce 01       	movw	r24, r28
    453a:	81 56       	subi	r24, 0x61	; 97
    453c:	9f 4f       	sbci	r25, 0xFF	; 255
    453e:	fc 01       	movw	r30, r24
    4540:	e2 0f       	add	r30, r18
    4542:	f3 1f       	adc	r31, r19
    4544:	40 81       	ld	r20, Z
    4546:	fe 01       	movw	r30, r28
    4548:	ea 58       	subi	r30, 0x8A	; 138
    454a:	ff 4f       	sbci	r31, 0xFF	; 255
    454c:	80 81       	ld	r24, Z
    454e:	28 2f       	mov	r18, r24
    4550:	30 e0       	ldi	r19, 0x00	; 0
    4552:	ce 01       	movw	r24, r28
    4554:	81 57       	subi	r24, 0x71	; 113
    4556:	9f 4f       	sbci	r25, 0xFF	; 255
    4558:	fc 01       	movw	r30, r24
    455a:	e2 0f       	add	r30, r18
    455c:	f3 1f       	adc	r31, r19
    455e:	80 81       	ld	r24, Z
    4560:	48 17       	cp	r20, r24
    4562:	79 f4       	brne	.+30     	; 0x4582 <main+0xe8c>
						LCDWriteStringXY(2 * byte, 0, buffer);
					}
					_delay_ms(2000);
					person_recognised = 1;
					// check first card
					for (byte = 0; byte < 5; byte++) {
    4564:	de 01       	movw	r26, r28
    4566:	aa 58       	subi	r26, 0x8A	; 138
    4568:	bf 4f       	sbci	r27, 0xFF	; 255
    456a:	fe 01       	movw	r30, r28
    456c:	ea 58       	subi	r30, 0x8A	; 138
    456e:	ff 4f       	sbci	r31, 0xFF	; 255
    4570:	80 81       	ld	r24, Z
    4572:	8f 5f       	subi	r24, 0xFF	; 255
    4574:	8c 93       	st	X, r24
    4576:	fe 01       	movw	r30, r28
    4578:	ea 58       	subi	r30, 0x8A	; 138
    457a:	ff 4f       	sbci	r31, 0xFF	; 255
    457c:	80 81       	ld	r24, Z
    457e:	85 30       	cpi	r24, 0x05	; 5
    4580:	a8 f2       	brcs	.-86     	; 0x452c <main+0xe36>
						if (Card_1[byte] != str[byte])
							break;
					}
					if (byte == 5) {
    4582:	fe 01       	movw	r30, r28
    4584:	ea 58       	subi	r30, 0x8A	; 138
    4586:	ff 4f       	sbci	r31, 0xFF	; 255
    4588:	80 81       	ld	r24, Z
    458a:	85 30       	cpi	r24, 0x05	; 5
    458c:	29 f4       	brne	.+10     	; 0x4598 <main+0xea2>
						person_recognised = Card1;
    458e:	fe 01       	movw	r30, r28
    4590:	eb 58       	subi	r30, 0x8B	; 139
    4592:	ff 4f       	sbci	r31, 0xFF	; 255
    4594:	82 e0       	ldi	r24, 0x02	; 2
    4596:	80 83       	st	Z, r24
					} else {
						// do nothing
					}
					if (byte != 5) {
    4598:	fe 01       	movw	r30, r28
    459a:	ea 58       	subi	r30, 0x8A	; 138
    459c:	ff 4f       	sbci	r31, 0xFF	; 255
    459e:	80 81       	ld	r24, Z
    45a0:	85 30       	cpi	r24, 0x05	; 5
    45a2:	d9 f1       	breq	.+118    	; 0x461a <main+0xf24>
						// check second card
						for (byte = 0; byte < 5; byte++) {
    45a4:	fe 01       	movw	r30, r28
    45a6:	ea 58       	subi	r30, 0x8A	; 138
    45a8:	ff 4f       	sbci	r31, 0xFF	; 255
    45aa:	10 82       	st	Z, r1
    45ac:	25 c0       	rjmp	.+74     	; 0x45f8 <main+0xf02>
							if (Card_2[byte] != str[byte])
    45ae:	fe 01       	movw	r30, r28
    45b0:	ea 58       	subi	r30, 0x8A	; 138
    45b2:	ff 4f       	sbci	r31, 0xFF	; 255
    45b4:	80 81       	ld	r24, Z
    45b6:	28 2f       	mov	r18, r24
    45b8:	30 e0       	ldi	r19, 0x00	; 0
    45ba:	ce 01       	movw	r24, r28
    45bc:	8c 55       	subi	r24, 0x5C	; 92
    45be:	9f 4f       	sbci	r25, 0xFF	; 255
    45c0:	fc 01       	movw	r30, r24
    45c2:	e2 0f       	add	r30, r18
    45c4:	f3 1f       	adc	r31, r19
    45c6:	40 81       	ld	r20, Z
    45c8:	fe 01       	movw	r30, r28
    45ca:	ea 58       	subi	r30, 0x8A	; 138
    45cc:	ff 4f       	sbci	r31, 0xFF	; 255
    45ce:	80 81       	ld	r24, Z
    45d0:	28 2f       	mov	r18, r24
    45d2:	30 e0       	ldi	r19, 0x00	; 0
    45d4:	ce 01       	movw	r24, r28
    45d6:	81 57       	subi	r24, 0x71	; 113
    45d8:	9f 4f       	sbci	r25, 0xFF	; 255
    45da:	fc 01       	movw	r30, r24
    45dc:	e2 0f       	add	r30, r18
    45de:	f3 1f       	adc	r31, r19
    45e0:	80 81       	ld	r24, Z
    45e2:	48 17       	cp	r20, r24
    45e4:	79 f4       	brne	.+30     	; 0x4604 <main+0xf0e>
					} else {
						// do nothing
					}
					if (byte != 5) {
						// check second card
						for (byte = 0; byte < 5; byte++) {
    45e6:	de 01       	movw	r26, r28
    45e8:	aa 58       	subi	r26, 0x8A	; 138
    45ea:	bf 4f       	sbci	r27, 0xFF	; 255
    45ec:	fe 01       	movw	r30, r28
    45ee:	ea 58       	subi	r30, 0x8A	; 138
    45f0:	ff 4f       	sbci	r31, 0xFF	; 255
    45f2:	80 81       	ld	r24, Z
    45f4:	8f 5f       	subi	r24, 0xFF	; 255
    45f6:	8c 93       	st	X, r24
    45f8:	fe 01       	movw	r30, r28
    45fa:	ea 58       	subi	r30, 0x8A	; 138
    45fc:	ff 4f       	sbci	r31, 0xFF	; 255
    45fe:	80 81       	ld	r24, Z
    4600:	85 30       	cpi	r24, 0x05	; 5
    4602:	a8 f2       	brcs	.-86     	; 0x45ae <main+0xeb8>
							if (Card_2[byte] != str[byte])
								break;
						}
						if (byte == 5) {
    4604:	fe 01       	movw	r30, r28
    4606:	ea 58       	subi	r30, 0x8A	; 138
    4608:	ff 4f       	sbci	r31, 0xFF	; 255
    460a:	80 81       	ld	r24, Z
    460c:	85 30       	cpi	r24, 0x05	; 5
    460e:	29 f4       	brne	.+10     	; 0x461a <main+0xf24>
							person_recognised = Card2;
    4610:	fe 01       	movw	r30, r28
    4612:	eb 58       	subi	r30, 0x8B	; 139
    4614:	ff 4f       	sbci	r31, 0xFF	; 255
    4616:	83 e0       	ldi	r24, 0x03	; 3
    4618:	80 83       	st	Z, r24
						} else {
							// do nothing
						}
					}
					if (byte != 5) {
    461a:	fe 01       	movw	r30, r28
    461c:	ea 58       	subi	r30, 0x8A	; 138
    461e:	ff 4f       	sbci	r31, 0xFF	; 255
    4620:	80 81       	ld	r24, Z
    4622:	85 30       	cpi	r24, 0x05	; 5
    4624:	d9 f1       	breq	.+118    	; 0x469c <main+0xfa6>
						// check second card
						for (byte = 0; byte < 5; byte++) {
    4626:	fe 01       	movw	r30, r28
    4628:	ea 58       	subi	r30, 0x8A	; 138
    462a:	ff 4f       	sbci	r31, 0xFF	; 255
    462c:	10 82       	st	Z, r1
    462e:	25 c0       	rjmp	.+74     	; 0x467a <main+0xf84>
							if (Card_3[byte] != str[byte])
    4630:	fe 01       	movw	r30, r28
    4632:	ea 58       	subi	r30, 0x8A	; 138
    4634:	ff 4f       	sbci	r31, 0xFF	; 255
    4636:	80 81       	ld	r24, Z
    4638:	28 2f       	mov	r18, r24
    463a:	30 e0       	ldi	r19, 0x00	; 0
    463c:	ce 01       	movw	r24, r28
    463e:	87 55       	subi	r24, 0x57	; 87
    4640:	9f 4f       	sbci	r25, 0xFF	; 255
    4642:	fc 01       	movw	r30, r24
    4644:	e2 0f       	add	r30, r18
    4646:	f3 1f       	adc	r31, r19
    4648:	40 81       	ld	r20, Z
    464a:	fe 01       	movw	r30, r28
    464c:	ea 58       	subi	r30, 0x8A	; 138
    464e:	ff 4f       	sbci	r31, 0xFF	; 255
    4650:	80 81       	ld	r24, Z
    4652:	28 2f       	mov	r18, r24
    4654:	30 e0       	ldi	r19, 0x00	; 0
    4656:	ce 01       	movw	r24, r28
    4658:	81 57       	subi	r24, 0x71	; 113
    465a:	9f 4f       	sbci	r25, 0xFF	; 255
    465c:	fc 01       	movw	r30, r24
    465e:	e2 0f       	add	r30, r18
    4660:	f3 1f       	adc	r31, r19
    4662:	80 81       	ld	r24, Z
    4664:	48 17       	cp	r20, r24
    4666:	79 f4       	brne	.+30     	; 0x4686 <main+0xf90>
							// do nothing
						}
					}
					if (byte != 5) {
						// check second card
						for (byte = 0; byte < 5; byte++) {
    4668:	de 01       	movw	r26, r28
    466a:	aa 58       	subi	r26, 0x8A	; 138
    466c:	bf 4f       	sbci	r27, 0xFF	; 255
    466e:	fe 01       	movw	r30, r28
    4670:	ea 58       	subi	r30, 0x8A	; 138
    4672:	ff 4f       	sbci	r31, 0xFF	; 255
    4674:	80 81       	ld	r24, Z
    4676:	8f 5f       	subi	r24, 0xFF	; 255
    4678:	8c 93       	st	X, r24
    467a:	fe 01       	movw	r30, r28
    467c:	ea 58       	subi	r30, 0x8A	; 138
    467e:	ff 4f       	sbci	r31, 0xFF	; 255
    4680:	80 81       	ld	r24, Z
    4682:	85 30       	cpi	r24, 0x05	; 5
    4684:	a8 f2       	brcs	.-86     	; 0x4630 <main+0xf3a>
							if (Card_3[byte] != str[byte])
								break;
						}
						if (byte == 5) {
    4686:	fe 01       	movw	r30, r28
    4688:	ea 58       	subi	r30, 0x8A	; 138
    468a:	ff 4f       	sbci	r31, 0xFF	; 255
    468c:	80 81       	ld	r24, Z
    468e:	85 30       	cpi	r24, 0x05	; 5
    4690:	29 f4       	brne	.+10     	; 0x469c <main+0xfa6>
							person_recognised = Card3;
    4692:	fe 01       	movw	r30, r28
    4694:	eb 58       	subi	r30, 0x8B	; 139
    4696:	ff 4f       	sbci	r31, 0xFF	; 255
    4698:	84 e0       	ldi	r24, 0x04	; 4
    469a:	80 83       	st	Z, r24
						}
					}

					switch (person_recognised) {
    469c:	fe 01       	movw	r30, r28
    469e:	eb 58       	subi	r30, 0x8B	; 139
    46a0:	ff 4f       	sbci	r31, 0xFF	; 255
    46a2:	80 81       	ld	r24, Z
    46a4:	e8 2f       	mov	r30, r24
    46a6:	f0 e0       	ldi	r31, 0x00	; 0
    46a8:	ce 53       	subi	r28, 0x3E	; 62
    46aa:	df 4f       	sbci	r29, 0xFF	; 255
    46ac:	f9 83       	std	Y+1, r31	; 0x01
    46ae:	e8 83       	st	Y, r30
    46b0:	c2 5c       	subi	r28, 0xC2	; 194
    46b2:	d0 40       	sbci	r29, 0x00	; 0
    46b4:	ce 53       	subi	r28, 0x3E	; 62
    46b6:	df 4f       	sbci	r29, 0xFF	; 255
    46b8:	28 81       	ld	r18, Y
    46ba:	39 81       	ldd	r19, Y+1	; 0x01
    46bc:	c2 5c       	subi	r28, 0xC2	; 194
    46be:	d0 40       	sbci	r29, 0x00	; 0
    46c0:	23 30       	cpi	r18, 0x03	; 3
    46c2:	31 05       	cpc	r19, r1
    46c4:	21 f1       	breq	.+72     	; 0x470e <main+0x1018>
    46c6:	ce 53       	subi	r28, 0x3E	; 62
    46c8:	df 4f       	sbci	r29, 0xFF	; 255
    46ca:	88 81       	ld	r24, Y
    46cc:	99 81       	ldd	r25, Y+1	; 0x01
    46ce:	c2 5c       	subi	r28, 0xC2	; 194
    46d0:	d0 40       	sbci	r29, 0x00	; 0
    46d2:	84 30       	cpi	r24, 0x04	; 4
    46d4:	91 05       	cpc	r25, r1
    46d6:	69 f1       	breq	.+90     	; 0x4732 <main+0x103c>
    46d8:	ce 53       	subi	r28, 0x3E	; 62
    46da:	df 4f       	sbci	r29, 0xFF	; 255
    46dc:	e8 81       	ld	r30, Y
    46de:	f9 81       	ldd	r31, Y+1	; 0x01
    46e0:	c2 5c       	subi	r28, 0xC2	; 194
    46e2:	d0 40       	sbci	r29, 0x00	; 0
    46e4:	e2 30       	cpi	r30, 0x02	; 2
    46e6:	f1 05       	cpc	r31, r1
    46e8:	b1 f5       	brne	.+108    	; 0x4756 <main+0x1060>
					case Card1: {
						LCDClear();
    46ea:	81 e0       	ldi	r24, 0x01	; 1
    46ec:	60 e0       	ldi	r22, 0x00	; 0
    46ee:	0e 94 bc 09 	call	0x1378	; 0x1378 <LCDByte>
						LCDWriteStringXY(3, 1, "Car_1");
    46f2:	83 e0       	ldi	r24, 0x03	; 3
    46f4:	61 e0       	ldi	r22, 0x01	; 1
    46f6:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <LCDGotoXY>
    46fa:	87 ec       	ldi	r24, 0xC7	; 199
    46fc:	90 e0       	ldi	r25, 0x00	; 0
    46fe:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCDWriteString>
						not_detected = 0;
    4702:	fe 01       	movw	r30, r28
    4704:	ed 58       	subi	r30, 0x8D	; 141
    4706:	ff 4f       	sbci	r31, 0xFF	; 255
    4708:	11 82       	std	Z+1, r1	; 0x01
    470a:	10 82       	st	Z, r1
    470c:	3d c0       	rjmp	.+122    	; 0x4788 <main+0x1092>
						break;
					}
					case Card2: {
						LCDClear();
    470e:	81 e0       	ldi	r24, 0x01	; 1
    4710:	60 e0       	ldi	r22, 0x00	; 0
    4712:	0e 94 bc 09 	call	0x1378	; 0x1378 <LCDByte>
						LCDWriteStringXY(3, 1, "Car_2");
    4716:	83 e0       	ldi	r24, 0x03	; 3
    4718:	61 e0       	ldi	r22, 0x01	; 1
    471a:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <LCDGotoXY>
    471e:	8d ec       	ldi	r24, 0xCD	; 205
    4720:	90 e0       	ldi	r25, 0x00	; 0
    4722:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCDWriteString>
						not_detected = 0;
    4726:	fe 01       	movw	r30, r28
    4728:	ed 58       	subi	r30, 0x8D	; 141
    472a:	ff 4f       	sbci	r31, 0xFF	; 255
    472c:	11 82       	std	Z+1, r1	; 0x01
    472e:	10 82       	st	Z, r1
    4730:	2b c0       	rjmp	.+86     	; 0x4788 <main+0x1092>
						break;
					}
					case Card3: {
						LCDClear();
    4732:	81 e0       	ldi	r24, 0x01	; 1
    4734:	60 e0       	ldi	r22, 0x00	; 0
    4736:	0e 94 bc 09 	call	0x1378	; 0x1378 <LCDByte>
						LCDWriteStringXY(3, 1, "Car_3");
    473a:	83 e0       	ldi	r24, 0x03	; 3
    473c:	61 e0       	ldi	r22, 0x01	; 1
    473e:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <LCDGotoXY>
    4742:	83 ed       	ldi	r24, 0xD3	; 211
    4744:	90 e0       	ldi	r25, 0x00	; 0
    4746:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCDWriteString>
						not_detected = 0;
    474a:	fe 01       	movw	r30, r28
    474c:	ed 58       	subi	r30, 0x8D	; 141
    474e:	ff 4f       	sbci	r31, 0xFF	; 255
    4750:	11 82       	std	Z+1, r1	; 0x01
    4752:	10 82       	st	Z, r1
    4754:	19 c0       	rjmp	.+50     	; 0x4788 <main+0x1092>
						break;
					}
					default: {
						LCDClear();
    4756:	81 e0       	ldi	r24, 0x01	; 1
    4758:	60 e0       	ldi	r22, 0x00	; 0
    475a:	0e 94 bc 09 	call	0x1378	; 0x1378 <LCDByte>
						LCDWriteStringXY(0, 1, "Not Recognised !");
    475e:	80 e0       	ldi	r24, 0x00	; 0
    4760:	61 e0       	ldi	r22, 0x01	; 1
    4762:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <LCDGotoXY>
    4766:	89 ed       	ldi	r24, 0xD9	; 217
    4768:	90 e0       	ldi	r25, 0x00	; 0
    476a:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCDWriteString>
    476e:	0c c0       	rjmp	.+24     	; 0x4788 <main+0x1092>
						break;
					}
					}
				} else {
					LCDClear();
    4770:	81 e0       	ldi	r24, 0x01	; 1
    4772:	60 e0       	ldi	r22, 0x00	; 0
    4774:	0e 94 bc 09 	call	0x1378	; 0x1378 <LCDByte>
					LCDWriteStringXY(5, 1, "Error");
    4778:	85 e0       	ldi	r24, 0x05	; 5
    477a:	61 e0       	ldi	r22, 0x01	; 1
    477c:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <LCDGotoXY>
    4780:	8a ee       	ldi	r24, 0xEA	; 234
    4782:	90 e0       	ldi	r25, 0x00	; 0
    4784:	0e 94 2c 1a 	call	0x3458	; 0x3458 <LCDWriteString>
				}
				if (not_detected == 0) {
    4788:	fe 01       	movw	r30, r28
    478a:	ed 58       	subi	r30, 0x8D	; 141
    478c:	ff 4f       	sbci	r31, 0xFF	; 255
    478e:	80 81       	ld	r24, Z
    4790:	91 81       	ldd	r25, Z+1	; 0x01
    4792:	00 97       	sbiw	r24, 0x00	; 0
    4794:	71 f5       	brne	.+92     	; 0x47f2 <main+0x10fc>
					// 7 segment data pins
					DDRC |= (1 << 4) | (1 << 5) | (1 << 6) | (1 << 7);
    4796:	a4 e3       	ldi	r26, 0x34	; 52
    4798:	b0 e0       	ldi	r27, 0x00	; 0
    479a:	e4 e3       	ldi	r30, 0x34	; 52
    479c:	f0 e0       	ldi	r31, 0x00	; 0
    479e:	80 81       	ld	r24, Z
    47a0:	80 6f       	ori	r24, 0xF0	; 240
    47a2:	8c 93       	st	X, r24
					DDRB |= (1 << 1) | (1 << 2); //Enable
    47a4:	a7 e3       	ldi	r26, 0x37	; 55
    47a6:	b0 e0       	ldi	r27, 0x00	; 0
    47a8:	e7 e3       	ldi	r30, 0x37	; 55
    47aa:	f0 e0       	ldi	r31, 0x00	; 0
    47ac:	80 81       	ld	r24, Z
    47ae:	86 60       	ori	r24, 0x06	; 6
    47b0:	8c 93       	st	X, r24
					PORTB |= (1 << 1);
    47b2:	a8 e3       	ldi	r26, 0x38	; 56
    47b4:	b0 e0       	ldi	r27, 0x00	; 0
    47b6:	e8 e3       	ldi	r30, 0x38	; 56
    47b8:	f0 e0       	ldi	r31, 0x00	; 0
    47ba:	80 81       	ld	r24, Z
    47bc:	82 60       	ori	r24, 0x02	; 2
    47be:	8c 93       	st	X, r24
					// timer 0 configurations
					TCCR0 &= ~((1 << WGM00) | (WGM01));
    47c0:	a3 e5       	ldi	r26, 0x53	; 83
    47c2:	b0 e0       	ldi	r27, 0x00	; 0
    47c4:	e3 e5       	ldi	r30, 0x53	; 83
    47c6:	f0 e0       	ldi	r31, 0x00	; 0
    47c8:	80 81       	ld	r24, Z
    47ca:	8c 7b       	andi	r24, 0xBC	; 188
    47cc:	8c 93       	st	X, r24
					TCCR0 |= (1 << CS00) | (1 << CS02); // N = 1024
    47ce:	a3 e5       	ldi	r26, 0x53	; 83
    47d0:	b0 e0       	ldi	r27, 0x00	; 0
    47d2:	e3 e5       	ldi	r30, 0x53	; 83
    47d4:	f0 e0       	ldi	r31, 0x00	; 0
    47d6:	80 81       	ld	r24, Z
    47d8:	85 60       	ori	r24, 0x05	; 5
    47da:	8c 93       	st	X, r24
					TIMSK |= (1 << TOIE0);
    47dc:	a9 e5       	ldi	r26, 0x59	; 89
    47de:	b0 e0       	ldi	r27, 0x00	; 0
    47e0:	e9 e5       	ldi	r30, 0x59	; 89
    47e2:	f0 e0       	ldi	r31, 0x00	; 0
    47e4:	80 81       	ld	r24, Z
    47e6:	81 60       	ori	r24, 0x01	; 1
    47e8:	8c 93       	st	X, r24
					TCNT0 = 0;
    47ea:	e2 e5       	ldi	r30, 0x52	; 82
    47ec:	f0 e0       	ldi	r31, 0x00	; 0
    47ee:	10 82       	st	Z, r1
					sei();
    47f0:	78 94       	sei
    47f2:	80 e0       	ldi	r24, 0x00	; 0
    47f4:	90 e0       	ldi	r25, 0x00	; 0
    47f6:	aa ef       	ldi	r26, 0xFA	; 250
    47f8:	b4 e4       	ldi	r27, 0x44	; 68
    47fa:	8b 87       	std	Y+11, r24	; 0x0b
    47fc:	9c 87       	std	Y+12, r25	; 0x0c
    47fe:	ad 87       	std	Y+13, r26	; 0x0d
    4800:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4802:	6b 85       	ldd	r22, Y+11	; 0x0b
    4804:	7c 85       	ldd	r23, Y+12	; 0x0c
    4806:	8d 85       	ldd	r24, Y+13	; 0x0d
    4808:	9e 85       	ldd	r25, Y+14	; 0x0e
    480a:	20 e0       	ldi	r18, 0x00	; 0
    480c:	30 e0       	ldi	r19, 0x00	; 0
    480e:	4a ef       	ldi	r20, 0xFA	; 250
    4810:	54 e4       	ldi	r21, 0x44	; 68
    4812:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    4816:	dc 01       	movw	r26, r24
    4818:	cb 01       	movw	r24, r22
    481a:	8f 83       	std	Y+7, r24	; 0x07
    481c:	98 87       	std	Y+8, r25	; 0x08
    481e:	a9 87       	std	Y+9, r26	; 0x09
    4820:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4822:	6f 81       	ldd	r22, Y+7	; 0x07
    4824:	78 85       	ldd	r23, Y+8	; 0x08
    4826:	89 85       	ldd	r24, Y+9	; 0x09
    4828:	9a 85       	ldd	r25, Y+10	; 0x0a
    482a:	20 e0       	ldi	r18, 0x00	; 0
    482c:	30 e0       	ldi	r19, 0x00	; 0
    482e:	40 e8       	ldi	r20, 0x80	; 128
    4830:	5f e3       	ldi	r21, 0x3F	; 63
    4832:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    4836:	88 23       	and	r24, r24
    4838:	2c f4       	brge	.+10     	; 0x4844 <main+0x114e>
		__ticks = 1;
    483a:	81 e0       	ldi	r24, 0x01	; 1
    483c:	90 e0       	ldi	r25, 0x00	; 0
    483e:	9e 83       	std	Y+6, r25	; 0x06
    4840:	8d 83       	std	Y+5, r24	; 0x05
    4842:	3f c0       	rjmp	.+126    	; 0x48c2 <main+0x11cc>
	else if (__tmp > 65535)
    4844:	6f 81       	ldd	r22, Y+7	; 0x07
    4846:	78 85       	ldd	r23, Y+8	; 0x08
    4848:	89 85       	ldd	r24, Y+9	; 0x09
    484a:	9a 85       	ldd	r25, Y+10	; 0x0a
    484c:	20 e0       	ldi	r18, 0x00	; 0
    484e:	3f ef       	ldi	r19, 0xFF	; 255
    4850:	4f e7       	ldi	r20, 0x7F	; 127
    4852:	57 e4       	ldi	r21, 0x47	; 71
    4854:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    4858:	18 16       	cp	r1, r24
    485a:	4c f5       	brge	.+82     	; 0x48ae <main+0x11b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    485c:	6b 85       	ldd	r22, Y+11	; 0x0b
    485e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4860:	8d 85       	ldd	r24, Y+13	; 0x0d
    4862:	9e 85       	ldd	r25, Y+14	; 0x0e
    4864:	20 e0       	ldi	r18, 0x00	; 0
    4866:	30 e0       	ldi	r19, 0x00	; 0
    4868:	40 e2       	ldi	r20, 0x20	; 32
    486a:	51 e4       	ldi	r21, 0x41	; 65
    486c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    4870:	dc 01       	movw	r26, r24
    4872:	cb 01       	movw	r24, r22
    4874:	bc 01       	movw	r22, r24
    4876:	cd 01       	movw	r24, r26
    4878:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    487c:	dc 01       	movw	r26, r24
    487e:	cb 01       	movw	r24, r22
    4880:	9e 83       	std	Y+6, r25	; 0x06
    4882:	8d 83       	std	Y+5, r24	; 0x05
    4884:	0f c0       	rjmp	.+30     	; 0x48a4 <main+0x11ae>
    4886:	88 ec       	ldi	r24, 0xC8	; 200
    4888:	90 e0       	ldi	r25, 0x00	; 0
    488a:	9c 83       	std	Y+4, r25	; 0x04
    488c:	8b 83       	std	Y+3, r24	; 0x03
    488e:	8b 81       	ldd	r24, Y+3	; 0x03
    4890:	9c 81       	ldd	r25, Y+4	; 0x04
    4892:	01 97       	sbiw	r24, 0x01	; 1
    4894:	f1 f7       	brne	.-4      	; 0x4892 <main+0x119c>
    4896:	9c 83       	std	Y+4, r25	; 0x04
    4898:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    489a:	8d 81       	ldd	r24, Y+5	; 0x05
    489c:	9e 81       	ldd	r25, Y+6	; 0x06
    489e:	01 97       	sbiw	r24, 0x01	; 1
    48a0:	9e 83       	std	Y+6, r25	; 0x06
    48a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48a4:	8d 81       	ldd	r24, Y+5	; 0x05
    48a6:	9e 81       	ldd	r25, Y+6	; 0x06
    48a8:	00 97       	sbiw	r24, 0x00	; 0
    48aa:	69 f7       	brne	.-38     	; 0x4886 <main+0x1190>
    48ac:	70 cb       	rjmp	.-2336   	; 0x3f8e <main+0x898>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48ae:	6f 81       	ldd	r22, Y+7	; 0x07
    48b0:	78 85       	ldd	r23, Y+8	; 0x08
    48b2:	89 85       	ldd	r24, Y+9	; 0x09
    48b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    48b6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    48ba:	dc 01       	movw	r26, r24
    48bc:	cb 01       	movw	r24, r22
    48be:	9e 83       	std	Y+6, r25	; 0x06
    48c0:	8d 83       	std	Y+5, r24	; 0x05
    48c2:	8d 81       	ldd	r24, Y+5	; 0x05
    48c4:	9e 81       	ldd	r25, Y+6	; 0x06
    48c6:	9a 83       	std	Y+2, r25	; 0x02
    48c8:	89 83       	std	Y+1, r24	; 0x01
    48ca:	89 81       	ldd	r24, Y+1	; 0x01
    48cc:	9a 81       	ldd	r25, Y+2	; 0x02
    48ce:	01 97       	sbiw	r24, 0x01	; 1
    48d0:	f1 f7       	brne	.-4      	; 0x48ce <main+0x11d8>
    48d2:	9a 83       	std	Y+2, r25	; 0x02
    48d4:	89 83       	std	Y+1, r24	; 0x01
    48d6:	5b cb       	rjmp	.-2378   	; 0x3f8e <main+0x898>

000048d8 <__vector_11>:
			}
		}

	}
}
ISR(TIMER0_OVF_vect) {
    48d8:	1f 92       	push	r1
    48da:	0f 92       	push	r0
    48dc:	0f b6       	in	r0, 0x3f	; 63
    48de:	0f 92       	push	r0
    48e0:	11 24       	eor	r1, r1
    48e2:	2f 93       	push	r18
    48e4:	3f 93       	push	r19
    48e6:	4f 93       	push	r20
    48e8:	8f 93       	push	r24
    48ea:	9f 93       	push	r25
    48ec:	af 93       	push	r26
    48ee:	bf 93       	push	r27
    48f0:	ef 93       	push	r30
    48f2:	ff 93       	push	r31
    48f4:	df 93       	push	r29
    48f6:	cf 93       	push	r28
    48f8:	cd b7       	in	r28, 0x3d	; 61
    48fa:	de b7       	in	r29, 0x3e	; 62
	Tmer0_OVF_Count++;
    48fc:	80 91 0c 02 	lds	r24, 0x020C
    4900:	90 91 0d 02 	lds	r25, 0x020D
    4904:	a0 91 0e 02 	lds	r26, 0x020E
    4908:	b0 91 0f 02 	lds	r27, 0x020F
    490c:	01 96       	adiw	r24, 0x01	; 1
    490e:	a1 1d       	adc	r26, r1
    4910:	b1 1d       	adc	r27, r1
    4912:	80 93 0c 02 	sts	0x020C, r24
    4916:	90 93 0d 02 	sts	0x020D, r25
    491a:	a0 93 0e 02 	sts	0x020E, r26
    491e:	b0 93 0f 02 	sts	0x020F, r27
	COUNTER++;
    4922:	80 91 18 02 	lds	r24, 0x0218
    4926:	90 91 19 02 	lds	r25, 0x0219
    492a:	a0 91 1a 02 	lds	r26, 0x021A
    492e:	b0 91 1b 02 	lds	r27, 0x021B
    4932:	01 96       	adiw	r24, 0x01	; 1
    4934:	a1 1d       	adc	r26, r1
    4936:	b1 1d       	adc	r27, r1
    4938:	80 93 18 02 	sts	0x0218, r24
    493c:	90 93 19 02 	sts	0x0219, r25
    4940:	a0 93 1a 02 	sts	0x021A, r26
    4944:	b0 93 1b 02 	sts	0x021B, r27
	if (COUNTER > 100) {
    4948:	80 91 18 02 	lds	r24, 0x0218
    494c:	90 91 19 02 	lds	r25, 0x0219
    4950:	a0 91 1a 02 	lds	r26, 0x021A
    4954:	b0 91 1b 02 	lds	r27, 0x021B
    4958:	85 36       	cpi	r24, 0x65	; 101
    495a:	91 05       	cpc	r25, r1
    495c:	a1 05       	cpc	r26, r1
    495e:	b1 05       	cpc	r27, r1
    4960:	08 f4       	brcc	.+2      	; 0x4964 <__vector_11+0x8c>
    4962:	e6 c0       	rjmp	.+460    	; 0x4b30 <__vector_11+0x258>
		COUNTER = 0;
    4964:	10 92 18 02 	sts	0x0218, r1
    4968:	10 92 19 02 	sts	0x0219, r1
    496c:	10 92 1a 02 	sts	0x021A, r1
    4970:	10 92 1b 02 	sts	0x021B, r1
		if (Seven_Left > 9) {
    4974:	80 91 10 02 	lds	r24, 0x0210
    4978:	90 91 11 02 	lds	r25, 0x0211
    497c:	a0 91 12 02 	lds	r26, 0x0212
    4980:	b0 91 13 02 	lds	r27, 0x0213
    4984:	8a 30       	cpi	r24, 0x0A	; 10
    4986:	91 05       	cpc	r25, r1
    4988:	a1 05       	cpc	r26, r1
    498a:	b1 05       	cpc	r27, r1
    498c:	48 f0       	brcs	.+18     	; 0x49a0 <__vector_11+0xc8>
			PORTB ^= ((1 << 1) | (1 << 2));
    498e:	a8 e3       	ldi	r26, 0x38	; 56
    4990:	b0 e0       	ldi	r27, 0x00	; 0
    4992:	e8 e3       	ldi	r30, 0x38	; 56
    4994:	f0 e0       	ldi	r31, 0x00	; 0
    4996:	90 81       	ld	r25, Z
    4998:	86 e0       	ldi	r24, 0x06	; 6
    499a:	89 27       	eor	r24, r25
    499c:	8c 93       	st	X, r24
    499e:	c8 c0       	rjmp	.+400    	; 0x4b30 <__vector_11+0x258>
			return;
		}
		if (Seven_Left == 0) {
    49a0:	80 91 10 02 	lds	r24, 0x0210
    49a4:	90 91 11 02 	lds	r25, 0x0211
    49a8:	a0 91 12 02 	lds	r26, 0x0212
    49ac:	b0 91 13 02 	lds	r27, 0x0213
    49b0:	00 97       	sbiw	r24, 0x00	; 0
    49b2:	a1 05       	cpc	r26, r1
    49b4:	b1 05       	cpc	r27, r1
    49b6:	09 f0       	breq	.+2      	; 0x49ba <__vector_11+0xe2>
    49b8:	6a c0       	rjmp	.+212    	; 0x4a8e <__vector_11+0x1b6>
			Seven_Right++;
    49ba:	80 91 14 02 	lds	r24, 0x0214
    49be:	90 91 15 02 	lds	r25, 0x0215
    49c2:	a0 91 16 02 	lds	r26, 0x0216
    49c6:	b0 91 17 02 	lds	r27, 0x0217
    49ca:	01 96       	adiw	r24, 0x01	; 1
    49cc:	a1 1d       	adc	r26, r1
    49ce:	b1 1d       	adc	r27, r1
    49d0:	80 93 14 02 	sts	0x0214, r24
    49d4:	90 93 15 02 	sts	0x0215, r25
    49d8:	a0 93 16 02 	sts	0x0216, r26
    49dc:	b0 93 17 02 	sts	0x0217, r27
			if (Seven_Right > 9) {
    49e0:	80 91 14 02 	lds	r24, 0x0214
    49e4:	90 91 15 02 	lds	r25, 0x0215
    49e8:	a0 91 16 02 	lds	r26, 0x0216
    49ec:	b0 91 17 02 	lds	r27, 0x0217
    49f0:	8a 30       	cpi	r24, 0x0A	; 10
    49f2:	91 05       	cpc	r25, r1
    49f4:	a1 05       	cpc	r26, r1
    49f6:	b1 05       	cpc	r27, r1
    49f8:	b0 f1       	brcs	.+108    	; 0x4a66 <__vector_11+0x18e>
				PORTB &= ~(1 << 1);
    49fa:	a8 e3       	ldi	r26, 0x38	; 56
    49fc:	b0 e0       	ldi	r27, 0x00	; 0
    49fe:	e8 e3       	ldi	r30, 0x38	; 56
    4a00:	f0 e0       	ldi	r31, 0x00	; 0
    4a02:	80 81       	ld	r24, Z
    4a04:	8d 7f       	andi	r24, 0xFD	; 253
    4a06:	8c 93       	st	X, r24
				PORTB |= (1 << 2);
    4a08:	a8 e3       	ldi	r26, 0x38	; 56
    4a0a:	b0 e0       	ldi	r27, 0x00	; 0
    4a0c:	e8 e3       	ldi	r30, 0x38	; 56
    4a0e:	f0 e0       	ldi	r31, 0x00	; 0
    4a10:	80 81       	ld	r24, Z
    4a12:	84 60       	ori	r24, 0x04	; 4
    4a14:	8c 93       	st	X, r24
				Seven_Left++;
    4a16:	80 91 10 02 	lds	r24, 0x0210
    4a1a:	90 91 11 02 	lds	r25, 0x0211
    4a1e:	a0 91 12 02 	lds	r26, 0x0212
    4a22:	b0 91 13 02 	lds	r27, 0x0213
    4a26:	01 96       	adiw	r24, 0x01	; 1
    4a28:	a1 1d       	adc	r26, r1
    4a2a:	b1 1d       	adc	r27, r1
    4a2c:	80 93 10 02 	sts	0x0210, r24
    4a30:	90 93 11 02 	sts	0x0211, r25
    4a34:	a0 93 12 02 	sts	0x0212, r26
    4a38:	b0 93 13 02 	sts	0x0213, r27
				PORTC = (PORTC & 0x0F) | (Seven_Left << 4);
    4a3c:	25 e3       	ldi	r18, 0x35	; 53
    4a3e:	30 e0       	ldi	r19, 0x00	; 0
    4a40:	e5 e3       	ldi	r30, 0x35	; 53
    4a42:	f0 e0       	ldi	r31, 0x00	; 0
    4a44:	80 81       	ld	r24, Z
    4a46:	48 2f       	mov	r20, r24
    4a48:	4f 70       	andi	r20, 0x0F	; 15
    4a4a:	80 91 10 02 	lds	r24, 0x0210
    4a4e:	90 91 11 02 	lds	r25, 0x0211
    4a52:	a0 91 12 02 	lds	r26, 0x0212
    4a56:	b0 91 13 02 	lds	r27, 0x0213
    4a5a:	82 95       	swap	r24
    4a5c:	80 7f       	andi	r24, 0xF0	; 240
    4a5e:	84 2b       	or	r24, r20
    4a60:	f9 01       	movw	r30, r18
    4a62:	80 83       	st	Z, r24
    4a64:	65 c0       	rjmp	.+202    	; 0x4b30 <__vector_11+0x258>
				return;
			} else {
				PORTC = (PORTC & 0x0F) | (Seven_Right << 4);
    4a66:	25 e3       	ldi	r18, 0x35	; 53
    4a68:	30 e0       	ldi	r19, 0x00	; 0
    4a6a:	e5 e3       	ldi	r30, 0x35	; 53
    4a6c:	f0 e0       	ldi	r31, 0x00	; 0
    4a6e:	80 81       	ld	r24, Z
    4a70:	48 2f       	mov	r20, r24
    4a72:	4f 70       	andi	r20, 0x0F	; 15
    4a74:	80 91 14 02 	lds	r24, 0x0214
    4a78:	90 91 15 02 	lds	r25, 0x0215
    4a7c:	a0 91 16 02 	lds	r26, 0x0216
    4a80:	b0 91 17 02 	lds	r27, 0x0217
    4a84:	82 95       	swap	r24
    4a86:	80 7f       	andi	r24, 0xF0	; 240
    4a88:	84 2b       	or	r24, r20
    4a8a:	f9 01       	movw	r30, r18
    4a8c:	80 83       	st	Z, r24
			}
		}
		if (Seven_Left > 0) {
    4a8e:	80 91 10 02 	lds	r24, 0x0210
    4a92:	90 91 11 02 	lds	r25, 0x0211
    4a96:	a0 91 12 02 	lds	r26, 0x0212
    4a9a:	b0 91 13 02 	lds	r27, 0x0213
    4a9e:	00 97       	sbiw	r24, 0x00	; 0
    4aa0:	a1 05       	cpc	r26, r1
    4aa2:	b1 05       	cpc	r27, r1
    4aa4:	09 f4       	brne	.+2      	; 0x4aa8 <__vector_11+0x1d0>
    4aa6:	44 c0       	rjmp	.+136    	; 0x4b30 <__vector_11+0x258>
			Seven_Left++;
    4aa8:	80 91 10 02 	lds	r24, 0x0210
    4aac:	90 91 11 02 	lds	r25, 0x0211
    4ab0:	a0 91 12 02 	lds	r26, 0x0212
    4ab4:	b0 91 13 02 	lds	r27, 0x0213
    4ab8:	01 96       	adiw	r24, 0x01	; 1
    4aba:	a1 1d       	adc	r26, r1
    4abc:	b1 1d       	adc	r27, r1
    4abe:	80 93 10 02 	sts	0x0210, r24
    4ac2:	90 93 11 02 	sts	0x0211, r25
    4ac6:	a0 93 12 02 	sts	0x0212, r26
    4aca:	b0 93 13 02 	sts	0x0213, r27
			if (Seven_Left > 9) {
    4ace:	80 91 10 02 	lds	r24, 0x0210
    4ad2:	90 91 11 02 	lds	r25, 0x0211
    4ad6:	a0 91 12 02 	lds	r26, 0x0212
    4ada:	b0 91 13 02 	lds	r27, 0x0213
    4ade:	8a 30       	cpi	r24, 0x0A	; 10
    4ae0:	91 05       	cpc	r25, r1
    4ae2:	a1 05       	cpc	r26, r1
    4ae4:	b1 05       	cpc	r27, r1
    4ae6:	80 f0       	brcs	.+32     	; 0x4b08 <__vector_11+0x230>
				PORTB |= ((1 << 1) | (1 << 2));
    4ae8:	a8 e3       	ldi	r26, 0x38	; 56
    4aea:	b0 e0       	ldi	r27, 0x00	; 0
    4aec:	e8 e3       	ldi	r30, 0x38	; 56
    4aee:	f0 e0       	ldi	r31, 0x00	; 0
    4af0:	80 81       	ld	r24, Z
    4af2:	86 60       	ori	r24, 0x06	; 6
    4af4:	8c 93       	st	X, r24
				PORTC = (PORTC & 0x0F) | (9 << 4);
    4af6:	a5 e3       	ldi	r26, 0x35	; 53
    4af8:	b0 e0       	ldi	r27, 0x00	; 0
    4afa:	e5 e3       	ldi	r30, 0x35	; 53
    4afc:	f0 e0       	ldi	r31, 0x00	; 0
    4afe:	80 81       	ld	r24, Z
    4b00:	8f 70       	andi	r24, 0x0F	; 15
    4b02:	80 69       	ori	r24, 0x90	; 144
    4b04:	8c 93       	st	X, r24
    4b06:	14 c0       	rjmp	.+40     	; 0x4b30 <__vector_11+0x258>
			} else {
				PORTC = (PORTC & 0x0F) | (Seven_Left << 4);
    4b08:	25 e3       	ldi	r18, 0x35	; 53
    4b0a:	30 e0       	ldi	r19, 0x00	; 0
    4b0c:	e5 e3       	ldi	r30, 0x35	; 53
    4b0e:	f0 e0       	ldi	r31, 0x00	; 0
    4b10:	80 81       	ld	r24, Z
    4b12:	48 2f       	mov	r20, r24
    4b14:	4f 70       	andi	r20, 0x0F	; 15
    4b16:	80 91 10 02 	lds	r24, 0x0210
    4b1a:	90 91 11 02 	lds	r25, 0x0211
    4b1e:	a0 91 12 02 	lds	r26, 0x0212
    4b22:	b0 91 13 02 	lds	r27, 0x0213
    4b26:	82 95       	swap	r24
    4b28:	80 7f       	andi	r24, 0xF0	; 240
    4b2a:	84 2b       	or	r24, r20
    4b2c:	f9 01       	movw	r30, r18
    4b2e:	80 83       	st	Z, r24
			}
		}
	}
}
    4b30:	cf 91       	pop	r28
    4b32:	df 91       	pop	r29
    4b34:	ff 91       	pop	r31
    4b36:	ef 91       	pop	r30
    4b38:	bf 91       	pop	r27
    4b3a:	af 91       	pop	r26
    4b3c:	9f 91       	pop	r25
    4b3e:	8f 91       	pop	r24
    4b40:	4f 91       	pop	r20
    4b42:	3f 91       	pop	r19
    4b44:	2f 91       	pop	r18
    4b46:	0f 90       	pop	r0
    4b48:	0f be       	out	0x3f, r0	; 63
    4b4a:	0f 90       	pop	r0
    4b4c:	1f 90       	pop	r1
    4b4e:	18 95       	reti

00004b50 <mfrc522_init>:
#if 1
#include "lcd.h"
#endif

void mfrc522_init()
{
    4b50:	df 93       	push	r29
    4b52:	cf 93       	push	r28
    4b54:	0f 92       	push	r0
    4b56:	cd b7       	in	r28, 0x3d	; 61
    4b58:	de b7       	in	r29, 0x3e	; 62
	uint8_t byte;
	mfrc522_reset();
    4b5a:	0e 94 2d 26 	call	0x4c5a	; 0x4c5a <mfrc522_reset>

	mfrc522_write(TModeReg, 0x8D);
    4b5e:	8a e2       	ldi	r24, 0x2A	; 42
    4b60:	6d e8       	ldi	r22, 0x8D	; 141
    4b62:	0e 94 e1 25 	call	0x4bc2	; 0x4bc2 <mfrc522_write>
    mfrc522_write(TPrescalerReg, 0x3E);
    4b66:	8b e2       	ldi	r24, 0x2B	; 43
    4b68:	6e e3       	ldi	r22, 0x3E	; 62
    4b6a:	0e 94 e1 25 	call	0x4bc2	; 0x4bc2 <mfrc522_write>
    mfrc522_write(TReloadReg_1, 30);
    4b6e:	8c e2       	ldi	r24, 0x2C	; 44
    4b70:	6e e1       	ldi	r22, 0x1E	; 30
    4b72:	0e 94 e1 25 	call	0x4bc2	; 0x4bc2 <mfrc522_write>
    mfrc522_write(TReloadReg_2, 0);
    4b76:	8d e2       	ldi	r24, 0x2D	; 45
    4b78:	60 e0       	ldi	r22, 0x00	; 0
    4b7a:	0e 94 e1 25 	call	0x4bc2	; 0x4bc2 <mfrc522_write>
	mfrc522_write(TxASKReg, 0x40);
    4b7e:	85 e1       	ldi	r24, 0x15	; 21
    4b80:	60 e4       	ldi	r22, 0x40	; 64
    4b82:	0e 94 e1 25 	call	0x4bc2	; 0x4bc2 <mfrc522_write>
	mfrc522_write(ModeReg, 0x3D);
    4b86:	81 e1       	ldi	r24, 0x11	; 17
    4b88:	6d e3       	ldi	r22, 0x3D	; 61
    4b8a:	0e 94 e1 25 	call	0x4bc2	; 0x4bc2 <mfrc522_write>

	byte = mfrc522_read(TxControlReg);
    4b8e:	84 e1       	ldi	r24, 0x14	; 20
    4b90:	0e 94 06 26 	call	0x4c0c	; 0x4c0c <mfrc522_read>
    4b94:	89 83       	std	Y+1, r24	; 0x01
	if(!(byte&0x03))
    4b96:	89 81       	ldd	r24, Y+1	; 0x01
    4b98:	88 2f       	mov	r24, r24
    4b9a:	90 e0       	ldi	r25, 0x00	; 0
    4b9c:	83 70       	andi	r24, 0x03	; 3
    4b9e:	90 70       	andi	r25, 0x00	; 0
    4ba0:	00 97       	sbiw	r24, 0x00	; 0
    4ba2:	59 f4       	brne	.+22     	; 0x4bba <mfrc522_init+0x6a>
	{
		mfrc522_write(TxControlReg,byte|0x03);
    4ba4:	89 81       	ldd	r24, Y+1	; 0x01
    4ba6:	98 2f       	mov	r25, r24
    4ba8:	93 60       	ori	r25, 0x03	; 3
    4baa:	84 e1       	ldi	r24, 0x14	; 20
    4bac:	69 2f       	mov	r22, r25
    4bae:	0e 94 e1 25 	call	0x4bc2	; 0x4bc2 <mfrc522_write>
		byte = mfrc522_read(TxControlReg);
    4bb2:	84 e1       	ldi	r24, 0x14	; 20
    4bb4:	0e 94 06 26 	call	0x4c0c	; 0x4c0c <mfrc522_read>
    4bb8:	89 83       	std	Y+1, r24	; 0x01
	}
}
    4bba:	0f 90       	pop	r0
    4bbc:	cf 91       	pop	r28
    4bbe:	df 91       	pop	r29
    4bc0:	08 95       	ret

00004bc2 <mfrc522_write>:

void mfrc522_write(uint8_t reg, uint8_t data)
{
    4bc2:	df 93       	push	r29
    4bc4:	cf 93       	push	r28
    4bc6:	00 d0       	rcall	.+0      	; 0x4bc8 <mfrc522_write+0x6>
    4bc8:	cd b7       	in	r28, 0x3d	; 61
    4bca:	de b7       	in	r29, 0x3e	; 62
    4bcc:	89 83       	std	Y+1, r24	; 0x01
    4bce:	6a 83       	std	Y+2, r22	; 0x02
	ENABLE_CHIP();
    4bd0:	a8 e3       	ldi	r26, 0x38	; 56
    4bd2:	b0 e0       	ldi	r27, 0x00	; 0
    4bd4:	e8 e3       	ldi	r30, 0x38	; 56
    4bd6:	f0 e0       	ldi	r31, 0x00	; 0
    4bd8:	80 81       	ld	r24, Z
    4bda:	8f 7e       	andi	r24, 0xEF	; 239
    4bdc:	8c 93       	st	X, r24
	spi_transmit((reg<<1)&0x7E);
    4bde:	89 81       	ldd	r24, Y+1	; 0x01
    4be0:	88 2f       	mov	r24, r24
    4be2:	90 e0       	ldi	r25, 0x00	; 0
    4be4:	88 0f       	add	r24, r24
    4be6:	99 1f       	adc	r25, r25
    4be8:	8e 77       	andi	r24, 0x7E	; 126
    4bea:	0e 94 3f 28 	call	0x507e	; 0x507e <spi_transmit>
	spi_transmit(data);
    4bee:	8a 81       	ldd	r24, Y+2	; 0x02
    4bf0:	0e 94 3f 28 	call	0x507e	; 0x507e <spi_transmit>
	DISABLE_CHIP();
    4bf4:	a8 e3       	ldi	r26, 0x38	; 56
    4bf6:	b0 e0       	ldi	r27, 0x00	; 0
    4bf8:	e8 e3       	ldi	r30, 0x38	; 56
    4bfa:	f0 e0       	ldi	r31, 0x00	; 0
    4bfc:	80 81       	ld	r24, Z
    4bfe:	80 61       	ori	r24, 0x10	; 16
    4c00:	8c 93       	st	X, r24
}
    4c02:	0f 90       	pop	r0
    4c04:	0f 90       	pop	r0
    4c06:	cf 91       	pop	r28
    4c08:	df 91       	pop	r29
    4c0a:	08 95       	ret

00004c0c <mfrc522_read>:

uint8_t mfrc522_read(uint8_t reg)
{
    4c0c:	df 93       	push	r29
    4c0e:	cf 93       	push	r28
    4c10:	00 d0       	rcall	.+0      	; 0x4c12 <mfrc522_read+0x6>
    4c12:	cd b7       	in	r28, 0x3d	; 61
    4c14:	de b7       	in	r29, 0x3e	; 62
    4c16:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t data;
	ENABLE_CHIP();
    4c18:	a8 e3       	ldi	r26, 0x38	; 56
    4c1a:	b0 e0       	ldi	r27, 0x00	; 0
    4c1c:	e8 e3       	ldi	r30, 0x38	; 56
    4c1e:	f0 e0       	ldi	r31, 0x00	; 0
    4c20:	80 81       	ld	r24, Z
    4c22:	8f 7e       	andi	r24, 0xEF	; 239
    4c24:	8c 93       	st	X, r24
	spi_transmit(((reg<<1)&0x7E)|0x80);
    4c26:	8a 81       	ldd	r24, Y+2	; 0x02
    4c28:	88 2f       	mov	r24, r24
    4c2a:	90 e0       	ldi	r25, 0x00	; 0
    4c2c:	88 0f       	add	r24, r24
    4c2e:	99 1f       	adc	r25, r25
    4c30:	8e 77       	andi	r24, 0x7E	; 126
    4c32:	80 68       	ori	r24, 0x80	; 128
    4c34:	0e 94 3f 28 	call	0x507e	; 0x507e <spi_transmit>
	data = spi_transmit(0x00);
    4c38:	80 e0       	ldi	r24, 0x00	; 0
    4c3a:	0e 94 3f 28 	call	0x507e	; 0x507e <spi_transmit>
    4c3e:	89 83       	std	Y+1, r24	; 0x01
	DISABLE_CHIP();
    4c40:	a8 e3       	ldi	r26, 0x38	; 56
    4c42:	b0 e0       	ldi	r27, 0x00	; 0
    4c44:	e8 e3       	ldi	r30, 0x38	; 56
    4c46:	f0 e0       	ldi	r31, 0x00	; 0
    4c48:	80 81       	ld	r24, Z
    4c4a:	80 61       	ori	r24, 0x10	; 16
    4c4c:	8c 93       	st	X, r24
	return data;
    4c4e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4c50:	0f 90       	pop	r0
    4c52:	0f 90       	pop	r0
    4c54:	cf 91       	pop	r28
    4c56:	df 91       	pop	r29
    4c58:	08 95       	ret

00004c5a <mfrc522_reset>:

void mfrc522_reset()
{
    4c5a:	df 93       	push	r29
    4c5c:	cf 93       	push	r28
    4c5e:	cd b7       	in	r28, 0x3d	; 61
    4c60:	de b7       	in	r29, 0x3e	; 62
	mfrc522_write(CommandReg,SoftReset_CMD);
    4c62:	81 e0       	ldi	r24, 0x01	; 1
    4c64:	6f e0       	ldi	r22, 0x0F	; 15
    4c66:	0e 94 e1 25 	call	0x4bc2	; 0x4bc2 <mfrc522_write>
}
    4c6a:	cf 91       	pop	r28
    4c6c:	df 91       	pop	r29
    4c6e:	08 95       	ret

00004c70 <mfrc522_request>:

uint8_t	mfrc522_request(uint8_t req_mode, uint8_t * tag_type)
{
    4c70:	0f 93       	push	r16
    4c72:	1f 93       	push	r17
    4c74:	df 93       	push	r29
    4c76:	cf 93       	push	r28
    4c78:	cd b7       	in	r28, 0x3d	; 61
    4c7a:	de b7       	in	r29, 0x3e	; 62
    4c7c:	28 97       	sbiw	r28, 0x08	; 8
    4c7e:	0f b6       	in	r0, 0x3f	; 63
    4c80:	f8 94       	cli
    4c82:	de bf       	out	0x3e, r29	; 62
    4c84:	0f be       	out	0x3f, r0	; 63
    4c86:	cd bf       	out	0x3d, r28	; 61
    4c88:	8e 83       	std	Y+6, r24	; 0x06
    4c8a:	78 87       	std	Y+8, r23	; 0x08
    4c8c:	6f 83       	std	Y+7, r22	; 0x07
	uint8_t  status;
	uint32_t backBits;//The received data bits

	mfrc522_write(BitFramingReg, 0x07);//TxLastBists = BitFramingReg[2..0]	???
    4c8e:	8d e0       	ldi	r24, 0x0D	; 13
    4c90:	67 e0       	ldi	r22, 0x07	; 7
    4c92:	0e 94 e1 25 	call	0x4bc2	; 0x4bc2 <mfrc522_write>

	tag_type[0] = req_mode;
    4c96:	ef 81       	ldd	r30, Y+7	; 0x07
    4c98:	f8 85       	ldd	r31, Y+8	; 0x08
    4c9a:	8e 81       	ldd	r24, Y+6	; 0x06
    4c9c:	80 83       	st	Z, r24
	status = mfrc522_to_card(Transceive_CMD, tag_type, 1, tag_type, &backBits);
    4c9e:	2f 81       	ldd	r18, Y+7	; 0x07
    4ca0:	38 85       	ldd	r19, Y+8	; 0x08
    4ca2:	ef 81       	ldd	r30, Y+7	; 0x07
    4ca4:	f8 85       	ldd	r31, Y+8	; 0x08
    4ca6:	de 01       	movw	r26, r28
    4ca8:	12 96       	adiw	r26, 0x02	; 2
    4caa:	8c e0       	ldi	r24, 0x0C	; 12
    4cac:	b9 01       	movw	r22, r18
    4cae:	41 e0       	ldi	r20, 0x01	; 1
    4cb0:	9f 01       	movw	r18, r30
    4cb2:	8d 01       	movw	r16, r26
    4cb4:	0e 94 77 26 	call	0x4cee	; 0x4cee <mfrc522_to_card>
    4cb8:	89 83       	std	Y+1, r24	; 0x01

	if ((status != CARD_FOUND) || (backBits != 0x10))
    4cba:	89 81       	ldd	r24, Y+1	; 0x01
    4cbc:	81 30       	cpi	r24, 0x01	; 1
    4cbe:	49 f4       	brne	.+18     	; 0x4cd2 <mfrc522_request+0x62>
    4cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    4cc2:	9b 81       	ldd	r25, Y+3	; 0x03
    4cc4:	ac 81       	ldd	r26, Y+4	; 0x04
    4cc6:	bd 81       	ldd	r27, Y+5	; 0x05
    4cc8:	80 31       	cpi	r24, 0x10	; 16
    4cca:	91 05       	cpc	r25, r1
    4ccc:	a1 05       	cpc	r26, r1
    4cce:	b1 05       	cpc	r27, r1
    4cd0:	11 f0       	breq	.+4      	; 0x4cd6 <mfrc522_request+0x66>
	{
		status = ERROR;
    4cd2:	83 e0       	ldi	r24, 0x03	; 3
    4cd4:	89 83       	std	Y+1, r24	; 0x01
	}

	return status;
    4cd6:	89 81       	ldd	r24, Y+1	; 0x01
}
    4cd8:	28 96       	adiw	r28, 0x08	; 8
    4cda:	0f b6       	in	r0, 0x3f	; 63
    4cdc:	f8 94       	cli
    4cde:	de bf       	out	0x3e, r29	; 62
    4ce0:	0f be       	out	0x3f, r0	; 63
    4ce2:	cd bf       	out	0x3d, r28	; 61
    4ce4:	cf 91       	pop	r28
    4ce6:	df 91       	pop	r29
    4ce8:	1f 91       	pop	r17
    4cea:	0f 91       	pop	r16
    4cec:	08 95       	ret

00004cee <mfrc522_to_card>:

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
    4cee:	0f 93       	push	r16
    4cf0:	1f 93       	push	r17
    4cf2:	df 93       	push	r29
    4cf4:	cf 93       	push	r28
    4cf6:	cd b7       	in	r28, 0x3d	; 61
    4cf8:	de b7       	in	r29, 0x3e	; 62
    4cfa:	64 97       	sbiw	r28, 0x14	; 20
    4cfc:	0f b6       	in	r0, 0x3f	; 63
    4cfe:	f8 94       	cli
    4d00:	de bf       	out	0x3e, r29	; 62
    4d02:	0f be       	out	0x3f, r0	; 63
    4d04:	cd bf       	out	0x3d, r28	; 61
    4d06:	8b 87       	std	Y+11, r24	; 0x0b
    4d08:	7d 87       	std	Y+13, r23	; 0x0d
    4d0a:	6c 87       	std	Y+12, r22	; 0x0c
    4d0c:	4e 87       	std	Y+14, r20	; 0x0e
    4d0e:	38 8b       	std	Y+16, r19	; 0x10
    4d10:	2f 87       	std	Y+15, r18	; 0x0f
    4d12:	1a 8b       	std	Y+18, r17	; 0x12
    4d14:	09 8b       	std	Y+17, r16	; 0x11
	uint8_t status = ERROR;
    4d16:	83 e0       	ldi	r24, 0x03	; 3
    4d18:	8a 87       	std	Y+10, r24	; 0x0a
    uint8_t irqEn = 0x00;
    4d1a:	19 86       	std	Y+9, r1	; 0x09
    uint8_t waitIRq = 0x00;
    4d1c:	18 86       	std	Y+8, r1	; 0x08
    uint8_t lastBits;
    uint8_t n;
    uint8_t	tmp;
    uint32_t i;

    switch (cmd)
    4d1e:	8b 85       	ldd	r24, Y+11	; 0x0b
    4d20:	28 2f       	mov	r18, r24
    4d22:	30 e0       	ldi	r19, 0x00	; 0
    4d24:	3c 8b       	std	Y+20, r19	; 0x14
    4d26:	2b 8b       	std	Y+19, r18	; 0x13
    4d28:	8b 89       	ldd	r24, Y+19	; 0x13
    4d2a:	9c 89       	ldd	r25, Y+20	; 0x14
    4d2c:	8c 30       	cpi	r24, 0x0C	; 12
    4d2e:	91 05       	cpc	r25, r1
    4d30:	51 f0       	breq	.+20     	; 0x4d46 <mfrc522_to_card+0x58>
    4d32:	eb 89       	ldd	r30, Y+19	; 0x13
    4d34:	fc 89       	ldd	r31, Y+20	; 0x14
    4d36:	ee 30       	cpi	r30, 0x0E	; 14
    4d38:	f1 05       	cpc	r31, r1
    4d3a:	49 f4       	brne	.+18     	; 0x4d4e <mfrc522_to_card+0x60>
    {
        case MFAuthent_CMD:		//Certification cards close
		{
			irqEn = 0x12;
    4d3c:	82 e1       	ldi	r24, 0x12	; 18
    4d3e:	89 87       	std	Y+9, r24	; 0x09
			waitIRq = 0x10;
    4d40:	80 e1       	ldi	r24, 0x10	; 16
    4d42:	88 87       	std	Y+8, r24	; 0x08
    4d44:	04 c0       	rjmp	.+8      	; 0x4d4e <mfrc522_to_card+0x60>
			break;
		}
		case Transceive_CMD:	//Transmit FIFO data
		{
			irqEn = 0x77;
    4d46:	87 e7       	ldi	r24, 0x77	; 119
    4d48:	89 87       	std	Y+9, r24	; 0x09
			waitIRq = 0x30;
    4d4a:	80 e3       	ldi	r24, 0x30	; 48
    4d4c:	88 87       	std	Y+8, r24	; 0x08
		default:
			break;
    }

    //mfrc522_write(ComIEnReg, irqEn|0x80);	//Interrupt request
    n=mfrc522_read(ComIrqReg);
    4d4e:	84 e0       	ldi	r24, 0x04	; 4
    4d50:	0e 94 06 26 	call	0x4c0c	; 0x4c0c <mfrc522_read>
    4d54:	8e 83       	std	Y+6, r24	; 0x06
    mfrc522_write(ComIrqReg,n&(~0x80));//clear all interrupt bits
    4d56:	8e 81       	ldd	r24, Y+6	; 0x06
    4d58:	98 2f       	mov	r25, r24
    4d5a:	9f 77       	andi	r25, 0x7F	; 127
    4d5c:	84 e0       	ldi	r24, 0x04	; 4
    4d5e:	69 2f       	mov	r22, r25
    4d60:	0e 94 e1 25 	call	0x4bc2	; 0x4bc2 <mfrc522_write>
    n=mfrc522_read(FIFOLevelReg);
    4d64:	8a e0       	ldi	r24, 0x0A	; 10
    4d66:	0e 94 06 26 	call	0x4c0c	; 0x4c0c <mfrc522_read>
    4d6a:	8e 83       	std	Y+6, r24	; 0x06
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
    4d6c:	8e 81       	ldd	r24, Y+6	; 0x06
    4d6e:	98 2f       	mov	r25, r24
    4d70:	90 68       	ori	r25, 0x80	; 128
    4d72:	8a e0       	ldi	r24, 0x0A	; 10
    4d74:	69 2f       	mov	r22, r25
    4d76:	0e 94 e1 25 	call	0x4bc2	; 0x4bc2 <mfrc522_write>

	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???
    4d7a:	81 e0       	ldi	r24, 0x01	; 1
    4d7c:	60 e0       	ldi	r22, 0x00	; 0
    4d7e:	0e 94 e1 25 	call	0x4bc2	; 0x4bc2 <mfrc522_write>

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
    4d82:	19 82       	std	Y+1, r1	; 0x01
    4d84:	1a 82       	std	Y+2, r1	; 0x02
    4d86:	1b 82       	std	Y+3, r1	; 0x03
    4d88:	1c 82       	std	Y+4, r1	; 0x04
    4d8a:	17 c0       	rjmp	.+46     	; 0x4dba <mfrc522_to_card+0xcc>
    {
		mfrc522_write(FIFODataReg, send_data[i]);
    4d8c:	29 81       	ldd	r18, Y+1	; 0x01
    4d8e:	3a 81       	ldd	r19, Y+2	; 0x02
    4d90:	8c 85       	ldd	r24, Y+12	; 0x0c
    4d92:	9d 85       	ldd	r25, Y+13	; 0x0d
    4d94:	fc 01       	movw	r30, r24
    4d96:	e2 0f       	add	r30, r18
    4d98:	f3 1f       	adc	r31, r19
    4d9a:	90 81       	ld	r25, Z
    4d9c:	89 e0       	ldi	r24, 0x09	; 9
    4d9e:	69 2f       	mov	r22, r25
    4da0:	0e 94 e1 25 	call	0x4bc2	; 0x4bc2 <mfrc522_write>
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data

	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
    4da4:	89 81       	ldd	r24, Y+1	; 0x01
    4da6:	9a 81       	ldd	r25, Y+2	; 0x02
    4da8:	ab 81       	ldd	r26, Y+3	; 0x03
    4daa:	bc 81       	ldd	r27, Y+4	; 0x04
    4dac:	01 96       	adiw	r24, 0x01	; 1
    4dae:	a1 1d       	adc	r26, r1
    4db0:	b1 1d       	adc	r27, r1
    4db2:	89 83       	std	Y+1, r24	; 0x01
    4db4:	9a 83       	std	Y+2, r25	; 0x02
    4db6:	ab 83       	std	Y+3, r26	; 0x03
    4db8:	bc 83       	std	Y+4, r27	; 0x04
    4dba:	8e 85       	ldd	r24, Y+14	; 0x0e
    4dbc:	28 2f       	mov	r18, r24
    4dbe:	30 e0       	ldi	r19, 0x00	; 0
    4dc0:	40 e0       	ldi	r20, 0x00	; 0
    4dc2:	50 e0       	ldi	r21, 0x00	; 0
    4dc4:	89 81       	ldd	r24, Y+1	; 0x01
    4dc6:	9a 81       	ldd	r25, Y+2	; 0x02
    4dc8:	ab 81       	ldd	r26, Y+3	; 0x03
    4dca:	bc 81       	ldd	r27, Y+4	; 0x04
    4dcc:	82 17       	cp	r24, r18
    4dce:	93 07       	cpc	r25, r19
    4dd0:	a4 07       	cpc	r26, r20
    4dd2:	b5 07       	cpc	r27, r21
    4dd4:	d8 f2       	brcs	.-74     	; 0x4d8c <mfrc522_to_card+0x9e>
    {
		mfrc522_write(FIFODataReg, send_data[i]);
	}

	//Execute the cmd
	mfrc522_write(CommandReg, cmd);
    4dd6:	81 e0       	ldi	r24, 0x01	; 1
    4dd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    4dda:	0e 94 e1 25 	call	0x4bc2	; 0x4bc2 <mfrc522_write>
    if (cmd == Transceive_CMD)
    4dde:	8b 85       	ldd	r24, Y+11	; 0x0b
    4de0:	8c 30       	cpi	r24, 0x0C	; 12
    4de2:	59 f4       	brne	.+22     	; 0x4dfa <mfrc522_to_card+0x10c>
    {
		n=mfrc522_read(BitFramingReg);
    4de4:	8d e0       	ldi	r24, 0x0D	; 13
    4de6:	0e 94 06 26 	call	0x4c0c	; 0x4c0c <mfrc522_read>
    4dea:	8e 83       	std	Y+6, r24	; 0x06
		mfrc522_write(BitFramingReg,n|0x80);
    4dec:	8e 81       	ldd	r24, Y+6	; 0x06
    4dee:	98 2f       	mov	r25, r24
    4df0:	90 68       	ori	r25, 0x80	; 128
    4df2:	8d e0       	ldi	r24, 0x0D	; 13
    4df4:	69 2f       	mov	r22, r25
    4df6:	0e 94 e1 25 	call	0x4bc2	; 0x4bc2 <mfrc522_write>
	}

	//Waiting to receive data to complete
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
    4dfa:	80 ed       	ldi	r24, 0xD0	; 208
    4dfc:	97 e0       	ldi	r25, 0x07	; 7
    4dfe:	a0 e0       	ldi	r26, 0x00	; 0
    4e00:	b0 e0       	ldi	r27, 0x00	; 0
    4e02:	89 83       	std	Y+1, r24	; 0x01
    4e04:	9a 83       	std	Y+2, r25	; 0x02
    4e06:	ab 83       	std	Y+3, r26	; 0x03
    4e08:	bc 83       	std	Y+4, r27	; 0x04
    do
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = mfrc522_read(ComIrqReg);
    4e0a:	84 e0       	ldi	r24, 0x04	; 4
    4e0c:	0e 94 06 26 	call	0x4c0c	; 0x4c0c <mfrc522_read>
    4e10:	8e 83       	std	Y+6, r24	; 0x06
        i--;
    4e12:	89 81       	ldd	r24, Y+1	; 0x01
    4e14:	9a 81       	ldd	r25, Y+2	; 0x02
    4e16:	ab 81       	ldd	r26, Y+3	; 0x03
    4e18:	bc 81       	ldd	r27, Y+4	; 0x04
    4e1a:	01 97       	sbiw	r24, 0x01	; 1
    4e1c:	a1 09       	sbc	r26, r1
    4e1e:	b1 09       	sbc	r27, r1
    4e20:	89 83       	std	Y+1, r24	; 0x01
    4e22:	9a 83       	std	Y+2, r25	; 0x02
    4e24:	ab 83       	std	Y+3, r26	; 0x03
    4e26:	bc 83       	std	Y+4, r27	; 0x04
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
    4e28:	89 81       	ldd	r24, Y+1	; 0x01
    4e2a:	9a 81       	ldd	r25, Y+2	; 0x02
    4e2c:	ab 81       	ldd	r26, Y+3	; 0x03
    4e2e:	bc 81       	ldd	r27, Y+4	; 0x04
    4e30:	00 97       	sbiw	r24, 0x00	; 0
    4e32:	a1 05       	cpc	r26, r1
    4e34:	b1 05       	cpc	r27, r1
    4e36:	61 f0       	breq	.+24     	; 0x4e50 <mfrc522_to_card+0x162>
    4e38:	8e 81       	ldd	r24, Y+6	; 0x06
    4e3a:	88 2f       	mov	r24, r24
    4e3c:	90 e0       	ldi	r25, 0x00	; 0
    4e3e:	81 70       	andi	r24, 0x01	; 1
    4e40:	90 70       	andi	r25, 0x00	; 0
    4e42:	00 97       	sbiw	r24, 0x00	; 0
    4e44:	29 f4       	brne	.+10     	; 0x4e50 <mfrc522_to_card+0x162>
    4e46:	8e 81       	ldd	r24, Y+6	; 0x06
    4e48:	98 85       	ldd	r25, Y+8	; 0x08
    4e4a:	89 23       	and	r24, r25
    4e4c:	88 23       	and	r24, r24
    4e4e:	e9 f2       	breq	.-70     	; 0x4e0a <mfrc522_to_card+0x11c>

	tmp=mfrc522_read(BitFramingReg);
    4e50:	8d e0       	ldi	r24, 0x0D	; 13
    4e52:	0e 94 06 26 	call	0x4c0c	; 0x4c0c <mfrc522_read>
    4e56:	8d 83       	std	Y+5, r24	; 0x05
	mfrc522_write(BitFramingReg,tmp&(~0x80));
    4e58:	8d 81       	ldd	r24, Y+5	; 0x05
    4e5a:	98 2f       	mov	r25, r24
    4e5c:	9f 77       	andi	r25, 0x7F	; 127
    4e5e:	8d e0       	ldi	r24, 0x0D	; 13
    4e60:	69 2f       	mov	r22, r25
    4e62:	0e 94 e1 25 	call	0x4bc2	; 0x4bc2 <mfrc522_write>

    if (i != 0)
    4e66:	89 81       	ldd	r24, Y+1	; 0x01
    4e68:	9a 81       	ldd	r25, Y+2	; 0x02
    4e6a:	ab 81       	ldd	r26, Y+3	; 0x03
    4e6c:	bc 81       	ldd	r27, Y+4	; 0x04
    4e6e:	00 97       	sbiw	r24, 0x00	; 0
    4e70:	a1 05       	cpc	r26, r1
    4e72:	b1 05       	cpc	r27, r1
    4e74:	09 f4       	brne	.+2      	; 0x4e78 <mfrc522_to_card+0x18a>
    4e76:	8c c0       	rjmp	.+280    	; 0x4f90 <mfrc522_to_card+0x2a2>
    {
        if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
    4e78:	86 e0       	ldi	r24, 0x06	; 6
    4e7a:	0e 94 06 26 	call	0x4c0c	; 0x4c0c <mfrc522_read>
    4e7e:	88 2f       	mov	r24, r24
    4e80:	90 e0       	ldi	r25, 0x00	; 0
    4e82:	8b 71       	andi	r24, 0x1B	; 27
    4e84:	90 70       	andi	r25, 0x00	; 0
    4e86:	00 97       	sbiw	r24, 0x00	; 0
    4e88:	09 f0       	breq	.+2      	; 0x4e8c <mfrc522_to_card+0x19e>
    4e8a:	80 c0       	rjmp	.+256    	; 0x4f8c <mfrc522_to_card+0x29e>
        {
            status = CARD_FOUND;
    4e8c:	81 e0       	ldi	r24, 0x01	; 1
    4e8e:	8a 87       	std	Y+10, r24	; 0x0a
            if (n & irqEn & 0x01)
    4e90:	9e 81       	ldd	r25, Y+6	; 0x06
    4e92:	89 85       	ldd	r24, Y+9	; 0x09
    4e94:	89 23       	and	r24, r25
    4e96:	88 2f       	mov	r24, r24
    4e98:	90 e0       	ldi	r25, 0x00	; 0
    4e9a:	81 70       	andi	r24, 0x01	; 1
    4e9c:	90 70       	andi	r25, 0x00	; 0
    4e9e:	88 23       	and	r24, r24
    4ea0:	11 f0       	breq	.+4      	; 0x4ea6 <mfrc522_to_card+0x1b8>
            {
				status = CARD_NOT_FOUND;			//??
    4ea2:	82 e0       	ldi	r24, 0x02	; 2
    4ea4:	8a 87       	std	Y+10, r24	; 0x0a
			}

            if (cmd == Transceive_CMD)
    4ea6:	8b 85       	ldd	r24, Y+11	; 0x0b
    4ea8:	8c 30       	cpi	r24, 0x0C	; 12
    4eaa:	09 f0       	breq	.+2      	; 0x4eae <mfrc522_to_card+0x1c0>
    4eac:	71 c0       	rjmp	.+226    	; 0x4f90 <mfrc522_to_card+0x2a2>
            {
               	n = mfrc522_read(FIFOLevelReg);
    4eae:	8a e0       	ldi	r24, 0x0A	; 10
    4eb0:	0e 94 06 26 	call	0x4c0c	; 0x4c0c <mfrc522_read>
    4eb4:	8e 83       	std	Y+6, r24	; 0x06
              	lastBits = mfrc522_read(ControlReg) & 0x07;
    4eb6:	8c e0       	ldi	r24, 0x0C	; 12
    4eb8:	0e 94 06 26 	call	0x4c0c	; 0x4c0c <mfrc522_read>
    4ebc:	87 70       	andi	r24, 0x07	; 7
    4ebe:	8f 83       	std	Y+7, r24	; 0x07
                if (lastBits)
    4ec0:	8f 81       	ldd	r24, Y+7	; 0x07
    4ec2:	88 23       	and	r24, r24
    4ec4:	d9 f0       	breq	.+54     	; 0x4efc <mfrc522_to_card+0x20e>
                {
					*back_data_len = (n-1)*8 + lastBits;
    4ec6:	8e 81       	ldd	r24, Y+6	; 0x06
    4ec8:	88 2f       	mov	r24, r24
    4eca:	90 e0       	ldi	r25, 0x00	; 0
    4ecc:	01 97       	sbiw	r24, 0x01	; 1
    4ece:	9c 01       	movw	r18, r24
    4ed0:	22 0f       	add	r18, r18
    4ed2:	33 1f       	adc	r19, r19
    4ed4:	22 0f       	add	r18, r18
    4ed6:	33 1f       	adc	r19, r19
    4ed8:	22 0f       	add	r18, r18
    4eda:	33 1f       	adc	r19, r19
    4edc:	8f 81       	ldd	r24, Y+7	; 0x07
    4ede:	88 2f       	mov	r24, r24
    4ee0:	90 e0       	ldi	r25, 0x00	; 0
    4ee2:	82 0f       	add	r24, r18
    4ee4:	93 1f       	adc	r25, r19
    4ee6:	aa 27       	eor	r26, r26
    4ee8:	97 fd       	sbrc	r25, 7
    4eea:	a0 95       	com	r26
    4eec:	ba 2f       	mov	r27, r26
    4eee:	e9 89       	ldd	r30, Y+17	; 0x11
    4ef0:	fa 89       	ldd	r31, Y+18	; 0x12
    4ef2:	80 83       	st	Z, r24
    4ef4:	91 83       	std	Z+1, r25	; 0x01
    4ef6:	a2 83       	std	Z+2, r26	; 0x02
    4ef8:	b3 83       	std	Z+3, r27	; 0x03
    4efa:	13 c0       	rjmp	.+38     	; 0x4f22 <mfrc522_to_card+0x234>
				}
                else
                {
					*back_data_len = n*8;
    4efc:	8e 81       	ldd	r24, Y+6	; 0x06
    4efe:	88 2f       	mov	r24, r24
    4f00:	90 e0       	ldi	r25, 0x00	; 0
    4f02:	88 0f       	add	r24, r24
    4f04:	99 1f       	adc	r25, r25
    4f06:	88 0f       	add	r24, r24
    4f08:	99 1f       	adc	r25, r25
    4f0a:	88 0f       	add	r24, r24
    4f0c:	99 1f       	adc	r25, r25
    4f0e:	aa 27       	eor	r26, r26
    4f10:	97 fd       	sbrc	r25, 7
    4f12:	a0 95       	com	r26
    4f14:	ba 2f       	mov	r27, r26
    4f16:	e9 89       	ldd	r30, Y+17	; 0x11
    4f18:	fa 89       	ldd	r31, Y+18	; 0x12
    4f1a:	80 83       	st	Z, r24
    4f1c:	91 83       	std	Z+1, r25	; 0x01
    4f1e:	a2 83       	std	Z+2, r26	; 0x02
    4f20:	b3 83       	std	Z+3, r27	; 0x03
				}

                if (n == 0)
    4f22:	8e 81       	ldd	r24, Y+6	; 0x06
    4f24:	88 23       	and	r24, r24
    4f26:	11 f4       	brne	.+4      	; 0x4f2c <mfrc522_to_card+0x23e>
                {
					n = 1;
    4f28:	81 e0       	ldi	r24, 0x01	; 1
    4f2a:	8e 83       	std	Y+6, r24	; 0x06
				}
                if (n > MAX_LEN)
    4f2c:	8e 81       	ldd	r24, Y+6	; 0x06
    4f2e:	81 31       	cpi	r24, 0x11	; 17
    4f30:	10 f0       	brcs	.+4      	; 0x4f36 <mfrc522_to_card+0x248>
                {
					n = MAX_LEN;
    4f32:	80 e1       	ldi	r24, 0x10	; 16
    4f34:	8e 83       	std	Y+6, r24	; 0x06
				}

				//Reading the received data in FIFO
                for (i=0; i<n; i++)
    4f36:	19 82       	std	Y+1, r1	; 0x01
    4f38:	1a 82       	std	Y+2, r1	; 0x02
    4f3a:	1b 82       	std	Y+3, r1	; 0x03
    4f3c:	1c 82       	std	Y+4, r1	; 0x04
    4f3e:	17 c0       	rjmp	.+46     	; 0x4f6e <mfrc522_to_card+0x280>
                {
					back_data[i] = mfrc522_read(FIFODataReg);
    4f40:	29 81       	ldd	r18, Y+1	; 0x01
    4f42:	3a 81       	ldd	r19, Y+2	; 0x02
    4f44:	8f 85       	ldd	r24, Y+15	; 0x0f
    4f46:	98 89       	ldd	r25, Y+16	; 0x10
    4f48:	8c 01       	movw	r16, r24
    4f4a:	02 0f       	add	r16, r18
    4f4c:	13 1f       	adc	r17, r19
    4f4e:	89 e0       	ldi	r24, 0x09	; 9
    4f50:	0e 94 06 26 	call	0x4c0c	; 0x4c0c <mfrc522_read>
    4f54:	f8 01       	movw	r30, r16
    4f56:	80 83       	st	Z, r24
                {
					n = MAX_LEN;
				}

				//Reading the received data in FIFO
                for (i=0; i<n; i++)
    4f58:	89 81       	ldd	r24, Y+1	; 0x01
    4f5a:	9a 81       	ldd	r25, Y+2	; 0x02
    4f5c:	ab 81       	ldd	r26, Y+3	; 0x03
    4f5e:	bc 81       	ldd	r27, Y+4	; 0x04
    4f60:	01 96       	adiw	r24, 0x01	; 1
    4f62:	a1 1d       	adc	r26, r1
    4f64:	b1 1d       	adc	r27, r1
    4f66:	89 83       	std	Y+1, r24	; 0x01
    4f68:	9a 83       	std	Y+2, r25	; 0x02
    4f6a:	ab 83       	std	Y+3, r26	; 0x03
    4f6c:	bc 83       	std	Y+4, r27	; 0x04
    4f6e:	8e 81       	ldd	r24, Y+6	; 0x06
    4f70:	28 2f       	mov	r18, r24
    4f72:	30 e0       	ldi	r19, 0x00	; 0
    4f74:	40 e0       	ldi	r20, 0x00	; 0
    4f76:	50 e0       	ldi	r21, 0x00	; 0
    4f78:	89 81       	ldd	r24, Y+1	; 0x01
    4f7a:	9a 81       	ldd	r25, Y+2	; 0x02
    4f7c:	ab 81       	ldd	r26, Y+3	; 0x03
    4f7e:	bc 81       	ldd	r27, Y+4	; 0x04
    4f80:	82 17       	cp	r24, r18
    4f82:	93 07       	cpc	r25, r19
    4f84:	a4 07       	cpc	r26, r20
    4f86:	b5 07       	cpc	r27, r21
    4f88:	d8 f2       	brcs	.-74     	; 0x4f40 <mfrc522_to_card+0x252>
    4f8a:	02 c0       	rjmp	.+4      	; 0x4f90 <mfrc522_to_card+0x2a2>
				}
            }
        }
        else
        {
			status = ERROR;
    4f8c:	83 e0       	ldi	r24, 0x03	; 3
    4f8e:	8a 87       	std	Y+10, r24	; 0x0a
    }

    //SetBitMask(ControlReg,0x80);           //timer stops
    //mfrc522_write(cmdReg, PCD_IDLE);

    return status;
    4f90:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    4f92:	64 96       	adiw	r28, 0x14	; 20
    4f94:	0f b6       	in	r0, 0x3f	; 63
    4f96:	f8 94       	cli
    4f98:	de bf       	out	0x3e, r29	; 62
    4f9a:	0f be       	out	0x3f, r0	; 63
    4f9c:	cd bf       	out	0x3d, r28	; 61
    4f9e:	cf 91       	pop	r28
    4fa0:	df 91       	pop	r29
    4fa2:	1f 91       	pop	r17
    4fa4:	0f 91       	pop	r16
    4fa6:	08 95       	ret

00004fa8 <mfrc522_get_card_serial>:


uint8_t mfrc522_get_card_serial(uint8_t * serial_out)
{
    4fa8:	0f 93       	push	r16
    4faa:	1f 93       	push	r17
    4fac:	df 93       	push	r29
    4fae:	cf 93       	push	r28
    4fb0:	cd b7       	in	r28, 0x3d	; 61
    4fb2:	de b7       	in	r29, 0x3e	; 62
    4fb4:	29 97       	sbiw	r28, 0x09	; 9
    4fb6:	0f b6       	in	r0, 0x3f	; 63
    4fb8:	f8 94       	cli
    4fba:	de bf       	out	0x3e, r29	; 62
    4fbc:	0f be       	out	0x3f, r0	; 63
    4fbe:	cd bf       	out	0x3d, r28	; 61
    4fc0:	99 87       	std	Y+9, r25	; 0x09
    4fc2:	88 87       	std	Y+8, r24	; 0x08
	uint8_t status;
    uint8_t i;
	uint8_t serNumCheck=0;
    4fc4:	19 82       	std	Y+1, r1	; 0x01
    uint32_t unLen;

	mfrc522_write(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
    4fc6:	8d e0       	ldi	r24, 0x0D	; 13
    4fc8:	60 e0       	ldi	r22, 0x00	; 0
    4fca:	0e 94 e1 25 	call	0x4bc2	; 0x4bc2 <mfrc522_write>

    serial_out[0] = PICC_ANTICOLL;
    4fce:	e8 85       	ldd	r30, Y+8	; 0x08
    4fd0:	f9 85       	ldd	r31, Y+9	; 0x09
    4fd2:	83 e9       	ldi	r24, 0x93	; 147
    4fd4:	80 83       	st	Z, r24
    serial_out[1] = 0x20;
    4fd6:	88 85       	ldd	r24, Y+8	; 0x08
    4fd8:	99 85       	ldd	r25, Y+9	; 0x09
    4fda:	fc 01       	movw	r30, r24
    4fdc:	31 96       	adiw	r30, 0x01	; 1
    4fde:	80 e2       	ldi	r24, 0x20	; 32
    4fe0:	80 83       	st	Z, r24
    status = mfrc522_to_card(Transceive_CMD, serial_out, 2, serial_out, &unLen);
    4fe2:	28 85       	ldd	r18, Y+8	; 0x08
    4fe4:	39 85       	ldd	r19, Y+9	; 0x09
    4fe6:	e8 85       	ldd	r30, Y+8	; 0x08
    4fe8:	f9 85       	ldd	r31, Y+9	; 0x09
    4fea:	de 01       	movw	r26, r28
    4fec:	14 96       	adiw	r26, 0x04	; 4
    4fee:	8c e0       	ldi	r24, 0x0C	; 12
    4ff0:	b9 01       	movw	r22, r18
    4ff2:	42 e0       	ldi	r20, 0x02	; 2
    4ff4:	9f 01       	movw	r18, r30
    4ff6:	8d 01       	movw	r16, r26
    4ff8:	0e 94 77 26 	call	0x4cee	; 0x4cee <mfrc522_to_card>
    4ffc:	8b 83       	std	Y+3, r24	; 0x03

    if (status == CARD_FOUND)
    4ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    5000:	81 30       	cpi	r24, 0x01	; 1
    5002:	11 f5       	brne	.+68     	; 0x5048 <mfrc522_get_card_serial+0xa0>
	{
		//Check card serial number
		for (i=0; i<4; i++)
    5004:	1a 82       	std	Y+2, r1	; 0x02
    5006:	0f c0       	rjmp	.+30     	; 0x5026 <mfrc522_get_card_serial+0x7e>
		{
		 	serNumCheck ^= serial_out[i];
    5008:	8a 81       	ldd	r24, Y+2	; 0x02
    500a:	28 2f       	mov	r18, r24
    500c:	30 e0       	ldi	r19, 0x00	; 0
    500e:	88 85       	ldd	r24, Y+8	; 0x08
    5010:	99 85       	ldd	r25, Y+9	; 0x09
    5012:	fc 01       	movw	r30, r24
    5014:	e2 0f       	add	r30, r18
    5016:	f3 1f       	adc	r31, r19
    5018:	90 81       	ld	r25, Z
    501a:	89 81       	ldd	r24, Y+1	; 0x01
    501c:	89 27       	eor	r24, r25
    501e:	89 83       	std	Y+1, r24	; 0x01
    status = mfrc522_to_card(Transceive_CMD, serial_out, 2, serial_out, &unLen);

    if (status == CARD_FOUND)
	{
		//Check card serial number
		for (i=0; i<4; i++)
    5020:	8a 81       	ldd	r24, Y+2	; 0x02
    5022:	8f 5f       	subi	r24, 0xFF	; 255
    5024:	8a 83       	std	Y+2, r24	; 0x02
    5026:	8a 81       	ldd	r24, Y+2	; 0x02
    5028:	84 30       	cpi	r24, 0x04	; 4
    502a:	70 f3       	brcs	.-36     	; 0x5008 <mfrc522_get_card_serial+0x60>
		{
		 	serNumCheck ^= serial_out[i];
		}
		if (serNumCheck != serial_out[i])
    502c:	8a 81       	ldd	r24, Y+2	; 0x02
    502e:	28 2f       	mov	r18, r24
    5030:	30 e0       	ldi	r19, 0x00	; 0
    5032:	88 85       	ldd	r24, Y+8	; 0x08
    5034:	99 85       	ldd	r25, Y+9	; 0x09
    5036:	fc 01       	movw	r30, r24
    5038:	e2 0f       	add	r30, r18
    503a:	f3 1f       	adc	r31, r19
    503c:	90 81       	ld	r25, Z
    503e:	89 81       	ldd	r24, Y+1	; 0x01
    5040:	98 17       	cp	r25, r24
    5042:	11 f0       	breq	.+4      	; 0x5048 <mfrc522_get_card_serial+0xa0>
		{
			status = ERROR;
    5044:	83 e0       	ldi	r24, 0x03	; 3
    5046:	8b 83       	std	Y+3, r24	; 0x03
		}
    }
    return status;
    5048:	8b 81       	ldd	r24, Y+3	; 0x03
}
    504a:	29 96       	adiw	r28, 0x09	; 9
    504c:	0f b6       	in	r0, 0x3f	; 63
    504e:	f8 94       	cli
    5050:	de bf       	out	0x3e, r29	; 62
    5052:	0f be       	out	0x3f, r0	; 63
    5054:	cd bf       	out	0x3d, r28	; 61
    5056:	cf 91       	pop	r28
    5058:	df 91       	pop	r29
    505a:	1f 91       	pop	r17
    505c:	0f 91       	pop	r16
    505e:	08 95       	ret

00005060 <spi_init>:
 */
#include "spi.h"

#if SPI_CONFIG_AS_MASTER
void spi_init()
{
    5060:	df 93       	push	r29
    5062:	cf 93       	push	r28
    5064:	cd b7       	in	r28, 0x3d	; 61
    5066:	de b7       	in	r29, 0x3e	; 62
	SPI_DDR = (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS);
    5068:	e7 e3       	ldi	r30, 0x37	; 55
    506a:	f0 e0       	ldi	r31, 0x00	; 0
    506c:	80 eb       	ldi	r24, 0xB0	; 176
    506e:	80 83       	st	Z, r24
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);//prescaler 16
    5070:	ed e2       	ldi	r30, 0x2D	; 45
    5072:	f0 e0       	ldi	r31, 0x00	; 0
    5074:	81 e5       	ldi	r24, 0x51	; 81
    5076:	80 83       	st	Z, r24
}
    5078:	cf 91       	pop	r28
    507a:	df 91       	pop	r29
    507c:	08 95       	ret

0000507e <spi_transmit>:


uint8_t spi_transmit(uint8_t data)
{
    507e:	df 93       	push	r29
    5080:	cf 93       	push	r28
    5082:	0f 92       	push	r0
    5084:	cd b7       	in	r28, 0x3d	; 61
    5086:	de b7       	in	r29, 0x3e	; 62
    5088:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data;
    508a:	ef e2       	ldi	r30, 0x2F	; 47
    508c:	f0 e0       	ldi	r31, 0x00	; 0
    508e:	89 81       	ldd	r24, Y+1	; 0x01
    5090:	80 83       	st	Z, r24
	while(!(SPSR & (1<<SPIF)));
    5092:	ee e2       	ldi	r30, 0x2E	; 46
    5094:	f0 e0       	ldi	r31, 0x00	; 0
    5096:	80 81       	ld	r24, Z
    5098:	88 23       	and	r24, r24
    509a:	dc f7       	brge	.-10     	; 0x5092 <spi_transmit+0x14>

	return SPDR;
    509c:	ef e2       	ldi	r30, 0x2F	; 47
    509e:	f0 e0       	ldi	r31, 0x00	; 0
    50a0:	80 81       	ld	r24, Z
}
    50a2:	0f 90       	pop	r0
    50a4:	cf 91       	pop	r28
    50a6:	df 91       	pop	r29
    50a8:	08 95       	ret

000050aa <__mulsi3>:
    50aa:	62 9f       	mul	r22, r18
    50ac:	d0 01       	movw	r26, r0
    50ae:	73 9f       	mul	r23, r19
    50b0:	f0 01       	movw	r30, r0
    50b2:	82 9f       	mul	r24, r18
    50b4:	e0 0d       	add	r30, r0
    50b6:	f1 1d       	adc	r31, r1
    50b8:	64 9f       	mul	r22, r20
    50ba:	e0 0d       	add	r30, r0
    50bc:	f1 1d       	adc	r31, r1
    50be:	92 9f       	mul	r25, r18
    50c0:	f0 0d       	add	r31, r0
    50c2:	83 9f       	mul	r24, r19
    50c4:	f0 0d       	add	r31, r0
    50c6:	74 9f       	mul	r23, r20
    50c8:	f0 0d       	add	r31, r0
    50ca:	65 9f       	mul	r22, r21
    50cc:	f0 0d       	add	r31, r0
    50ce:	99 27       	eor	r25, r25
    50d0:	72 9f       	mul	r23, r18
    50d2:	b0 0d       	add	r27, r0
    50d4:	e1 1d       	adc	r30, r1
    50d6:	f9 1f       	adc	r31, r25
    50d8:	63 9f       	mul	r22, r19
    50da:	b0 0d       	add	r27, r0
    50dc:	e1 1d       	adc	r30, r1
    50de:	f9 1f       	adc	r31, r25
    50e0:	bd 01       	movw	r22, r26
    50e2:	cf 01       	movw	r24, r30
    50e4:	11 24       	eor	r1, r1
    50e6:	08 95       	ret

000050e8 <__divmodhi4>:
    50e8:	97 fb       	bst	r25, 7
    50ea:	09 2e       	mov	r0, r25
    50ec:	07 26       	eor	r0, r23
    50ee:	0a d0       	rcall	.+20     	; 0x5104 <__divmodhi4_neg1>
    50f0:	77 fd       	sbrc	r23, 7
    50f2:	04 d0       	rcall	.+8      	; 0x50fc <__divmodhi4_neg2>
    50f4:	0c d0       	rcall	.+24     	; 0x510e <__udivmodhi4>
    50f6:	06 d0       	rcall	.+12     	; 0x5104 <__divmodhi4_neg1>
    50f8:	00 20       	and	r0, r0
    50fa:	1a f4       	brpl	.+6      	; 0x5102 <__divmodhi4_exit>

000050fc <__divmodhi4_neg2>:
    50fc:	70 95       	com	r23
    50fe:	61 95       	neg	r22
    5100:	7f 4f       	sbci	r23, 0xFF	; 255

00005102 <__divmodhi4_exit>:
    5102:	08 95       	ret

00005104 <__divmodhi4_neg1>:
    5104:	f6 f7       	brtc	.-4      	; 0x5102 <__divmodhi4_exit>
    5106:	90 95       	com	r25
    5108:	81 95       	neg	r24
    510a:	9f 4f       	sbci	r25, 0xFF	; 255
    510c:	08 95       	ret

0000510e <__udivmodhi4>:
    510e:	aa 1b       	sub	r26, r26
    5110:	bb 1b       	sub	r27, r27
    5112:	51 e1       	ldi	r21, 0x11	; 17
    5114:	07 c0       	rjmp	.+14     	; 0x5124 <__udivmodhi4_ep>

00005116 <__udivmodhi4_loop>:
    5116:	aa 1f       	adc	r26, r26
    5118:	bb 1f       	adc	r27, r27
    511a:	a6 17       	cp	r26, r22
    511c:	b7 07       	cpc	r27, r23
    511e:	10 f0       	brcs	.+4      	; 0x5124 <__udivmodhi4_ep>
    5120:	a6 1b       	sub	r26, r22
    5122:	b7 0b       	sbc	r27, r23

00005124 <__udivmodhi4_ep>:
    5124:	88 1f       	adc	r24, r24
    5126:	99 1f       	adc	r25, r25
    5128:	5a 95       	dec	r21
    512a:	a9 f7       	brne	.-22     	; 0x5116 <__udivmodhi4_loop>
    512c:	80 95       	com	r24
    512e:	90 95       	com	r25
    5130:	bc 01       	movw	r22, r24
    5132:	cd 01       	movw	r24, r26
    5134:	08 95       	ret

00005136 <__prologue_saves__>:
    5136:	2f 92       	push	r2
    5138:	3f 92       	push	r3
    513a:	4f 92       	push	r4
    513c:	5f 92       	push	r5
    513e:	6f 92       	push	r6
    5140:	7f 92       	push	r7
    5142:	8f 92       	push	r8
    5144:	9f 92       	push	r9
    5146:	af 92       	push	r10
    5148:	bf 92       	push	r11
    514a:	cf 92       	push	r12
    514c:	df 92       	push	r13
    514e:	ef 92       	push	r14
    5150:	ff 92       	push	r15
    5152:	0f 93       	push	r16
    5154:	1f 93       	push	r17
    5156:	cf 93       	push	r28
    5158:	df 93       	push	r29
    515a:	cd b7       	in	r28, 0x3d	; 61
    515c:	de b7       	in	r29, 0x3e	; 62
    515e:	ca 1b       	sub	r28, r26
    5160:	db 0b       	sbc	r29, r27
    5162:	0f b6       	in	r0, 0x3f	; 63
    5164:	f8 94       	cli
    5166:	de bf       	out	0x3e, r29	; 62
    5168:	0f be       	out	0x3f, r0	; 63
    516a:	cd bf       	out	0x3d, r28	; 61
    516c:	09 94       	ijmp

0000516e <__epilogue_restores__>:
    516e:	2a 88       	ldd	r2, Y+18	; 0x12
    5170:	39 88       	ldd	r3, Y+17	; 0x11
    5172:	48 88       	ldd	r4, Y+16	; 0x10
    5174:	5f 84       	ldd	r5, Y+15	; 0x0f
    5176:	6e 84       	ldd	r6, Y+14	; 0x0e
    5178:	7d 84       	ldd	r7, Y+13	; 0x0d
    517a:	8c 84       	ldd	r8, Y+12	; 0x0c
    517c:	9b 84       	ldd	r9, Y+11	; 0x0b
    517e:	aa 84       	ldd	r10, Y+10	; 0x0a
    5180:	b9 84       	ldd	r11, Y+9	; 0x09
    5182:	c8 84       	ldd	r12, Y+8	; 0x08
    5184:	df 80       	ldd	r13, Y+7	; 0x07
    5186:	ee 80       	ldd	r14, Y+6	; 0x06
    5188:	fd 80       	ldd	r15, Y+5	; 0x05
    518a:	0c 81       	ldd	r16, Y+4	; 0x04
    518c:	1b 81       	ldd	r17, Y+3	; 0x03
    518e:	aa 81       	ldd	r26, Y+2	; 0x02
    5190:	b9 81       	ldd	r27, Y+1	; 0x01
    5192:	ce 0f       	add	r28, r30
    5194:	d1 1d       	adc	r29, r1
    5196:	0f b6       	in	r0, 0x3f	; 63
    5198:	f8 94       	cli
    519a:	de bf       	out	0x3e, r29	; 62
    519c:	0f be       	out	0x3f, r0	; 63
    519e:	cd bf       	out	0x3d, r28	; 61
    51a0:	ed 01       	movw	r28, r26
    51a2:	08 95       	ret

000051a4 <dtostrf>:
    51a4:	ef 92       	push	r14
    51a6:	ff 92       	push	r15
    51a8:	0f 93       	push	r16
    51aa:	1f 93       	push	r17
    51ac:	f2 2f       	mov	r31, r18
    51ae:	f0 2e       	mov	r15, r16
    51b0:	47 fd       	sbrc	r20, 7
    51b2:	02 c0       	rjmp	.+4      	; 0x51b8 <dtostrf+0x14>
    51b4:	e4 e0       	ldi	r30, 0x04	; 4
    51b6:	01 c0       	rjmp	.+2      	; 0x51ba <dtostrf+0x16>
    51b8:	e4 e1       	ldi	r30, 0x14	; 20
    51ba:	24 2f       	mov	r18, r20
    51bc:	33 27       	eor	r19, r19
    51be:	27 fd       	sbrc	r18, 7
    51c0:	30 95       	com	r19
    51c2:	37 ff       	sbrs	r19, 7
    51c4:	03 c0       	rjmp	.+6      	; 0x51cc <dtostrf+0x28>
    51c6:	30 95       	com	r19
    51c8:	21 95       	neg	r18
    51ca:	3f 4f       	sbci	r19, 0xFF	; 255
    51cc:	4f 2d       	mov	r20, r15
    51ce:	51 2f       	mov	r21, r17
    51d0:	0f 2f       	mov	r16, r31
    51d2:	ee 2e       	mov	r14, r30
    51d4:	0e 94 f4 2a 	call	0x55e8	; 0x55e8 <dtoa_prf>
    51d8:	8f 2d       	mov	r24, r15
    51da:	91 2f       	mov	r25, r17
    51dc:	1f 91       	pop	r17
    51de:	0f 91       	pop	r16
    51e0:	ff 90       	pop	r15
    51e2:	ef 90       	pop	r14
    51e4:	08 95       	ret

000051e6 <sprintf>:
    51e6:	ae e0       	ldi	r26, 0x0E	; 14
    51e8:	b0 e0       	ldi	r27, 0x00	; 0
    51ea:	e9 ef       	ldi	r30, 0xF9	; 249
    51ec:	f8 e2       	ldi	r31, 0x28	; 40
    51ee:	0c 94 a9 28 	jmp	0x5152	; 0x5152 <__prologue_saves__+0x1c>
    51f2:	0d 89       	ldd	r16, Y+21	; 0x15
    51f4:	1e 89       	ldd	r17, Y+22	; 0x16
    51f6:	86 e0       	ldi	r24, 0x06	; 6
    51f8:	8c 83       	std	Y+4, r24	; 0x04
    51fa:	1a 83       	std	Y+2, r17	; 0x02
    51fc:	09 83       	std	Y+1, r16	; 0x01
    51fe:	8f ef       	ldi	r24, 0xFF	; 255
    5200:	9f e7       	ldi	r25, 0x7F	; 127
    5202:	9e 83       	std	Y+6, r25	; 0x06
    5204:	8d 83       	std	Y+5, r24	; 0x05
    5206:	9e 01       	movw	r18, r28
    5208:	27 5e       	subi	r18, 0xE7	; 231
    520a:	3f 4f       	sbci	r19, 0xFF	; 255
    520c:	ce 01       	movw	r24, r28
    520e:	01 96       	adiw	r24, 0x01	; 1
    5210:	6f 89       	ldd	r22, Y+23	; 0x17
    5212:	78 8d       	ldd	r23, Y+24	; 0x18
    5214:	a9 01       	movw	r20, r18
    5216:	0e 94 17 29 	call	0x522e	; 0x522e <vfprintf>
    521a:	2f 81       	ldd	r18, Y+7	; 0x07
    521c:	38 85       	ldd	r19, Y+8	; 0x08
    521e:	02 0f       	add	r16, r18
    5220:	13 1f       	adc	r17, r19
    5222:	f8 01       	movw	r30, r16
    5224:	10 82       	st	Z, r1
    5226:	2e 96       	adiw	r28, 0x0e	; 14
    5228:	e4 e0       	ldi	r30, 0x04	; 4
    522a:	0c 94 c5 28 	jmp	0x518a	; 0x518a <__epilogue_restores__+0x1c>

0000522e <vfprintf>:
    522e:	ab e0       	ldi	r26, 0x0B	; 11
    5230:	b0 e0       	ldi	r27, 0x00	; 0
    5232:	ed e1       	ldi	r30, 0x1D	; 29
    5234:	f9 e2       	ldi	r31, 0x29	; 41
    5236:	0c 94 9b 28 	jmp	0x5136	; 0x5136 <__prologue_saves__>
    523a:	3c 01       	movw	r6, r24
    523c:	2b 01       	movw	r4, r22
    523e:	5a 01       	movw	r10, r20
    5240:	fc 01       	movw	r30, r24
    5242:	17 82       	std	Z+7, r1	; 0x07
    5244:	16 82       	std	Z+6, r1	; 0x06
    5246:	83 81       	ldd	r24, Z+3	; 0x03
    5248:	81 fd       	sbrc	r24, 1
    524a:	03 c0       	rjmp	.+6      	; 0x5252 <vfprintf+0x24>
    524c:	6f ef       	ldi	r22, 0xFF	; 255
    524e:	7f ef       	ldi	r23, 0xFF	; 255
    5250:	c6 c1       	rjmp	.+908    	; 0x55de <vfprintf+0x3b0>
    5252:	9a e0       	ldi	r25, 0x0A	; 10
    5254:	89 2e       	mov	r8, r25
    5256:	1e 01       	movw	r2, r28
    5258:	08 94       	sec
    525a:	21 1c       	adc	r2, r1
    525c:	31 1c       	adc	r3, r1
    525e:	f3 01       	movw	r30, r6
    5260:	23 81       	ldd	r18, Z+3	; 0x03
    5262:	f2 01       	movw	r30, r4
    5264:	23 fd       	sbrc	r18, 3
    5266:	85 91       	lpm	r24, Z+
    5268:	23 ff       	sbrs	r18, 3
    526a:	81 91       	ld	r24, Z+
    526c:	2f 01       	movw	r4, r30
    526e:	88 23       	and	r24, r24
    5270:	09 f4       	brne	.+2      	; 0x5274 <vfprintf+0x46>
    5272:	b2 c1       	rjmp	.+868    	; 0x55d8 <vfprintf+0x3aa>
    5274:	85 32       	cpi	r24, 0x25	; 37
    5276:	39 f4       	brne	.+14     	; 0x5286 <vfprintf+0x58>
    5278:	23 fd       	sbrc	r18, 3
    527a:	85 91       	lpm	r24, Z+
    527c:	23 ff       	sbrs	r18, 3
    527e:	81 91       	ld	r24, Z+
    5280:	2f 01       	movw	r4, r30
    5282:	85 32       	cpi	r24, 0x25	; 37
    5284:	29 f4       	brne	.+10     	; 0x5290 <vfprintf+0x62>
    5286:	90 e0       	ldi	r25, 0x00	; 0
    5288:	b3 01       	movw	r22, r6
    528a:	0e 94 44 2d 	call	0x5a88	; 0x5a88 <fputc>
    528e:	e7 cf       	rjmp	.-50     	; 0x525e <vfprintf+0x30>
    5290:	98 2f       	mov	r25, r24
    5292:	ff 24       	eor	r15, r15
    5294:	ee 24       	eor	r14, r14
    5296:	99 24       	eor	r9, r9
    5298:	ff e1       	ldi	r31, 0x1F	; 31
    529a:	ff 15       	cp	r31, r15
    529c:	d0 f0       	brcs	.+52     	; 0x52d2 <vfprintf+0xa4>
    529e:	9b 32       	cpi	r25, 0x2B	; 43
    52a0:	69 f0       	breq	.+26     	; 0x52bc <vfprintf+0x8e>
    52a2:	9c 32       	cpi	r25, 0x2C	; 44
    52a4:	28 f4       	brcc	.+10     	; 0x52b0 <vfprintf+0x82>
    52a6:	90 32       	cpi	r25, 0x20	; 32
    52a8:	59 f0       	breq	.+22     	; 0x52c0 <vfprintf+0x92>
    52aa:	93 32       	cpi	r25, 0x23	; 35
    52ac:	91 f4       	brne	.+36     	; 0x52d2 <vfprintf+0xa4>
    52ae:	0e c0       	rjmp	.+28     	; 0x52cc <vfprintf+0x9e>
    52b0:	9d 32       	cpi	r25, 0x2D	; 45
    52b2:	49 f0       	breq	.+18     	; 0x52c6 <vfprintf+0x98>
    52b4:	90 33       	cpi	r25, 0x30	; 48
    52b6:	69 f4       	brne	.+26     	; 0x52d2 <vfprintf+0xa4>
    52b8:	41 e0       	ldi	r20, 0x01	; 1
    52ba:	24 c0       	rjmp	.+72     	; 0x5304 <vfprintf+0xd6>
    52bc:	52 e0       	ldi	r21, 0x02	; 2
    52be:	f5 2a       	or	r15, r21
    52c0:	84 e0       	ldi	r24, 0x04	; 4
    52c2:	f8 2a       	or	r15, r24
    52c4:	28 c0       	rjmp	.+80     	; 0x5316 <vfprintf+0xe8>
    52c6:	98 e0       	ldi	r25, 0x08	; 8
    52c8:	f9 2a       	or	r15, r25
    52ca:	25 c0       	rjmp	.+74     	; 0x5316 <vfprintf+0xe8>
    52cc:	e0 e1       	ldi	r30, 0x10	; 16
    52ce:	fe 2a       	or	r15, r30
    52d0:	22 c0       	rjmp	.+68     	; 0x5316 <vfprintf+0xe8>
    52d2:	f7 fc       	sbrc	r15, 7
    52d4:	29 c0       	rjmp	.+82     	; 0x5328 <vfprintf+0xfa>
    52d6:	89 2f       	mov	r24, r25
    52d8:	80 53       	subi	r24, 0x30	; 48
    52da:	8a 30       	cpi	r24, 0x0A	; 10
    52dc:	70 f4       	brcc	.+28     	; 0x52fa <vfprintf+0xcc>
    52de:	f6 fe       	sbrs	r15, 6
    52e0:	05 c0       	rjmp	.+10     	; 0x52ec <vfprintf+0xbe>
    52e2:	98 9c       	mul	r9, r8
    52e4:	90 2c       	mov	r9, r0
    52e6:	11 24       	eor	r1, r1
    52e8:	98 0e       	add	r9, r24
    52ea:	15 c0       	rjmp	.+42     	; 0x5316 <vfprintf+0xe8>
    52ec:	e8 9c       	mul	r14, r8
    52ee:	e0 2c       	mov	r14, r0
    52f0:	11 24       	eor	r1, r1
    52f2:	e8 0e       	add	r14, r24
    52f4:	f0 e2       	ldi	r31, 0x20	; 32
    52f6:	ff 2a       	or	r15, r31
    52f8:	0e c0       	rjmp	.+28     	; 0x5316 <vfprintf+0xe8>
    52fa:	9e 32       	cpi	r25, 0x2E	; 46
    52fc:	29 f4       	brne	.+10     	; 0x5308 <vfprintf+0xda>
    52fe:	f6 fc       	sbrc	r15, 6
    5300:	6b c1       	rjmp	.+726    	; 0x55d8 <vfprintf+0x3aa>
    5302:	40 e4       	ldi	r20, 0x40	; 64
    5304:	f4 2a       	or	r15, r20
    5306:	07 c0       	rjmp	.+14     	; 0x5316 <vfprintf+0xe8>
    5308:	9c 36       	cpi	r25, 0x6C	; 108
    530a:	19 f4       	brne	.+6      	; 0x5312 <vfprintf+0xe4>
    530c:	50 e8       	ldi	r21, 0x80	; 128
    530e:	f5 2a       	or	r15, r21
    5310:	02 c0       	rjmp	.+4      	; 0x5316 <vfprintf+0xe8>
    5312:	98 36       	cpi	r25, 0x68	; 104
    5314:	49 f4       	brne	.+18     	; 0x5328 <vfprintf+0xfa>
    5316:	f2 01       	movw	r30, r4
    5318:	23 fd       	sbrc	r18, 3
    531a:	95 91       	lpm	r25, Z+
    531c:	23 ff       	sbrs	r18, 3
    531e:	91 91       	ld	r25, Z+
    5320:	2f 01       	movw	r4, r30
    5322:	99 23       	and	r25, r25
    5324:	09 f0       	breq	.+2      	; 0x5328 <vfprintf+0xfa>
    5326:	b8 cf       	rjmp	.-144    	; 0x5298 <vfprintf+0x6a>
    5328:	89 2f       	mov	r24, r25
    532a:	85 54       	subi	r24, 0x45	; 69
    532c:	83 30       	cpi	r24, 0x03	; 3
    532e:	18 f0       	brcs	.+6      	; 0x5336 <vfprintf+0x108>
    5330:	80 52       	subi	r24, 0x20	; 32
    5332:	83 30       	cpi	r24, 0x03	; 3
    5334:	38 f4       	brcc	.+14     	; 0x5344 <vfprintf+0x116>
    5336:	44 e0       	ldi	r20, 0x04	; 4
    5338:	50 e0       	ldi	r21, 0x00	; 0
    533a:	a4 0e       	add	r10, r20
    533c:	b5 1e       	adc	r11, r21
    533e:	5f e3       	ldi	r21, 0x3F	; 63
    5340:	59 83       	std	Y+1, r21	; 0x01
    5342:	0f c0       	rjmp	.+30     	; 0x5362 <vfprintf+0x134>
    5344:	93 36       	cpi	r25, 0x63	; 99
    5346:	31 f0       	breq	.+12     	; 0x5354 <vfprintf+0x126>
    5348:	93 37       	cpi	r25, 0x73	; 115
    534a:	79 f0       	breq	.+30     	; 0x536a <vfprintf+0x13c>
    534c:	93 35       	cpi	r25, 0x53	; 83
    534e:	09 f0       	breq	.+2      	; 0x5352 <vfprintf+0x124>
    5350:	56 c0       	rjmp	.+172    	; 0x53fe <vfprintf+0x1d0>
    5352:	20 c0       	rjmp	.+64     	; 0x5394 <vfprintf+0x166>
    5354:	f5 01       	movw	r30, r10
    5356:	80 81       	ld	r24, Z
    5358:	89 83       	std	Y+1, r24	; 0x01
    535a:	42 e0       	ldi	r20, 0x02	; 2
    535c:	50 e0       	ldi	r21, 0x00	; 0
    535e:	a4 0e       	add	r10, r20
    5360:	b5 1e       	adc	r11, r21
    5362:	61 01       	movw	r12, r2
    5364:	01 e0       	ldi	r16, 0x01	; 1
    5366:	10 e0       	ldi	r17, 0x00	; 0
    5368:	12 c0       	rjmp	.+36     	; 0x538e <vfprintf+0x160>
    536a:	f5 01       	movw	r30, r10
    536c:	c0 80       	ld	r12, Z
    536e:	d1 80       	ldd	r13, Z+1	; 0x01
    5370:	f6 fc       	sbrc	r15, 6
    5372:	03 c0       	rjmp	.+6      	; 0x537a <vfprintf+0x14c>
    5374:	6f ef       	ldi	r22, 0xFF	; 255
    5376:	7f ef       	ldi	r23, 0xFF	; 255
    5378:	02 c0       	rjmp	.+4      	; 0x537e <vfprintf+0x150>
    537a:	69 2d       	mov	r22, r9
    537c:	70 e0       	ldi	r23, 0x00	; 0
    537e:	42 e0       	ldi	r20, 0x02	; 2
    5380:	50 e0       	ldi	r21, 0x00	; 0
    5382:	a4 0e       	add	r10, r20
    5384:	b5 1e       	adc	r11, r21
    5386:	c6 01       	movw	r24, r12
    5388:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <strnlen>
    538c:	8c 01       	movw	r16, r24
    538e:	5f e7       	ldi	r21, 0x7F	; 127
    5390:	f5 22       	and	r15, r21
    5392:	14 c0       	rjmp	.+40     	; 0x53bc <vfprintf+0x18e>
    5394:	f5 01       	movw	r30, r10
    5396:	c0 80       	ld	r12, Z
    5398:	d1 80       	ldd	r13, Z+1	; 0x01
    539a:	f6 fc       	sbrc	r15, 6
    539c:	03 c0       	rjmp	.+6      	; 0x53a4 <vfprintf+0x176>
    539e:	6f ef       	ldi	r22, 0xFF	; 255
    53a0:	7f ef       	ldi	r23, 0xFF	; 255
    53a2:	02 c0       	rjmp	.+4      	; 0x53a8 <vfprintf+0x17a>
    53a4:	69 2d       	mov	r22, r9
    53a6:	70 e0       	ldi	r23, 0x00	; 0
    53a8:	42 e0       	ldi	r20, 0x02	; 2
    53aa:	50 e0       	ldi	r21, 0x00	; 0
    53ac:	a4 0e       	add	r10, r20
    53ae:	b5 1e       	adc	r11, r21
    53b0:	c6 01       	movw	r24, r12
    53b2:	0e 94 2e 2d 	call	0x5a5c	; 0x5a5c <strnlen_P>
    53b6:	8c 01       	movw	r16, r24
    53b8:	50 e8       	ldi	r21, 0x80	; 128
    53ba:	f5 2a       	or	r15, r21
    53bc:	f3 fe       	sbrs	r15, 3
    53be:	07 c0       	rjmp	.+14     	; 0x53ce <vfprintf+0x1a0>
    53c0:	1a c0       	rjmp	.+52     	; 0x53f6 <vfprintf+0x1c8>
    53c2:	80 e2       	ldi	r24, 0x20	; 32
    53c4:	90 e0       	ldi	r25, 0x00	; 0
    53c6:	b3 01       	movw	r22, r6
    53c8:	0e 94 44 2d 	call	0x5a88	; 0x5a88 <fputc>
    53cc:	ea 94       	dec	r14
    53ce:	8e 2d       	mov	r24, r14
    53d0:	90 e0       	ldi	r25, 0x00	; 0
    53d2:	08 17       	cp	r16, r24
    53d4:	19 07       	cpc	r17, r25
    53d6:	a8 f3       	brcs	.-22     	; 0x53c2 <vfprintf+0x194>
    53d8:	0e c0       	rjmp	.+28     	; 0x53f6 <vfprintf+0x1c8>
    53da:	f6 01       	movw	r30, r12
    53dc:	f7 fc       	sbrc	r15, 7
    53de:	85 91       	lpm	r24, Z+
    53e0:	f7 fe       	sbrs	r15, 7
    53e2:	81 91       	ld	r24, Z+
    53e4:	6f 01       	movw	r12, r30
    53e6:	90 e0       	ldi	r25, 0x00	; 0
    53e8:	b3 01       	movw	r22, r6
    53ea:	0e 94 44 2d 	call	0x5a88	; 0x5a88 <fputc>
    53ee:	e1 10       	cpse	r14, r1
    53f0:	ea 94       	dec	r14
    53f2:	01 50       	subi	r16, 0x01	; 1
    53f4:	10 40       	sbci	r17, 0x00	; 0
    53f6:	01 15       	cp	r16, r1
    53f8:	11 05       	cpc	r17, r1
    53fa:	79 f7       	brne	.-34     	; 0x53da <vfprintf+0x1ac>
    53fc:	ea c0       	rjmp	.+468    	; 0x55d2 <vfprintf+0x3a4>
    53fe:	94 36       	cpi	r25, 0x64	; 100
    5400:	11 f0       	breq	.+4      	; 0x5406 <vfprintf+0x1d8>
    5402:	99 36       	cpi	r25, 0x69	; 105
    5404:	69 f5       	brne	.+90     	; 0x5460 <vfprintf+0x232>
    5406:	f7 fe       	sbrs	r15, 7
    5408:	08 c0       	rjmp	.+16     	; 0x541a <vfprintf+0x1ec>
    540a:	f5 01       	movw	r30, r10
    540c:	20 81       	ld	r18, Z
    540e:	31 81       	ldd	r19, Z+1	; 0x01
    5410:	42 81       	ldd	r20, Z+2	; 0x02
    5412:	53 81       	ldd	r21, Z+3	; 0x03
    5414:	84 e0       	ldi	r24, 0x04	; 4
    5416:	90 e0       	ldi	r25, 0x00	; 0
    5418:	0a c0       	rjmp	.+20     	; 0x542e <vfprintf+0x200>
    541a:	f5 01       	movw	r30, r10
    541c:	80 81       	ld	r24, Z
    541e:	91 81       	ldd	r25, Z+1	; 0x01
    5420:	9c 01       	movw	r18, r24
    5422:	44 27       	eor	r20, r20
    5424:	37 fd       	sbrc	r19, 7
    5426:	40 95       	com	r20
    5428:	54 2f       	mov	r21, r20
    542a:	82 e0       	ldi	r24, 0x02	; 2
    542c:	90 e0       	ldi	r25, 0x00	; 0
    542e:	a8 0e       	add	r10, r24
    5430:	b9 1e       	adc	r11, r25
    5432:	9f e6       	ldi	r25, 0x6F	; 111
    5434:	f9 22       	and	r15, r25
    5436:	57 ff       	sbrs	r21, 7
    5438:	09 c0       	rjmp	.+18     	; 0x544c <vfprintf+0x21e>
    543a:	50 95       	com	r21
    543c:	40 95       	com	r20
    543e:	30 95       	com	r19
    5440:	21 95       	neg	r18
    5442:	3f 4f       	sbci	r19, 0xFF	; 255
    5444:	4f 4f       	sbci	r20, 0xFF	; 255
    5446:	5f 4f       	sbci	r21, 0xFF	; 255
    5448:	e0 e8       	ldi	r30, 0x80	; 128
    544a:	fe 2a       	or	r15, r30
    544c:	ca 01       	movw	r24, r20
    544e:	b9 01       	movw	r22, r18
    5450:	a1 01       	movw	r20, r2
    5452:	2a e0       	ldi	r18, 0x0A	; 10
    5454:	30 e0       	ldi	r19, 0x00	; 0
    5456:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <__ultoa_invert>
    545a:	d8 2e       	mov	r13, r24
    545c:	d2 18       	sub	r13, r2
    545e:	40 c0       	rjmp	.+128    	; 0x54e0 <vfprintf+0x2b2>
    5460:	95 37       	cpi	r25, 0x75	; 117
    5462:	29 f4       	brne	.+10     	; 0x546e <vfprintf+0x240>
    5464:	1f 2d       	mov	r17, r15
    5466:	1f 7e       	andi	r17, 0xEF	; 239
    5468:	2a e0       	ldi	r18, 0x0A	; 10
    546a:	30 e0       	ldi	r19, 0x00	; 0
    546c:	1d c0       	rjmp	.+58     	; 0x54a8 <vfprintf+0x27a>
    546e:	1f 2d       	mov	r17, r15
    5470:	19 7f       	andi	r17, 0xF9	; 249
    5472:	9f 36       	cpi	r25, 0x6F	; 111
    5474:	61 f0       	breq	.+24     	; 0x548e <vfprintf+0x260>
    5476:	90 37       	cpi	r25, 0x70	; 112
    5478:	20 f4       	brcc	.+8      	; 0x5482 <vfprintf+0x254>
    547a:	98 35       	cpi	r25, 0x58	; 88
    547c:	09 f0       	breq	.+2      	; 0x5480 <vfprintf+0x252>
    547e:	ac c0       	rjmp	.+344    	; 0x55d8 <vfprintf+0x3aa>
    5480:	0f c0       	rjmp	.+30     	; 0x54a0 <vfprintf+0x272>
    5482:	90 37       	cpi	r25, 0x70	; 112
    5484:	39 f0       	breq	.+14     	; 0x5494 <vfprintf+0x266>
    5486:	98 37       	cpi	r25, 0x78	; 120
    5488:	09 f0       	breq	.+2      	; 0x548c <vfprintf+0x25e>
    548a:	a6 c0       	rjmp	.+332    	; 0x55d8 <vfprintf+0x3aa>
    548c:	04 c0       	rjmp	.+8      	; 0x5496 <vfprintf+0x268>
    548e:	28 e0       	ldi	r18, 0x08	; 8
    5490:	30 e0       	ldi	r19, 0x00	; 0
    5492:	0a c0       	rjmp	.+20     	; 0x54a8 <vfprintf+0x27a>
    5494:	10 61       	ori	r17, 0x10	; 16
    5496:	14 fd       	sbrc	r17, 4
    5498:	14 60       	ori	r17, 0x04	; 4
    549a:	20 e1       	ldi	r18, 0x10	; 16
    549c:	30 e0       	ldi	r19, 0x00	; 0
    549e:	04 c0       	rjmp	.+8      	; 0x54a8 <vfprintf+0x27a>
    54a0:	14 fd       	sbrc	r17, 4
    54a2:	16 60       	ori	r17, 0x06	; 6
    54a4:	20 e1       	ldi	r18, 0x10	; 16
    54a6:	32 e0       	ldi	r19, 0x02	; 2
    54a8:	17 ff       	sbrs	r17, 7
    54aa:	08 c0       	rjmp	.+16     	; 0x54bc <vfprintf+0x28e>
    54ac:	f5 01       	movw	r30, r10
    54ae:	60 81       	ld	r22, Z
    54b0:	71 81       	ldd	r23, Z+1	; 0x01
    54b2:	82 81       	ldd	r24, Z+2	; 0x02
    54b4:	93 81       	ldd	r25, Z+3	; 0x03
    54b6:	44 e0       	ldi	r20, 0x04	; 4
    54b8:	50 e0       	ldi	r21, 0x00	; 0
    54ba:	08 c0       	rjmp	.+16     	; 0x54cc <vfprintf+0x29e>
    54bc:	f5 01       	movw	r30, r10
    54be:	80 81       	ld	r24, Z
    54c0:	91 81       	ldd	r25, Z+1	; 0x01
    54c2:	bc 01       	movw	r22, r24
    54c4:	80 e0       	ldi	r24, 0x00	; 0
    54c6:	90 e0       	ldi	r25, 0x00	; 0
    54c8:	42 e0       	ldi	r20, 0x02	; 2
    54ca:	50 e0       	ldi	r21, 0x00	; 0
    54cc:	a4 0e       	add	r10, r20
    54ce:	b5 1e       	adc	r11, r21
    54d0:	a1 01       	movw	r20, r2
    54d2:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <__ultoa_invert>
    54d6:	d8 2e       	mov	r13, r24
    54d8:	d2 18       	sub	r13, r2
    54da:	8f e7       	ldi	r24, 0x7F	; 127
    54dc:	f8 2e       	mov	r15, r24
    54de:	f1 22       	and	r15, r17
    54e0:	f6 fe       	sbrs	r15, 6
    54e2:	0b c0       	rjmp	.+22     	; 0x54fa <vfprintf+0x2cc>
    54e4:	5e ef       	ldi	r21, 0xFE	; 254
    54e6:	f5 22       	and	r15, r21
    54e8:	d9 14       	cp	r13, r9
    54ea:	38 f4       	brcc	.+14     	; 0x54fa <vfprintf+0x2cc>
    54ec:	f4 fe       	sbrs	r15, 4
    54ee:	07 c0       	rjmp	.+14     	; 0x54fe <vfprintf+0x2d0>
    54f0:	f2 fc       	sbrc	r15, 2
    54f2:	05 c0       	rjmp	.+10     	; 0x54fe <vfprintf+0x2d0>
    54f4:	8f ee       	ldi	r24, 0xEF	; 239
    54f6:	f8 22       	and	r15, r24
    54f8:	02 c0       	rjmp	.+4      	; 0x54fe <vfprintf+0x2d0>
    54fa:	1d 2d       	mov	r17, r13
    54fc:	01 c0       	rjmp	.+2      	; 0x5500 <vfprintf+0x2d2>
    54fe:	19 2d       	mov	r17, r9
    5500:	f4 fe       	sbrs	r15, 4
    5502:	0d c0       	rjmp	.+26     	; 0x551e <vfprintf+0x2f0>
    5504:	fe 01       	movw	r30, r28
    5506:	ed 0d       	add	r30, r13
    5508:	f1 1d       	adc	r31, r1
    550a:	80 81       	ld	r24, Z
    550c:	80 33       	cpi	r24, 0x30	; 48
    550e:	19 f4       	brne	.+6      	; 0x5516 <vfprintf+0x2e8>
    5510:	99 ee       	ldi	r25, 0xE9	; 233
    5512:	f9 22       	and	r15, r25
    5514:	08 c0       	rjmp	.+16     	; 0x5526 <vfprintf+0x2f8>
    5516:	1f 5f       	subi	r17, 0xFF	; 255
    5518:	f2 fe       	sbrs	r15, 2
    551a:	05 c0       	rjmp	.+10     	; 0x5526 <vfprintf+0x2f8>
    551c:	03 c0       	rjmp	.+6      	; 0x5524 <vfprintf+0x2f6>
    551e:	8f 2d       	mov	r24, r15
    5520:	86 78       	andi	r24, 0x86	; 134
    5522:	09 f0       	breq	.+2      	; 0x5526 <vfprintf+0x2f8>
    5524:	1f 5f       	subi	r17, 0xFF	; 255
    5526:	0f 2d       	mov	r16, r15
    5528:	f3 fc       	sbrc	r15, 3
    552a:	14 c0       	rjmp	.+40     	; 0x5554 <vfprintf+0x326>
    552c:	f0 fe       	sbrs	r15, 0
    552e:	0f c0       	rjmp	.+30     	; 0x554e <vfprintf+0x320>
    5530:	1e 15       	cp	r17, r14
    5532:	10 f0       	brcs	.+4      	; 0x5538 <vfprintf+0x30a>
    5534:	9d 2c       	mov	r9, r13
    5536:	0b c0       	rjmp	.+22     	; 0x554e <vfprintf+0x320>
    5538:	9d 2c       	mov	r9, r13
    553a:	9e 0c       	add	r9, r14
    553c:	91 1a       	sub	r9, r17
    553e:	1e 2d       	mov	r17, r14
    5540:	06 c0       	rjmp	.+12     	; 0x554e <vfprintf+0x320>
    5542:	80 e2       	ldi	r24, 0x20	; 32
    5544:	90 e0       	ldi	r25, 0x00	; 0
    5546:	b3 01       	movw	r22, r6
    5548:	0e 94 44 2d 	call	0x5a88	; 0x5a88 <fputc>
    554c:	1f 5f       	subi	r17, 0xFF	; 255
    554e:	1e 15       	cp	r17, r14
    5550:	c0 f3       	brcs	.-16     	; 0x5542 <vfprintf+0x314>
    5552:	04 c0       	rjmp	.+8      	; 0x555c <vfprintf+0x32e>
    5554:	1e 15       	cp	r17, r14
    5556:	10 f4       	brcc	.+4      	; 0x555c <vfprintf+0x32e>
    5558:	e1 1a       	sub	r14, r17
    555a:	01 c0       	rjmp	.+2      	; 0x555e <vfprintf+0x330>
    555c:	ee 24       	eor	r14, r14
    555e:	04 ff       	sbrs	r16, 4
    5560:	0f c0       	rjmp	.+30     	; 0x5580 <vfprintf+0x352>
    5562:	80 e3       	ldi	r24, 0x30	; 48
    5564:	90 e0       	ldi	r25, 0x00	; 0
    5566:	b3 01       	movw	r22, r6
    5568:	0e 94 44 2d 	call	0x5a88	; 0x5a88 <fputc>
    556c:	02 ff       	sbrs	r16, 2
    556e:	1d c0       	rjmp	.+58     	; 0x55aa <vfprintf+0x37c>
    5570:	01 fd       	sbrc	r16, 1
    5572:	03 c0       	rjmp	.+6      	; 0x557a <vfprintf+0x34c>
    5574:	88 e7       	ldi	r24, 0x78	; 120
    5576:	90 e0       	ldi	r25, 0x00	; 0
    5578:	0e c0       	rjmp	.+28     	; 0x5596 <vfprintf+0x368>
    557a:	88 e5       	ldi	r24, 0x58	; 88
    557c:	90 e0       	ldi	r25, 0x00	; 0
    557e:	0b c0       	rjmp	.+22     	; 0x5596 <vfprintf+0x368>
    5580:	80 2f       	mov	r24, r16
    5582:	86 78       	andi	r24, 0x86	; 134
    5584:	91 f0       	breq	.+36     	; 0x55aa <vfprintf+0x37c>
    5586:	01 ff       	sbrs	r16, 1
    5588:	02 c0       	rjmp	.+4      	; 0x558e <vfprintf+0x360>
    558a:	8b e2       	ldi	r24, 0x2B	; 43
    558c:	01 c0       	rjmp	.+2      	; 0x5590 <vfprintf+0x362>
    558e:	80 e2       	ldi	r24, 0x20	; 32
    5590:	f7 fc       	sbrc	r15, 7
    5592:	8d e2       	ldi	r24, 0x2D	; 45
    5594:	90 e0       	ldi	r25, 0x00	; 0
    5596:	b3 01       	movw	r22, r6
    5598:	0e 94 44 2d 	call	0x5a88	; 0x5a88 <fputc>
    559c:	06 c0       	rjmp	.+12     	; 0x55aa <vfprintf+0x37c>
    559e:	80 e3       	ldi	r24, 0x30	; 48
    55a0:	90 e0       	ldi	r25, 0x00	; 0
    55a2:	b3 01       	movw	r22, r6
    55a4:	0e 94 44 2d 	call	0x5a88	; 0x5a88 <fputc>
    55a8:	9a 94       	dec	r9
    55aa:	d9 14       	cp	r13, r9
    55ac:	c0 f3       	brcs	.-16     	; 0x559e <vfprintf+0x370>
    55ae:	da 94       	dec	r13
    55b0:	f1 01       	movw	r30, r2
    55b2:	ed 0d       	add	r30, r13
    55b4:	f1 1d       	adc	r31, r1
    55b6:	80 81       	ld	r24, Z
    55b8:	90 e0       	ldi	r25, 0x00	; 0
    55ba:	b3 01       	movw	r22, r6
    55bc:	0e 94 44 2d 	call	0x5a88	; 0x5a88 <fputc>
    55c0:	dd 20       	and	r13, r13
    55c2:	a9 f7       	brne	.-22     	; 0x55ae <vfprintf+0x380>
    55c4:	06 c0       	rjmp	.+12     	; 0x55d2 <vfprintf+0x3a4>
    55c6:	80 e2       	ldi	r24, 0x20	; 32
    55c8:	90 e0       	ldi	r25, 0x00	; 0
    55ca:	b3 01       	movw	r22, r6
    55cc:	0e 94 44 2d 	call	0x5a88	; 0x5a88 <fputc>
    55d0:	ea 94       	dec	r14
    55d2:	ee 20       	and	r14, r14
    55d4:	c1 f7       	brne	.-16     	; 0x55c6 <vfprintf+0x398>
    55d6:	43 ce       	rjmp	.-890    	; 0x525e <vfprintf+0x30>
    55d8:	f3 01       	movw	r30, r6
    55da:	66 81       	ldd	r22, Z+6	; 0x06
    55dc:	77 81       	ldd	r23, Z+7	; 0x07
    55de:	cb 01       	movw	r24, r22
    55e0:	2b 96       	adiw	r28, 0x0b	; 11
    55e2:	e2 e1       	ldi	r30, 0x12	; 18
    55e4:	0c 94 b7 28 	jmp	0x516e	; 0x516e <__epilogue_restores__>

000055e8 <dtoa_prf>:
    55e8:	a9 e0       	ldi	r26, 0x09	; 9
    55ea:	b0 e0       	ldi	r27, 0x00	; 0
    55ec:	ea ef       	ldi	r30, 0xFA	; 250
    55ee:	fa e2       	ldi	r31, 0x2A	; 42
    55f0:	0c 94 9f 28 	jmp	0x513e	; 0x513e <__prologue_saves__+0x8>
    55f4:	6a 01       	movw	r12, r20
    55f6:	12 2f       	mov	r17, r18
    55f8:	a0 2e       	mov	r10, r16
    55fa:	be 2c       	mov	r11, r14
    55fc:	2b e3       	ldi	r18, 0x3B	; 59
    55fe:	20 17       	cp	r18, r16
    5600:	18 f4       	brcc	.+6      	; 0x5608 <dtoa_prf+0x20>
    5602:	2c e3       	ldi	r18, 0x3C	; 60
    5604:	92 2e       	mov	r9, r18
    5606:	02 c0       	rjmp	.+4      	; 0x560c <dtoa_prf+0x24>
    5608:	90 2e       	mov	r9, r16
    560a:	93 94       	inc	r9
    560c:	ae 01       	movw	r20, r28
    560e:	4f 5f       	subi	r20, 0xFF	; 255
    5610:	5f 4f       	sbci	r21, 0xFF	; 255
    5612:	27 e0       	ldi	r18, 0x07	; 7
    5614:	09 2d       	mov	r16, r9
    5616:	0e 94 56 2c 	call	0x58ac	; 0x58ac <__ftoa_engine>
    561a:	bc 01       	movw	r22, r24
    561c:	89 81       	ldd	r24, Y+1	; 0x01
    561e:	e8 2e       	mov	r14, r24
    5620:	ff 24       	eor	r15, r15
    5622:	c7 01       	movw	r24, r14
    5624:	89 70       	andi	r24, 0x09	; 9
    5626:	90 70       	andi	r25, 0x00	; 0
    5628:	01 97       	sbiw	r24, 0x01	; 1
    562a:	11 f4       	brne	.+4      	; 0x5630 <dtoa_prf+0x48>
    562c:	ad e2       	ldi	r26, 0x2D	; 45
    562e:	09 c0       	rjmp	.+18     	; 0x5642 <dtoa_prf+0x5a>
    5630:	b1 fe       	sbrs	r11, 1
    5632:	02 c0       	rjmp	.+4      	; 0x5638 <dtoa_prf+0x50>
    5634:	ab e2       	ldi	r26, 0x2B	; 43
    5636:	05 c0       	rjmp	.+10     	; 0x5642 <dtoa_prf+0x5a>
    5638:	b0 fc       	sbrc	r11, 0
    563a:	02 c0       	rjmp	.+4      	; 0x5640 <dtoa_prf+0x58>
    563c:	a0 e0       	ldi	r26, 0x00	; 0
    563e:	01 c0       	rjmp	.+2      	; 0x5642 <dtoa_prf+0x5a>
    5640:	a0 e2       	ldi	r26, 0x20	; 32
    5642:	e3 fe       	sbrs	r14, 3
    5644:	3b c0       	rjmp	.+118    	; 0x56bc <dtoa_prf+0xd4>
    5646:	aa 23       	and	r26, r26
    5648:	11 f4       	brne	.+4      	; 0x564e <dtoa_prf+0x66>
    564a:	23 e0       	ldi	r18, 0x03	; 3
    564c:	01 c0       	rjmp	.+2      	; 0x5650 <dtoa_prf+0x68>
    564e:	24 e0       	ldi	r18, 0x04	; 4
    5650:	21 17       	cp	r18, r17
    5652:	10 f0       	brcs	.+4      	; 0x5658 <dtoa_prf+0x70>
    5654:	20 e0       	ldi	r18, 0x00	; 0
    5656:	02 c0       	rjmp	.+4      	; 0x565c <dtoa_prf+0x74>
    5658:	12 1b       	sub	r17, r18
    565a:	21 2f       	mov	r18, r17
    565c:	eb 2c       	mov	r14, r11
    565e:	b4 fe       	sbrs	r11, 4
    5660:	02 c0       	rjmp	.+4      	; 0x5666 <dtoa_prf+0x7e>
    5662:	32 2f       	mov	r19, r18
    5664:	0a c0       	rjmp	.+20     	; 0x567a <dtoa_prf+0x92>
    5666:	f6 01       	movw	r30, r12
    5668:	32 2f       	mov	r19, r18
    566a:	80 e2       	ldi	r24, 0x20	; 32
    566c:	02 c0       	rjmp	.+4      	; 0x5672 <dtoa_prf+0x8a>
    566e:	81 93       	st	Z+, r24
    5670:	31 50       	subi	r19, 0x01	; 1
    5672:	33 23       	and	r19, r19
    5674:	e1 f7       	brne	.-8      	; 0x566e <dtoa_prf+0x86>
    5676:	c2 0e       	add	r12, r18
    5678:	d1 1c       	adc	r13, r1
    567a:	aa 23       	and	r26, r26
    567c:	19 f0       	breq	.+6      	; 0x5684 <dtoa_prf+0x9c>
    567e:	f6 01       	movw	r30, r12
    5680:	a1 93       	st	Z+, r26
    5682:	6f 01       	movw	r12, r30
    5684:	f6 01       	movw	r30, r12
    5686:	31 96       	adiw	r30, 0x01	; 1
    5688:	e2 fe       	sbrs	r14, 2
    568a:	05 c0       	rjmp	.+10     	; 0x5696 <dtoa_prf+0xae>
    568c:	9e e4       	ldi	r25, 0x4E	; 78
    568e:	d6 01       	movw	r26, r12
    5690:	9c 93       	st	X, r25
    5692:	81 e4       	ldi	r24, 0x41	; 65
    5694:	04 c0       	rjmp	.+8      	; 0x569e <dtoa_prf+0xb6>
    5696:	9e e6       	ldi	r25, 0x6E	; 110
    5698:	d6 01       	movw	r26, r12
    569a:	9c 93       	st	X, r25
    569c:	81 e6       	ldi	r24, 0x61	; 97
    569e:	11 96       	adiw	r26, 0x01	; 1
    56a0:	8c 93       	st	X, r24
    56a2:	91 83       	std	Z+1, r25	; 0x01
    56a4:	32 96       	adiw	r30, 0x02	; 2
    56a6:	df 01       	movw	r26, r30
    56a8:	83 2f       	mov	r24, r19
    56aa:	90 e2       	ldi	r25, 0x20	; 32
    56ac:	02 c0       	rjmp	.+4      	; 0x56b2 <dtoa_prf+0xca>
    56ae:	9d 93       	st	X+, r25
    56b0:	81 50       	subi	r24, 0x01	; 1
    56b2:	88 23       	and	r24, r24
    56b4:	e1 f7       	brne	.-8      	; 0x56ae <dtoa_prf+0xc6>
    56b6:	e3 0f       	add	r30, r19
    56b8:	f1 1d       	adc	r31, r1
    56ba:	40 c0       	rjmp	.+128    	; 0x573c <dtoa_prf+0x154>
    56bc:	e2 fe       	sbrs	r14, 2
    56be:	42 c0       	rjmp	.+132    	; 0x5744 <dtoa_prf+0x15c>
    56c0:	aa 23       	and	r26, r26
    56c2:	11 f4       	brne	.+4      	; 0x56c8 <dtoa_prf+0xe0>
    56c4:	23 e0       	ldi	r18, 0x03	; 3
    56c6:	01 c0       	rjmp	.+2      	; 0x56ca <dtoa_prf+0xe2>
    56c8:	24 e0       	ldi	r18, 0x04	; 4
    56ca:	21 17       	cp	r18, r17
    56cc:	10 f0       	brcs	.+4      	; 0x56d2 <dtoa_prf+0xea>
    56ce:	20 e0       	ldi	r18, 0x00	; 0
    56d0:	02 c0       	rjmp	.+4      	; 0x56d6 <dtoa_prf+0xee>
    56d2:	12 1b       	sub	r17, r18
    56d4:	21 2f       	mov	r18, r17
    56d6:	eb 2c       	mov	r14, r11
    56d8:	b4 fe       	sbrs	r11, 4
    56da:	02 c0       	rjmp	.+4      	; 0x56e0 <dtoa_prf+0xf8>
    56dc:	92 2f       	mov	r25, r18
    56de:	0a c0       	rjmp	.+20     	; 0x56f4 <dtoa_prf+0x10c>
    56e0:	f6 01       	movw	r30, r12
    56e2:	92 2f       	mov	r25, r18
    56e4:	80 e2       	ldi	r24, 0x20	; 32
    56e6:	02 c0       	rjmp	.+4      	; 0x56ec <dtoa_prf+0x104>
    56e8:	81 93       	st	Z+, r24
    56ea:	91 50       	subi	r25, 0x01	; 1
    56ec:	99 23       	and	r25, r25
    56ee:	e1 f7       	brne	.-8      	; 0x56e8 <dtoa_prf+0x100>
    56f0:	c2 0e       	add	r12, r18
    56f2:	d1 1c       	adc	r13, r1
    56f4:	aa 23       	and	r26, r26
    56f6:	19 f0       	breq	.+6      	; 0x56fe <dtoa_prf+0x116>
    56f8:	f6 01       	movw	r30, r12
    56fa:	a1 93       	st	Z+, r26
    56fc:	6f 01       	movw	r12, r30
    56fe:	f6 01       	movw	r30, r12
    5700:	31 96       	adiw	r30, 0x01	; 1
    5702:	e2 fe       	sbrs	r14, 2
    5704:	08 c0       	rjmp	.+16     	; 0x5716 <dtoa_prf+0x12e>
    5706:	89 e4       	ldi	r24, 0x49	; 73
    5708:	d6 01       	movw	r26, r12
    570a:	8c 93       	st	X, r24
    570c:	8e e4       	ldi	r24, 0x4E	; 78
    570e:	11 96       	adiw	r26, 0x01	; 1
    5710:	8c 93       	st	X, r24
    5712:	86 e4       	ldi	r24, 0x46	; 70
    5714:	07 c0       	rjmp	.+14     	; 0x5724 <dtoa_prf+0x13c>
    5716:	89 e6       	ldi	r24, 0x69	; 105
    5718:	d6 01       	movw	r26, r12
    571a:	8c 93       	st	X, r24
    571c:	8e e6       	ldi	r24, 0x6E	; 110
    571e:	11 96       	adiw	r26, 0x01	; 1
    5720:	8c 93       	st	X, r24
    5722:	86 e6       	ldi	r24, 0x66	; 102
    5724:	81 83       	std	Z+1, r24	; 0x01
    5726:	32 96       	adiw	r30, 0x02	; 2
    5728:	df 01       	movw	r26, r30
    572a:	89 2f       	mov	r24, r25
    572c:	20 e2       	ldi	r18, 0x20	; 32
    572e:	02 c0       	rjmp	.+4      	; 0x5734 <dtoa_prf+0x14c>
    5730:	2d 93       	st	X+, r18
    5732:	81 50       	subi	r24, 0x01	; 1
    5734:	88 23       	and	r24, r24
    5736:	e1 f7       	brne	.-8      	; 0x5730 <dtoa_prf+0x148>
    5738:	e9 0f       	add	r30, r25
    573a:	f1 1d       	adc	r31, r1
    573c:	10 82       	st	Z, r1
    573e:	2e ef       	ldi	r18, 0xFE	; 254
    5740:	3f ef       	ldi	r19, 0xFF	; 255
    5742:	af c0       	rjmp	.+350    	; 0x58a2 <dtoa_prf+0x2ba>
    5744:	16 16       	cp	r1, r22
    5746:	17 06       	cpc	r1, r23
    5748:	1c f0       	brlt	.+6      	; 0x5750 <dtoa_prf+0x168>
    574a:	41 e0       	ldi	r20, 0x01	; 1
    574c:	50 e0       	ldi	r21, 0x00	; 0
    574e:	03 c0       	rjmp	.+6      	; 0x5756 <dtoa_prf+0x16e>
    5750:	ab 01       	movw	r20, r22
    5752:	4f 5f       	subi	r20, 0xFF	; 255
    5754:	5f 4f       	sbci	r21, 0xFF	; 255
    5756:	aa 20       	and	r10, r10
    5758:	19 f4       	brne	.+6      	; 0x5760 <dtoa_prf+0x178>
    575a:	80 e0       	ldi	r24, 0x00	; 0
    575c:	90 e0       	ldi	r25, 0x00	; 0
    575e:	03 c0       	rjmp	.+6      	; 0x5766 <dtoa_prf+0x17e>
    5760:	8a 2d       	mov	r24, r10
    5762:	90 e0       	ldi	r25, 0x00	; 0
    5764:	01 96       	adiw	r24, 0x01	; 1
    5766:	20 e0       	ldi	r18, 0x00	; 0
    5768:	30 e0       	ldi	r19, 0x00	; 0
    576a:	aa 23       	and	r26, r26
    576c:	11 f0       	breq	.+4      	; 0x5772 <dtoa_prf+0x18a>
    576e:	21 e0       	ldi	r18, 0x01	; 1
    5770:	30 e0       	ldi	r19, 0x00	; 0
    5772:	24 0f       	add	r18, r20
    5774:	35 1f       	adc	r19, r21
    5776:	28 0f       	add	r18, r24
    5778:	39 1f       	adc	r19, r25
    577a:	81 2f       	mov	r24, r17
    577c:	90 e0       	ldi	r25, 0x00	; 0
    577e:	28 17       	cp	r18, r24
    5780:	39 07       	cpc	r19, r25
    5782:	14 f0       	brlt	.+4      	; 0x5788 <dtoa_prf+0x1a0>
    5784:	20 e0       	ldi	r18, 0x00	; 0
    5786:	02 c0       	rjmp	.+4      	; 0x578c <dtoa_prf+0x1a4>
    5788:	12 1b       	sub	r17, r18
    578a:	21 2f       	mov	r18, r17
    578c:	4b 2d       	mov	r20, r11
    578e:	50 e0       	ldi	r21, 0x00	; 0
    5790:	ca 01       	movw	r24, r20
    5792:	80 71       	andi	r24, 0x10	; 16
    5794:	90 70       	andi	r25, 0x00	; 0
    5796:	b4 fc       	sbrc	r11, 4
    5798:	0d c0       	rjmp	.+26     	; 0x57b4 <dtoa_prf+0x1cc>
    579a:	b3 fc       	sbrc	r11, 3
    579c:	0b c0       	rjmp	.+22     	; 0x57b4 <dtoa_prf+0x1cc>
    579e:	f6 01       	movw	r30, r12
    57a0:	32 2f       	mov	r19, r18
    57a2:	40 e2       	ldi	r20, 0x20	; 32
    57a4:	02 c0       	rjmp	.+4      	; 0x57aa <dtoa_prf+0x1c2>
    57a6:	41 93       	st	Z+, r20
    57a8:	31 50       	subi	r19, 0x01	; 1
    57aa:	33 23       	and	r19, r19
    57ac:	e1 f7       	brne	.-8      	; 0x57a6 <dtoa_prf+0x1be>
    57ae:	c2 0e       	add	r12, r18
    57b0:	d1 1c       	adc	r13, r1
    57b2:	01 c0       	rjmp	.+2      	; 0x57b6 <dtoa_prf+0x1ce>
    57b4:	32 2f       	mov	r19, r18
    57b6:	aa 23       	and	r26, r26
    57b8:	19 f0       	breq	.+6      	; 0x57c0 <dtoa_prf+0x1d8>
    57ba:	f6 01       	movw	r30, r12
    57bc:	a1 93       	st	Z+, r26
    57be:	6f 01       	movw	r12, r30
    57c0:	89 2b       	or	r24, r25
    57c2:	11 f0       	breq	.+4      	; 0x57c8 <dtoa_prf+0x1e0>
    57c4:	13 2f       	mov	r17, r19
    57c6:	0a c0       	rjmp	.+20     	; 0x57dc <dtoa_prf+0x1f4>
    57c8:	f6 01       	movw	r30, r12
    57ca:	13 2f       	mov	r17, r19
    57cc:	80 e3       	ldi	r24, 0x30	; 48
    57ce:	02 c0       	rjmp	.+4      	; 0x57d4 <dtoa_prf+0x1ec>
    57d0:	81 93       	st	Z+, r24
    57d2:	11 50       	subi	r17, 0x01	; 1
    57d4:	11 23       	and	r17, r17
    57d6:	e1 f7       	brne	.-8      	; 0x57d0 <dtoa_prf+0x1e8>
    57d8:	c3 0e       	add	r12, r19
    57da:	d1 1c       	adc	r13, r1
    57dc:	09 2d       	mov	r16, r9
    57de:	06 0f       	add	r16, r22
    57e0:	ba 80       	ldd	r11, Y+2	; 0x02
    57e2:	90 e1       	ldi	r25, 0x10	; 16
    57e4:	89 2e       	mov	r8, r25
    57e6:	91 2c       	mov	r9, r1
    57e8:	8e 20       	and	r8, r14
    57ea:	9f 20       	and	r9, r15
    57ec:	e4 fe       	sbrs	r14, 4
    57ee:	04 c0       	rjmp	.+8      	; 0x57f8 <dtoa_prf+0x210>
    57f0:	f1 e3       	ldi	r31, 0x31	; 49
    57f2:	bf 16       	cp	r11, r31
    57f4:	09 f4       	brne	.+2      	; 0x57f8 <dtoa_prf+0x210>
    57f6:	01 50       	subi	r16, 0x01	; 1
    57f8:	10 16       	cp	r1, r16
    57fa:	14 f0       	brlt	.+4      	; 0x5800 <dtoa_prf+0x218>
    57fc:	01 e0       	ldi	r16, 0x01	; 1
    57fe:	03 c0       	rjmp	.+6      	; 0x5806 <dtoa_prf+0x21e>
    5800:	09 30       	cpi	r16, 0x09	; 9
    5802:	08 f0       	brcs	.+2      	; 0x5806 <dtoa_prf+0x21e>
    5804:	08 e0       	ldi	r16, 0x08	; 8
    5806:	9b 01       	movw	r18, r22
    5808:	77 ff       	sbrs	r23, 7
    580a:	02 c0       	rjmp	.+4      	; 0x5810 <dtoa_prf+0x228>
    580c:	20 e0       	ldi	r18, 0x00	; 0
    580e:	30 e0       	ldi	r19, 0x00	; 0
    5810:	cb 01       	movw	r24, r22
    5812:	01 96       	adiw	r24, 0x01	; 1
    5814:	82 1b       	sub	r24, r18
    5816:	93 0b       	sbc	r25, r19
    5818:	fe 01       	movw	r30, r28
    581a:	31 96       	adiw	r30, 0x01	; 1
    581c:	e8 0f       	add	r30, r24
    581e:	f9 1f       	adc	r31, r25
    5820:	8e e2       	ldi	r24, 0x2E	; 46
    5822:	f8 2e       	mov	r15, r24
    5824:	3b 01       	movw	r6, r22
    5826:	60 1a       	sub	r6, r16
    5828:	71 08       	sbc	r7, r1
    582a:	8a 2d       	mov	r24, r10
    582c:	90 e0       	ldi	r25, 0x00	; 0
    582e:	44 27       	eor	r20, r20
    5830:	55 27       	eor	r21, r21
    5832:	48 1b       	sub	r20, r24
    5834:	59 0b       	sbc	r21, r25
    5836:	8f ef       	ldi	r24, 0xFF	; 255
    5838:	2f 3f       	cpi	r18, 0xFF	; 255
    583a:	38 07       	cpc	r19, r24
    583c:	19 f4       	brne	.+6      	; 0x5844 <dtoa_prf+0x25c>
    583e:	d6 01       	movw	r26, r12
    5840:	fd 92       	st	X+, r15
    5842:	6d 01       	movw	r12, r26
    5844:	62 17       	cp	r22, r18
    5846:	73 07       	cpc	r23, r19
    5848:	2c f0       	brlt	.+10     	; 0x5854 <dtoa_prf+0x26c>
    584a:	62 16       	cp	r6, r18
    584c:	73 06       	cpc	r7, r19
    584e:	14 f4       	brge	.+4      	; 0x5854 <dtoa_prf+0x26c>
    5850:	80 81       	ld	r24, Z
    5852:	01 c0       	rjmp	.+2      	; 0x5856 <dtoa_prf+0x26e>
    5854:	80 e3       	ldi	r24, 0x30	; 48
    5856:	21 50       	subi	r18, 0x01	; 1
    5858:	30 40       	sbci	r19, 0x00	; 0
    585a:	31 96       	adiw	r30, 0x01	; 1
    585c:	24 17       	cp	r18, r20
    585e:	35 07       	cpc	r19, r21
    5860:	24 f0       	brlt	.+8      	; 0x586a <dtoa_prf+0x282>
    5862:	d6 01       	movw	r26, r12
    5864:	8d 93       	st	X+, r24
    5866:	6d 01       	movw	r12, r26
    5868:	e6 cf       	rjmp	.-52     	; 0x5836 <dtoa_prf+0x24e>
    586a:	26 17       	cp	r18, r22
    586c:	37 07       	cpc	r19, r23
    586e:	49 f4       	brne	.+18     	; 0x5882 <dtoa_prf+0x29a>
    5870:	b5 e3       	ldi	r27, 0x35	; 53
    5872:	bb 15       	cp	r27, r11
    5874:	28 f0       	brcs	.+10     	; 0x5880 <dtoa_prf+0x298>
    5876:	bb 16       	cp	r11, r27
    5878:	21 f4       	brne	.+8      	; 0x5882 <dtoa_prf+0x29a>
    587a:	81 14       	cp	r8, r1
    587c:	91 04       	cpc	r9, r1
    587e:	09 f4       	brne	.+2      	; 0x5882 <dtoa_prf+0x29a>
    5880:	81 e3       	ldi	r24, 0x31	; 49
    5882:	f6 01       	movw	r30, r12
    5884:	81 93       	st	Z+, r24
    5886:	d6 01       	movw	r26, r12
    5888:	81 2f       	mov	r24, r17
    588a:	90 e2       	ldi	r25, 0x20	; 32
    588c:	02 c0       	rjmp	.+4      	; 0x5892 <dtoa_prf+0x2aa>
    588e:	9c 93       	st	X, r25
    5890:	81 50       	subi	r24, 0x01	; 1
    5892:	11 96       	adiw	r26, 0x01	; 1
    5894:	88 23       	and	r24, r24
    5896:	d9 f7       	brne	.-10     	; 0x588e <dtoa_prf+0x2a6>
    5898:	e1 0f       	add	r30, r17
    589a:	f1 1d       	adc	r31, r1
    589c:	10 82       	st	Z, r1
    589e:	20 e0       	ldi	r18, 0x00	; 0
    58a0:	30 e0       	ldi	r19, 0x00	; 0
    58a2:	c9 01       	movw	r24, r18
    58a4:	29 96       	adiw	r28, 0x09	; 9
    58a6:	ee e0       	ldi	r30, 0x0E	; 14
    58a8:	0c 94 bb 28 	jmp	0x5176	; 0x5176 <__epilogue_restores__+0x8>

000058ac <__ftoa_engine>:
    58ac:	28 30       	cpi	r18, 0x08	; 8
    58ae:	08 f0       	brcs	.+2      	; 0x58b2 <__ftoa_engine+0x6>
    58b0:	27 e0       	ldi	r18, 0x07	; 7
    58b2:	33 27       	eor	r19, r19
    58b4:	da 01       	movw	r26, r20
    58b6:	99 0f       	add	r25, r25
    58b8:	31 1d       	adc	r19, r1
    58ba:	87 fd       	sbrc	r24, 7
    58bc:	91 60       	ori	r25, 0x01	; 1
    58be:	00 96       	adiw	r24, 0x00	; 0
    58c0:	61 05       	cpc	r22, r1
    58c2:	71 05       	cpc	r23, r1
    58c4:	39 f4       	brne	.+14     	; 0x58d4 <__ftoa_engine+0x28>
    58c6:	32 60       	ori	r19, 0x02	; 2
    58c8:	2e 5f       	subi	r18, 0xFE	; 254
    58ca:	3d 93       	st	X+, r19
    58cc:	30 e3       	ldi	r19, 0x30	; 48
    58ce:	2a 95       	dec	r18
    58d0:	e1 f7       	brne	.-8      	; 0x58ca <__ftoa_engine+0x1e>
    58d2:	08 95       	ret
    58d4:	9f 3f       	cpi	r25, 0xFF	; 255
    58d6:	30 f0       	brcs	.+12     	; 0x58e4 <__ftoa_engine+0x38>
    58d8:	80 38       	cpi	r24, 0x80	; 128
    58da:	71 05       	cpc	r23, r1
    58dc:	61 05       	cpc	r22, r1
    58de:	09 f0       	breq	.+2      	; 0x58e2 <__ftoa_engine+0x36>
    58e0:	3c 5f       	subi	r19, 0xFC	; 252
    58e2:	3c 5f       	subi	r19, 0xFC	; 252
    58e4:	3d 93       	st	X+, r19
    58e6:	91 30       	cpi	r25, 0x01	; 1
    58e8:	08 f0       	brcs	.+2      	; 0x58ec <__ftoa_engine+0x40>
    58ea:	80 68       	ori	r24, 0x80	; 128
    58ec:	91 1d       	adc	r25, r1
    58ee:	df 93       	push	r29
    58f0:	cf 93       	push	r28
    58f2:	1f 93       	push	r17
    58f4:	0f 93       	push	r16
    58f6:	ff 92       	push	r15
    58f8:	ef 92       	push	r14
    58fa:	19 2f       	mov	r17, r25
    58fc:	98 7f       	andi	r25, 0xF8	; 248
    58fe:	96 95       	lsr	r25
    5900:	e9 2f       	mov	r30, r25
    5902:	96 95       	lsr	r25
    5904:	96 95       	lsr	r25
    5906:	e9 0f       	add	r30, r25
    5908:	ff 27       	eor	r31, r31
    590a:	e2 55       	subi	r30, 0x52	; 82
    590c:	ff 4f       	sbci	r31, 0xFF	; 255
    590e:	99 27       	eor	r25, r25
    5910:	33 27       	eor	r19, r19
    5912:	ee 24       	eor	r14, r14
    5914:	ff 24       	eor	r15, r15
    5916:	a7 01       	movw	r20, r14
    5918:	e7 01       	movw	r28, r14
    591a:	05 90       	lpm	r0, Z+
    591c:	08 94       	sec
    591e:	07 94       	ror	r0
    5920:	28 f4       	brcc	.+10     	; 0x592c <__ftoa_engine+0x80>
    5922:	36 0f       	add	r19, r22
    5924:	e7 1e       	adc	r14, r23
    5926:	f8 1e       	adc	r15, r24
    5928:	49 1f       	adc	r20, r25
    592a:	51 1d       	adc	r21, r1
    592c:	66 0f       	add	r22, r22
    592e:	77 1f       	adc	r23, r23
    5930:	88 1f       	adc	r24, r24
    5932:	99 1f       	adc	r25, r25
    5934:	06 94       	lsr	r0
    5936:	a1 f7       	brne	.-24     	; 0x5920 <__ftoa_engine+0x74>
    5938:	05 90       	lpm	r0, Z+
    593a:	07 94       	ror	r0
    593c:	28 f4       	brcc	.+10     	; 0x5948 <__ftoa_engine+0x9c>
    593e:	e7 0e       	add	r14, r23
    5940:	f8 1e       	adc	r15, r24
    5942:	49 1f       	adc	r20, r25
    5944:	56 1f       	adc	r21, r22
    5946:	c1 1d       	adc	r28, r1
    5948:	77 0f       	add	r23, r23
    594a:	88 1f       	adc	r24, r24
    594c:	99 1f       	adc	r25, r25
    594e:	66 1f       	adc	r22, r22
    5950:	06 94       	lsr	r0
    5952:	a1 f7       	brne	.-24     	; 0x593c <__ftoa_engine+0x90>
    5954:	05 90       	lpm	r0, Z+
    5956:	07 94       	ror	r0
    5958:	28 f4       	brcc	.+10     	; 0x5964 <__ftoa_engine+0xb8>
    595a:	f8 0e       	add	r15, r24
    595c:	49 1f       	adc	r20, r25
    595e:	56 1f       	adc	r21, r22
    5960:	c7 1f       	adc	r28, r23
    5962:	d1 1d       	adc	r29, r1
    5964:	88 0f       	add	r24, r24
    5966:	99 1f       	adc	r25, r25
    5968:	66 1f       	adc	r22, r22
    596a:	77 1f       	adc	r23, r23
    596c:	06 94       	lsr	r0
    596e:	a1 f7       	brne	.-24     	; 0x5958 <__ftoa_engine+0xac>
    5970:	05 90       	lpm	r0, Z+
    5972:	07 94       	ror	r0
    5974:	20 f4       	brcc	.+8      	; 0x597e <__ftoa_engine+0xd2>
    5976:	49 0f       	add	r20, r25
    5978:	56 1f       	adc	r21, r22
    597a:	c7 1f       	adc	r28, r23
    597c:	d8 1f       	adc	r29, r24
    597e:	99 0f       	add	r25, r25
    5980:	66 1f       	adc	r22, r22
    5982:	77 1f       	adc	r23, r23
    5984:	88 1f       	adc	r24, r24
    5986:	06 94       	lsr	r0
    5988:	a9 f7       	brne	.-22     	; 0x5974 <__ftoa_engine+0xc8>
    598a:	84 91       	lpm	r24, Z+
    598c:	10 95       	com	r17
    598e:	17 70       	andi	r17, 0x07	; 7
    5990:	41 f0       	breq	.+16     	; 0x59a2 <__ftoa_engine+0xf6>
    5992:	d6 95       	lsr	r29
    5994:	c7 95       	ror	r28
    5996:	57 95       	ror	r21
    5998:	47 95       	ror	r20
    599a:	f7 94       	ror	r15
    599c:	e7 94       	ror	r14
    599e:	1a 95       	dec	r17
    59a0:	c1 f7       	brne	.-16     	; 0x5992 <__ftoa_engine+0xe6>
    59a2:	e4 e5       	ldi	r30, 0x54	; 84
    59a4:	f0 e0       	ldi	r31, 0x00	; 0
    59a6:	68 94       	set
    59a8:	15 90       	lpm	r1, Z+
    59aa:	15 91       	lpm	r17, Z+
    59ac:	35 91       	lpm	r19, Z+
    59ae:	65 91       	lpm	r22, Z+
    59b0:	95 91       	lpm	r25, Z+
    59b2:	05 90       	lpm	r0, Z+
    59b4:	7f e2       	ldi	r23, 0x2F	; 47
    59b6:	73 95       	inc	r23
    59b8:	e1 18       	sub	r14, r1
    59ba:	f1 0a       	sbc	r15, r17
    59bc:	43 0b       	sbc	r20, r19
    59be:	56 0b       	sbc	r21, r22
    59c0:	c9 0b       	sbc	r28, r25
    59c2:	d0 09       	sbc	r29, r0
    59c4:	c0 f7       	brcc	.-16     	; 0x59b6 <__ftoa_engine+0x10a>
    59c6:	e1 0c       	add	r14, r1
    59c8:	f1 1e       	adc	r15, r17
    59ca:	43 1f       	adc	r20, r19
    59cc:	56 1f       	adc	r21, r22
    59ce:	c9 1f       	adc	r28, r25
    59d0:	d0 1d       	adc	r29, r0
    59d2:	7e f4       	brtc	.+30     	; 0x59f2 <__ftoa_engine+0x146>
    59d4:	70 33       	cpi	r23, 0x30	; 48
    59d6:	11 f4       	brne	.+4      	; 0x59dc <__ftoa_engine+0x130>
    59d8:	8a 95       	dec	r24
    59da:	e6 cf       	rjmp	.-52     	; 0x59a8 <__ftoa_engine+0xfc>
    59dc:	e8 94       	clt
    59de:	01 50       	subi	r16, 0x01	; 1
    59e0:	30 f0       	brcs	.+12     	; 0x59ee <__ftoa_engine+0x142>
    59e2:	08 0f       	add	r16, r24
    59e4:	0a f4       	brpl	.+2      	; 0x59e8 <__ftoa_engine+0x13c>
    59e6:	00 27       	eor	r16, r16
    59e8:	02 17       	cp	r16, r18
    59ea:	08 f4       	brcc	.+2      	; 0x59ee <__ftoa_engine+0x142>
    59ec:	20 2f       	mov	r18, r16
    59ee:	23 95       	inc	r18
    59f0:	02 2f       	mov	r16, r18
    59f2:	7a 33       	cpi	r23, 0x3A	; 58
    59f4:	28 f0       	brcs	.+10     	; 0x5a00 <__ftoa_engine+0x154>
    59f6:	79 e3       	ldi	r23, 0x39	; 57
    59f8:	7d 93       	st	X+, r23
    59fa:	2a 95       	dec	r18
    59fc:	e9 f7       	brne	.-6      	; 0x59f8 <__ftoa_engine+0x14c>
    59fe:	10 c0       	rjmp	.+32     	; 0x5a20 <__ftoa_engine+0x174>
    5a00:	7d 93       	st	X+, r23
    5a02:	2a 95       	dec	r18
    5a04:	89 f6       	brne	.-94     	; 0x59a8 <__ftoa_engine+0xfc>
    5a06:	06 94       	lsr	r0
    5a08:	97 95       	ror	r25
    5a0a:	67 95       	ror	r22
    5a0c:	37 95       	ror	r19
    5a0e:	17 95       	ror	r17
    5a10:	17 94       	ror	r1
    5a12:	e1 18       	sub	r14, r1
    5a14:	f1 0a       	sbc	r15, r17
    5a16:	43 0b       	sbc	r20, r19
    5a18:	56 0b       	sbc	r21, r22
    5a1a:	c9 0b       	sbc	r28, r25
    5a1c:	d0 09       	sbc	r29, r0
    5a1e:	98 f0       	brcs	.+38     	; 0x5a46 <__ftoa_engine+0x19a>
    5a20:	23 95       	inc	r18
    5a22:	7e 91       	ld	r23, -X
    5a24:	73 95       	inc	r23
    5a26:	7a 33       	cpi	r23, 0x3A	; 58
    5a28:	08 f0       	brcs	.+2      	; 0x5a2c <__ftoa_engine+0x180>
    5a2a:	70 e3       	ldi	r23, 0x30	; 48
    5a2c:	7c 93       	st	X, r23
    5a2e:	20 13       	cpse	r18, r16
    5a30:	b8 f7       	brcc	.-18     	; 0x5a20 <__ftoa_engine+0x174>
    5a32:	7e 91       	ld	r23, -X
    5a34:	70 61       	ori	r23, 0x10	; 16
    5a36:	7d 93       	st	X+, r23
    5a38:	30 f0       	brcs	.+12     	; 0x5a46 <__ftoa_engine+0x19a>
    5a3a:	83 95       	inc	r24
    5a3c:	71 e3       	ldi	r23, 0x31	; 49
    5a3e:	7d 93       	st	X+, r23
    5a40:	70 e3       	ldi	r23, 0x30	; 48
    5a42:	2a 95       	dec	r18
    5a44:	e1 f7       	brne	.-8      	; 0x5a3e <__ftoa_engine+0x192>
    5a46:	11 24       	eor	r1, r1
    5a48:	ef 90       	pop	r14
    5a4a:	ff 90       	pop	r15
    5a4c:	0f 91       	pop	r16
    5a4e:	1f 91       	pop	r17
    5a50:	cf 91       	pop	r28
    5a52:	df 91       	pop	r29
    5a54:	99 27       	eor	r25, r25
    5a56:	87 fd       	sbrc	r24, 7
    5a58:	90 95       	com	r25
    5a5a:	08 95       	ret

00005a5c <strnlen_P>:
    5a5c:	fc 01       	movw	r30, r24
    5a5e:	05 90       	lpm	r0, Z+
    5a60:	61 50       	subi	r22, 0x01	; 1
    5a62:	70 40       	sbci	r23, 0x00	; 0
    5a64:	01 10       	cpse	r0, r1
    5a66:	d8 f7       	brcc	.-10     	; 0x5a5e <strnlen_P+0x2>
    5a68:	80 95       	com	r24
    5a6a:	90 95       	com	r25
    5a6c:	8e 0f       	add	r24, r30
    5a6e:	9f 1f       	adc	r25, r31
    5a70:	08 95       	ret

00005a72 <strnlen>:
    5a72:	fc 01       	movw	r30, r24
    5a74:	61 50       	subi	r22, 0x01	; 1
    5a76:	70 40       	sbci	r23, 0x00	; 0
    5a78:	01 90       	ld	r0, Z+
    5a7a:	01 10       	cpse	r0, r1
    5a7c:	d8 f7       	brcc	.-10     	; 0x5a74 <strnlen+0x2>
    5a7e:	80 95       	com	r24
    5a80:	90 95       	com	r25
    5a82:	8e 0f       	add	r24, r30
    5a84:	9f 1f       	adc	r25, r31
    5a86:	08 95       	ret

00005a88 <fputc>:
    5a88:	0f 93       	push	r16
    5a8a:	1f 93       	push	r17
    5a8c:	cf 93       	push	r28
    5a8e:	df 93       	push	r29
    5a90:	8c 01       	movw	r16, r24
    5a92:	eb 01       	movw	r28, r22
    5a94:	8b 81       	ldd	r24, Y+3	; 0x03
    5a96:	81 ff       	sbrs	r24, 1
    5a98:	1b c0       	rjmp	.+54     	; 0x5ad0 <fputc+0x48>
    5a9a:	82 ff       	sbrs	r24, 2
    5a9c:	0d c0       	rjmp	.+26     	; 0x5ab8 <fputc+0x30>
    5a9e:	2e 81       	ldd	r18, Y+6	; 0x06
    5aa0:	3f 81       	ldd	r19, Y+7	; 0x07
    5aa2:	8c 81       	ldd	r24, Y+4	; 0x04
    5aa4:	9d 81       	ldd	r25, Y+5	; 0x05
    5aa6:	28 17       	cp	r18, r24
    5aa8:	39 07       	cpc	r19, r25
    5aaa:	64 f4       	brge	.+24     	; 0x5ac4 <fputc+0x3c>
    5aac:	e8 81       	ld	r30, Y
    5aae:	f9 81       	ldd	r31, Y+1	; 0x01
    5ab0:	01 93       	st	Z+, r16
    5ab2:	f9 83       	std	Y+1, r31	; 0x01
    5ab4:	e8 83       	st	Y, r30
    5ab6:	06 c0       	rjmp	.+12     	; 0x5ac4 <fputc+0x3c>
    5ab8:	e8 85       	ldd	r30, Y+8	; 0x08
    5aba:	f9 85       	ldd	r31, Y+9	; 0x09
    5abc:	80 2f       	mov	r24, r16
    5abe:	09 95       	icall
    5ac0:	89 2b       	or	r24, r25
    5ac2:	31 f4       	brne	.+12     	; 0x5ad0 <fputc+0x48>
    5ac4:	8e 81       	ldd	r24, Y+6	; 0x06
    5ac6:	9f 81       	ldd	r25, Y+7	; 0x07
    5ac8:	01 96       	adiw	r24, 0x01	; 1
    5aca:	9f 83       	std	Y+7, r25	; 0x07
    5acc:	8e 83       	std	Y+6, r24	; 0x06
    5ace:	02 c0       	rjmp	.+4      	; 0x5ad4 <fputc+0x4c>
    5ad0:	0f ef       	ldi	r16, 0xFF	; 255
    5ad2:	1f ef       	ldi	r17, 0xFF	; 255
    5ad4:	c8 01       	movw	r24, r16
    5ad6:	df 91       	pop	r29
    5ad8:	cf 91       	pop	r28
    5ada:	1f 91       	pop	r17
    5adc:	0f 91       	pop	r16
    5ade:	08 95       	ret

00005ae0 <__ultoa_invert>:
    5ae0:	fa 01       	movw	r30, r20
    5ae2:	aa 27       	eor	r26, r26
    5ae4:	28 30       	cpi	r18, 0x08	; 8
    5ae6:	51 f1       	breq	.+84     	; 0x5b3c <__ultoa_invert+0x5c>
    5ae8:	20 31       	cpi	r18, 0x10	; 16
    5aea:	81 f1       	breq	.+96     	; 0x5b4c <__ultoa_invert+0x6c>
    5aec:	e8 94       	clt
    5aee:	6f 93       	push	r22
    5af0:	6e 7f       	andi	r22, 0xFE	; 254
    5af2:	6e 5f       	subi	r22, 0xFE	; 254
    5af4:	7f 4f       	sbci	r23, 0xFF	; 255
    5af6:	8f 4f       	sbci	r24, 0xFF	; 255
    5af8:	9f 4f       	sbci	r25, 0xFF	; 255
    5afa:	af 4f       	sbci	r26, 0xFF	; 255
    5afc:	b1 e0       	ldi	r27, 0x01	; 1
    5afe:	3e d0       	rcall	.+124    	; 0x5b7c <__ultoa_invert+0x9c>
    5b00:	b4 e0       	ldi	r27, 0x04	; 4
    5b02:	3c d0       	rcall	.+120    	; 0x5b7c <__ultoa_invert+0x9c>
    5b04:	67 0f       	add	r22, r23
    5b06:	78 1f       	adc	r23, r24
    5b08:	89 1f       	adc	r24, r25
    5b0a:	9a 1f       	adc	r25, r26
    5b0c:	a1 1d       	adc	r26, r1
    5b0e:	68 0f       	add	r22, r24
    5b10:	79 1f       	adc	r23, r25
    5b12:	8a 1f       	adc	r24, r26
    5b14:	91 1d       	adc	r25, r1
    5b16:	a1 1d       	adc	r26, r1
    5b18:	6a 0f       	add	r22, r26
    5b1a:	71 1d       	adc	r23, r1
    5b1c:	81 1d       	adc	r24, r1
    5b1e:	91 1d       	adc	r25, r1
    5b20:	a1 1d       	adc	r26, r1
    5b22:	20 d0       	rcall	.+64     	; 0x5b64 <__ultoa_invert+0x84>
    5b24:	09 f4       	brne	.+2      	; 0x5b28 <__ultoa_invert+0x48>
    5b26:	68 94       	set
    5b28:	3f 91       	pop	r19
    5b2a:	2a e0       	ldi	r18, 0x0A	; 10
    5b2c:	26 9f       	mul	r18, r22
    5b2e:	11 24       	eor	r1, r1
    5b30:	30 19       	sub	r19, r0
    5b32:	30 5d       	subi	r19, 0xD0	; 208
    5b34:	31 93       	st	Z+, r19
    5b36:	de f6       	brtc	.-74     	; 0x5aee <__ultoa_invert+0xe>
    5b38:	cf 01       	movw	r24, r30
    5b3a:	08 95       	ret
    5b3c:	46 2f       	mov	r20, r22
    5b3e:	47 70       	andi	r20, 0x07	; 7
    5b40:	40 5d       	subi	r20, 0xD0	; 208
    5b42:	41 93       	st	Z+, r20
    5b44:	b3 e0       	ldi	r27, 0x03	; 3
    5b46:	0f d0       	rcall	.+30     	; 0x5b66 <__ultoa_invert+0x86>
    5b48:	c9 f7       	brne	.-14     	; 0x5b3c <__ultoa_invert+0x5c>
    5b4a:	f6 cf       	rjmp	.-20     	; 0x5b38 <__ultoa_invert+0x58>
    5b4c:	46 2f       	mov	r20, r22
    5b4e:	4f 70       	andi	r20, 0x0F	; 15
    5b50:	40 5d       	subi	r20, 0xD0	; 208
    5b52:	4a 33       	cpi	r20, 0x3A	; 58
    5b54:	18 f0       	brcs	.+6      	; 0x5b5c <__ultoa_invert+0x7c>
    5b56:	49 5d       	subi	r20, 0xD9	; 217
    5b58:	31 fd       	sbrc	r19, 1
    5b5a:	40 52       	subi	r20, 0x20	; 32
    5b5c:	41 93       	st	Z+, r20
    5b5e:	02 d0       	rcall	.+4      	; 0x5b64 <__ultoa_invert+0x84>
    5b60:	a9 f7       	brne	.-22     	; 0x5b4c <__ultoa_invert+0x6c>
    5b62:	ea cf       	rjmp	.-44     	; 0x5b38 <__ultoa_invert+0x58>
    5b64:	b4 e0       	ldi	r27, 0x04	; 4
    5b66:	a6 95       	lsr	r26
    5b68:	97 95       	ror	r25
    5b6a:	87 95       	ror	r24
    5b6c:	77 95       	ror	r23
    5b6e:	67 95       	ror	r22
    5b70:	ba 95       	dec	r27
    5b72:	c9 f7       	brne	.-14     	; 0x5b66 <__ultoa_invert+0x86>
    5b74:	00 97       	sbiw	r24, 0x00	; 0
    5b76:	61 05       	cpc	r22, r1
    5b78:	71 05       	cpc	r23, r1
    5b7a:	08 95       	ret
    5b7c:	9b 01       	movw	r18, r22
    5b7e:	ac 01       	movw	r20, r24
    5b80:	0a 2e       	mov	r0, r26
    5b82:	06 94       	lsr	r0
    5b84:	57 95       	ror	r21
    5b86:	47 95       	ror	r20
    5b88:	37 95       	ror	r19
    5b8a:	27 95       	ror	r18
    5b8c:	ba 95       	dec	r27
    5b8e:	c9 f7       	brne	.-14     	; 0x5b82 <__ultoa_invert+0xa2>
    5b90:	62 0f       	add	r22, r18
    5b92:	73 1f       	adc	r23, r19
    5b94:	84 1f       	adc	r24, r20
    5b96:	95 1f       	adc	r25, r21
    5b98:	a0 1d       	adc	r26, r0
    5b9a:	08 95       	ret

00005b9c <_exit>:
    5b9c:	f8 94       	cli

00005b9e <__stop_program>:
    5b9e:	ff cf       	rjmp	.-2      	; 0x5b9e <__stop_program>
