
Authentication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000544e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001a4  00800060  0000544e  000054e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003a  00800204  00800204  00005686  2**0
                  ALLOC
  3 .stab         00005298  00000000  00000000  00005688  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002696  00000000  00000000  0000a920  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000cfb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000d176  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000d38a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000f99c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  00010e6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00012178  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  00012358  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0001265f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00013079  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 0e 0d 	jmp	0x1a1c	; 0x1a1c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e4       	ldi	r30, 0x4E	; 78
      68:	f4 e5       	ldi	r31, 0x54	; 84
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 30       	cpi	r26, 0x04	; 4
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a4 e0       	ldi	r26, 0x04	; 4
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 33       	cpi	r26, 0x3E	; 62
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 09 24 	call	0x4812	; 0x4812 <main>
      8a:	0c 94 25 2a 	jmp	0x544a	; 0x544a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a9 29 	jmp	0x5352	; 0x5352 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 ea       	ldi	r26, 0xA4	; 164
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c5 29 	jmp	0x538a	; 0x538a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b5 29 	jmp	0x536a	; 0x536a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d1 29 	jmp	0x53a2	; 0x53a2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b5 29 	jmp	0x536a	; 0x536a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d1 29 	jmp	0x53a2	; 0x53a2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a9 29 	jmp	0x5352	; 0x5352 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 ea       	ldi	r24, 0xA4	; 164
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c5 29 	jmp	0x538a	; 0x538a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b1 29 	jmp	0x5362	; 0x5362 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	64 ea       	ldi	r22, 0xA4	; 164
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 cd 29 	jmp	0x539a	; 0x539a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 b5 29 	jmp	0x536a	; 0x536a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 d1 29 	jmp	0x53a2	; 0x53a2 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 b5 29 	jmp	0x536a	; 0x536a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 d1 29 	jmp	0x53a2	; 0x53a2 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 b5 29 	jmp	0x536a	; 0x536a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 d1 29 	jmp	0x53a2	; 0x53a2 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 b2 29 	jmp	0x5364	; 0x5364 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 ce 29 	jmp	0x539c	; 0x539c <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 b9 29 	jmp	0x5372	; 0x5372 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 d5 29 	jmp	0x53aa	; 0x53aa <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 b1 29 	jmp	0x5362	; 0x5362 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 cd 29 	jmp	0x539a	; 0x539a <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e4 55       	subi	r30, 0x54	; 84
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <SPI_INIT>:
 *  Created on: Dec 3, 2021
 *      Author: mahmoud
 */
#include "SPI.h"

void SPI_INIT(char state) {
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	00 d0       	rcall	.+0      	; 0xef0 <SPI_INIT+0x6>
     ef0:	0f 92       	push	r0
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
     ef6:	89 83       	std	Y+1, r24	; 0x01
	switch (state) {
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	3b 83       	std	Y+3, r19	; 0x03
     f00:	2a 83       	std	Y+2, r18	; 0x02
     f02:	8a 81       	ldd	r24, Y+2	; 0x02
     f04:	9b 81       	ldd	r25, Y+3	; 0x03
     f06:	8d 34       	cpi	r24, 0x4D	; 77
     f08:	91 05       	cpc	r25, r1
     f0a:	31 f0       	breq	.+12     	; 0xf18 <SPI_INIT+0x2e>
     f0c:	2a 81       	ldd	r18, Y+2	; 0x02
     f0e:	3b 81       	ldd	r19, Y+3	; 0x03
     f10:	23 35       	cpi	r18, 0x53	; 83
     f12:	31 05       	cpc	r19, r1
     f14:	a1 f0       	breq	.+40     	; 0xf3e <SPI_INIT+0x54>
     f16:	25 c0       	rjmp	.+74     	; 0xf62 <SPI_INIT+0x78>
	case 'M':
		SPI_DDR |= (1 << MOSI) | (1 << CLK) | (1 << SS);
     f18:	a7 e3       	ldi	r26, 0x37	; 55
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	e7 e3       	ldi	r30, 0x37	; 55
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	80 6b       	ori	r24, 0xB0	; 176
     f24:	8c 93       	st	X, r24
		SPI_DDR &= ~(1 << MISO);
     f26:	a7 e3       	ldi	r26, 0x37	; 55
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	e7 e3       	ldi	r30, 0x37	; 55
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	8f 7b       	andi	r24, 0xBF	; 191
     f32:	8c 93       	st	X, r24
		SPCR = (1 << MSTR) | (1 << SPE);
     f34:	ed e2       	ldi	r30, 0x2D	; 45
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 e5       	ldi	r24, 0x50	; 80
     f3a:	80 83       	st	Z, r24
     f3c:	12 c0       	rjmp	.+36     	; 0xf62 <SPI_INIT+0x78>
		break;
	case 'S':
		SPI_DDR &= ~(1 << MOSI) | (1 << CLK) | (1 << SS);
     f3e:	a7 e3       	ldi	r26, 0x37	; 55
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e7 e3       	ldi	r30, 0x37	; 55
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	8f 7d       	andi	r24, 0xDF	; 223
     f4a:	8c 93       	st	X, r24
		SPI_DDR |= (1 << MISO);
     f4c:	a7 e3       	ldi	r26, 0x37	; 55
     f4e:	b0 e0       	ldi	r27, 0x00	; 0
     f50:	e7 e3       	ldi	r30, 0x37	; 55
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	80 64       	ori	r24, 0x40	; 64
     f58:	8c 93       	st	X, r24
		SPCR = (1 << SPE);
     f5a:	ed e2       	ldi	r30, 0x2D	; 45
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 e4       	ldi	r24, 0x40	; 64
     f60:	80 83       	st	Z, r24
		break;
	default:
		break;
	}
}
     f62:	0f 90       	pop	r0
     f64:	0f 90       	pop	r0
     f66:	0f 90       	pop	r0
     f68:	cf 91       	pop	r28
     f6a:	df 91       	pop	r29
     f6c:	08 95       	ret

00000f6e <SPI_TxRx>:
unsigned char SPI_TxRx(unsigned char data) {
     f6e:	df 93       	push	r29
     f70:	cf 93       	push	r28
     f72:	0f 92       	push	r0
     f74:	cd b7       	in	r28, 0x3d	; 61
     f76:	de b7       	in	r29, 0x3e	; 62
     f78:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data;
     f7a:	ef e2       	ldi	r30, 0x2F	; 47
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	89 81       	ldd	r24, Y+1	; 0x01
     f80:	80 83       	st	Z, r24
	while(!(SPSR & (1<<SPIF)));
     f82:	ee e2       	ldi	r30, 0x2E	; 46
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	88 23       	and	r24, r24
     f8a:	dc f7       	brge	.-10     	; 0xf82 <SPI_TxRx+0x14>
	return SPDR;
     f8c:	ef e2       	ldi	r30, 0x2F	; 47
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
}
     f92:	0f 90       	pop	r0
     f94:	cf 91       	pop	r28
     f96:	df 91       	pop	r29
     f98:	08 95       	ret

00000f9a <TWI_Init>:
 *      Author: mahmoud
 */
#include "I2C.h"

void TWI_Init (void)
{
     f9a:	df 93       	push	r29
     f9c:	cf 93       	push	r28
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
       TWSR=0; //Clear the status register
     fa2:	e1 e2       	ldi	r30, 0x21	; 33
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	10 82       	st	Z, r1
       TWBR=0x03; //ADJUST THE BIT RATE
     fa8:	e0 e2       	ldi	r30, 0x20	; 32
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	83 e0       	ldi	r24, 0x03	; 3
     fae:	80 83       	st	Z, r24
       TWCR|=(1<<TWEN); // set the enable
     fb0:	a6 e5       	ldi	r26, 0x56	; 86
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	e6 e5       	ldi	r30, 0x56	; 86
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	84 60       	ori	r24, 0x04	; 4
     fbc:	8c 93       	st	X, r24
}
     fbe:	cf 91       	pop	r28
     fc0:	df 91       	pop	r29
     fc2:	08 95       	ret

00000fc4 <TWI_Start>:
void TWI_Start (void)
{
     fc4:	df 93       	push	r29
     fc6:	cf 93       	push	r28
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
       TWCR= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     fcc:	e6 e5       	ldi	r30, 0x56	; 86
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	84 ea       	ldi	r24, 0xA4	; 164
     fd2:	80 83       	st	Z, r24
       while (get_bit(TWCR,TWINT)==0)
     fd4:	e6 e5       	ldi	r30, 0x56	; 86
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	88 1f       	adc	r24, r24
     fdc:	88 27       	eor	r24, r24
     fde:	88 1f       	adc	r24, r24
     fe0:	88 2f       	mov	r24, r24
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	90 70       	andi	r25, 0x00	; 0
     fe6:	00 97       	sbiw	r24, 0x00	; 0
     fe8:	a9 f3       	breq	.-22     	; 0xfd4 <TWI_Start+0x10>
       {
       }
}
     fea:	cf 91       	pop	r28
     fec:	df 91       	pop	r29
     fee:	08 95       	ret

00000ff0 <TWI_Stop>:
void TWI_Stop (void)
{
     ff0:	df 93       	push	r29
     ff2:	cf 93       	push	r28
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
       TWCR=(1<<TWSTO)|(1<<TWEN)|(1<<TWINT);
     ff8:	e6 e5       	ldi	r30, 0x56	; 86
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	84 e9       	ldi	r24, 0x94	; 148
     ffe:	80 83       	st	Z, r24
}
    1000:	cf 91       	pop	r28
    1002:	df 91       	pop	r29
    1004:	08 95       	ret

00001006 <TWI_Write>:
void TWI_Write (char data)
{
    1006:	df 93       	push	r29
    1008:	cf 93       	push	r28
    100a:	0f 92       	push	r0
    100c:	cd b7       	in	r28, 0x3d	; 61
    100e:	de b7       	in	r29, 0x3e	; 62
    1010:	89 83       	std	Y+1, r24	; 0x01
       TWDR=data;
    1012:	e3 e2       	ldi	r30, 0x23	; 35
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	89 81       	ldd	r24, Y+1	; 0x01
    1018:	80 83       	st	Z, r24
       TWCR= (1<<TWINT)|(1<<TWEN);
    101a:	e6 e5       	ldi	r30, 0x56	; 86
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	84 e8       	ldi	r24, 0x84	; 132
    1020:	80 83       	st	Z, r24
       while (get_bit(TWCR,TWINT)==0)
    1022:	e6 e5       	ldi	r30, 0x56	; 86
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	88 1f       	adc	r24, r24
    102a:	88 27       	eor	r24, r24
    102c:	88 1f       	adc	r24, r24
    102e:	88 2f       	mov	r24, r24
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	90 70       	andi	r25, 0x00	; 0
    1034:	00 97       	sbiw	r24, 0x00	; 0
    1036:	a9 f3       	breq	.-22     	; 0x1022 <TWI_Write+0x1c>
       {
       }
}
    1038:	0f 90       	pop	r0
    103a:	cf 91       	pop	r28
    103c:	df 91       	pop	r29
    103e:	08 95       	ret

00001040 <TWI_Read_Nack>:
void TWI_Read_Nack (char* ptr) // The function argument is a pointer to a memory place in the MCU to store the received data in
{
    1040:	df 93       	push	r29
    1042:	cf 93       	push	r28
    1044:	00 d0       	rcall	.+0      	; 0x1046 <TWI_Read_Nack+0x6>
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
    104a:	9a 83       	std	Y+2, r25	; 0x02
    104c:	89 83       	std	Y+1, r24	; 0x01
       TWCR=(1<<TWINT)|(1<<TWEN);
    104e:	e6 e5       	ldi	r30, 0x56	; 86
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	84 e8       	ldi	r24, 0x84	; 132
    1054:	80 83       	st	Z, r24

       while (get_bit(TWCR,TWINT)==0)
    1056:	e6 e5       	ldi	r30, 0x56	; 86
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	88 1f       	adc	r24, r24
    105e:	88 27       	eor	r24, r24
    1060:	88 1f       	adc	r24, r24
    1062:	88 2f       	mov	r24, r24
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	90 70       	andi	r25, 0x00	; 0
    1068:	00 97       	sbiw	r24, 0x00	; 0
    106a:	a9 f3       	breq	.-22     	; 0x1056 <TWI_Read_Nack+0x16>
       {

       }
       *ptr=TWDR;
    106c:	e3 e2       	ldi	r30, 0x23	; 35
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	e9 81       	ldd	r30, Y+1	; 0x01
    1074:	fa 81       	ldd	r31, Y+2	; 0x02
    1076:	80 83       	st	Z, r24
}
    1078:	0f 90       	pop	r0
    107a:	0f 90       	pop	r0
    107c:	cf 91       	pop	r28
    107e:	df 91       	pop	r29
    1080:	08 95       	ret

00001082 <Write_Channel>:

#include "DIO.h"
#include "../../LIB/BIT_MATH.h"
#include "DIO_HW.h"

void Write_Channel(DIO_CHANNEL_TYPES Channel_ID, STD_LEVEL_TYPES LEVEL) {
    1082:	df 93       	push	r29
    1084:	cf 93       	push	r28
    1086:	00 d0       	rcall	.+0      	; 0x1088 <Write_Channel+0x6>
    1088:	00 d0       	rcall	.+0      	; 0x108a <Write_Channel+0x8>
    108a:	00 d0       	rcall	.+0      	; 0x108c <Write_Channel+0xa>
    108c:	cd b7       	in	r28, 0x3d	; 61
    108e:	de b7       	in	r29, 0x3e	; 62
    1090:	8b 83       	std	Y+3, r24	; 0x03
    1092:	6c 83       	std	Y+4, r22	; 0x04
	DIO_GROUPE_TYPES Portx = Channel_ID / 8;
    1094:	8b 81       	ldd	r24, Y+3	; 0x03
    1096:	86 95       	lsr	r24
    1098:	86 95       	lsr	r24
    109a:	86 95       	lsr	r24
    109c:	8a 83       	std	Y+2, r24	; 0x02
	DIO_CHANNEL_TYPES PIN_NO = Channel_ID % 8;
    109e:	8b 81       	ldd	r24, Y+3	; 0x03
    10a0:	87 70       	andi	r24, 0x07	; 7
    10a2:	89 83       	std	Y+1, r24	; 0x01
	switch (Portx) {
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	3e 83       	std	Y+6, r19	; 0x06
    10ac:	2d 83       	std	Y+5, r18	; 0x05
    10ae:	8d 81       	ldd	r24, Y+5	; 0x05
    10b0:	9e 81       	ldd	r25, Y+6	; 0x06
    10b2:	81 30       	cpi	r24, 0x01	; 1
    10b4:	91 05       	cpc	r25, r1
    10b6:	09 f4       	brne	.+2      	; 0x10ba <Write_Channel+0x38>
    10b8:	43 c0       	rjmp	.+134    	; 0x1140 <Write_Channel+0xbe>
    10ba:	2d 81       	ldd	r18, Y+5	; 0x05
    10bc:	3e 81       	ldd	r19, Y+6	; 0x06
    10be:	22 30       	cpi	r18, 0x02	; 2
    10c0:	31 05       	cpc	r19, r1
    10c2:	2c f4       	brge	.+10     	; 0x10ce <Write_Channel+0x4c>
    10c4:	8d 81       	ldd	r24, Y+5	; 0x05
    10c6:	9e 81       	ldd	r25, Y+6	; 0x06
    10c8:	00 97       	sbiw	r24, 0x00	; 0
    10ca:	71 f0       	breq	.+28     	; 0x10e8 <Write_Channel+0x66>
    10cc:	bc c0       	rjmp	.+376    	; 0x1246 <Write_Channel+0x1c4>
    10ce:	2d 81       	ldd	r18, Y+5	; 0x05
    10d0:	3e 81       	ldd	r19, Y+6	; 0x06
    10d2:	22 30       	cpi	r18, 0x02	; 2
    10d4:	31 05       	cpc	r19, r1
    10d6:	09 f4       	brne	.+2      	; 0x10da <Write_Channel+0x58>
    10d8:	5f c0       	rjmp	.+190    	; 0x1198 <Write_Channel+0x116>
    10da:	8d 81       	ldd	r24, Y+5	; 0x05
    10dc:	9e 81       	ldd	r25, Y+6	; 0x06
    10de:	83 30       	cpi	r24, 0x03	; 3
    10e0:	91 05       	cpc	r25, r1
    10e2:	09 f4       	brne	.+2      	; 0x10e6 <Write_Channel+0x64>
    10e4:	85 c0       	rjmp	.+266    	; 0x11f0 <Write_Channel+0x16e>
    10e6:	af c0       	rjmp	.+350    	; 0x1246 <Write_Channel+0x1c4>
	case GROUPA:
		if (LEVEL == STD_HIGH) {
    10e8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ea:	81 30       	cpi	r24, 0x01	; 1
    10ec:	a1 f4       	brne	.+40     	; 0x1116 <Write_Channel+0x94>
			SET_BIT(PORTA_REG, PIN_NO);
    10ee:	ab e3       	ldi	r26, 0x3B	; 59
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	eb e3       	ldi	r30, 0x3B	; 59
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	48 2f       	mov	r20, r24
    10fa:	89 81       	ldd	r24, Y+1	; 0x01
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	02 2e       	mov	r0, r18
    1106:	02 c0       	rjmp	.+4      	; 0x110c <Write_Channel+0x8a>
    1108:	88 0f       	add	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	0a 94       	dec	r0
    110e:	e2 f7       	brpl	.-8      	; 0x1108 <Write_Channel+0x86>
    1110:	84 2b       	or	r24, r20
    1112:	8c 93       	st	X, r24
    1114:	98 c0       	rjmp	.+304    	; 0x1246 <Write_Channel+0x1c4>
		} else {
			CLR_BIT(PORTA_REG, PIN_NO);
    1116:	ab e3       	ldi	r26, 0x3B	; 59
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	eb e3       	ldi	r30, 0x3B	; 59
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	48 2f       	mov	r20, r24
    1122:	89 81       	ldd	r24, Y+1	; 0x01
    1124:	28 2f       	mov	r18, r24
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	02 2e       	mov	r0, r18
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <Write_Channel+0xb2>
    1130:	88 0f       	add	r24, r24
    1132:	99 1f       	adc	r25, r25
    1134:	0a 94       	dec	r0
    1136:	e2 f7       	brpl	.-8      	; 0x1130 <Write_Channel+0xae>
    1138:	80 95       	com	r24
    113a:	84 23       	and	r24, r20
    113c:	8c 93       	st	X, r24
    113e:	83 c0       	rjmp	.+262    	; 0x1246 <Write_Channel+0x1c4>
		}
		break;
	case GROUPB:
		if (LEVEL == STD_HIGH) {
    1140:	8c 81       	ldd	r24, Y+4	; 0x04
    1142:	81 30       	cpi	r24, 0x01	; 1
    1144:	a1 f4       	brne	.+40     	; 0x116e <Write_Channel+0xec>
			SET_BIT(PORTB_REG, PIN_NO);
    1146:	a8 e3       	ldi	r26, 0x38	; 56
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	e8 e3       	ldi	r30, 0x38	; 56
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	48 2f       	mov	r20, r24
    1152:	89 81       	ldd	r24, Y+1	; 0x01
    1154:	28 2f       	mov	r18, r24
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	02 2e       	mov	r0, r18
    115e:	02 c0       	rjmp	.+4      	; 0x1164 <Write_Channel+0xe2>
    1160:	88 0f       	add	r24, r24
    1162:	99 1f       	adc	r25, r25
    1164:	0a 94       	dec	r0
    1166:	e2 f7       	brpl	.-8      	; 0x1160 <Write_Channel+0xde>
    1168:	84 2b       	or	r24, r20
    116a:	8c 93       	st	X, r24
    116c:	6c c0       	rjmp	.+216    	; 0x1246 <Write_Channel+0x1c4>
		} else {
			CLR_BIT(PORTB_REG, PIN_NO);
    116e:	a8 e3       	ldi	r26, 0x38	; 56
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	e8 e3       	ldi	r30, 0x38	; 56
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	48 2f       	mov	r20, r24
    117a:	89 81       	ldd	r24, Y+1	; 0x01
    117c:	28 2f       	mov	r18, r24
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	02 2e       	mov	r0, r18
    1186:	02 c0       	rjmp	.+4      	; 0x118c <Write_Channel+0x10a>
    1188:	88 0f       	add	r24, r24
    118a:	99 1f       	adc	r25, r25
    118c:	0a 94       	dec	r0
    118e:	e2 f7       	brpl	.-8      	; 0x1188 <Write_Channel+0x106>
    1190:	80 95       	com	r24
    1192:	84 23       	and	r24, r20
    1194:	8c 93       	st	X, r24
    1196:	57 c0       	rjmp	.+174    	; 0x1246 <Write_Channel+0x1c4>
		}
		break;
	case GROUPC:
		if (LEVEL == STD_HIGH) {
    1198:	8c 81       	ldd	r24, Y+4	; 0x04
    119a:	81 30       	cpi	r24, 0x01	; 1
    119c:	a1 f4       	brne	.+40     	; 0x11c6 <Write_Channel+0x144>
			SET_BIT(PORTC_REG, PIN_NO);
    119e:	a5 e3       	ldi	r26, 0x35	; 53
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	e5 e3       	ldi	r30, 0x35	; 53
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	48 2f       	mov	r20, r24
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
    11ac:	28 2f       	mov	r18, r24
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	02 2e       	mov	r0, r18
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <Write_Channel+0x13a>
    11b8:	88 0f       	add	r24, r24
    11ba:	99 1f       	adc	r25, r25
    11bc:	0a 94       	dec	r0
    11be:	e2 f7       	brpl	.-8      	; 0x11b8 <Write_Channel+0x136>
    11c0:	84 2b       	or	r24, r20
    11c2:	8c 93       	st	X, r24
    11c4:	40 c0       	rjmp	.+128    	; 0x1246 <Write_Channel+0x1c4>
		} else {
			CLR_BIT(PORTC_REG, PIN_NO);
    11c6:	a5 e3       	ldi	r26, 0x35	; 53
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	e5 e3       	ldi	r30, 0x35	; 53
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	48 2f       	mov	r20, r24
    11d2:	89 81       	ldd	r24, Y+1	; 0x01
    11d4:	28 2f       	mov	r18, r24
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	02 2e       	mov	r0, r18
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <Write_Channel+0x162>
    11e0:	88 0f       	add	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	0a 94       	dec	r0
    11e6:	e2 f7       	brpl	.-8      	; 0x11e0 <Write_Channel+0x15e>
    11e8:	80 95       	com	r24
    11ea:	84 23       	and	r24, r20
    11ec:	8c 93       	st	X, r24
    11ee:	2b c0       	rjmp	.+86     	; 0x1246 <Write_Channel+0x1c4>
		}
		break;
	case GROUPD:
		if (LEVEL == STD_HIGH) {
    11f0:	8c 81       	ldd	r24, Y+4	; 0x04
    11f2:	81 30       	cpi	r24, 0x01	; 1
    11f4:	a1 f4       	brne	.+40     	; 0x121e <Write_Channel+0x19c>
			SET_BIT(PORTD_REG, PIN_NO);
    11f6:	a2 e3       	ldi	r26, 0x32	; 50
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	e2 e3       	ldi	r30, 0x32	; 50
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	48 2f       	mov	r20, r24
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	28 2f       	mov	r18, r24
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	02 2e       	mov	r0, r18
    120e:	02 c0       	rjmp	.+4      	; 0x1214 <Write_Channel+0x192>
    1210:	88 0f       	add	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	0a 94       	dec	r0
    1216:	e2 f7       	brpl	.-8      	; 0x1210 <Write_Channel+0x18e>
    1218:	84 2b       	or	r24, r20
    121a:	8c 93       	st	X, r24
    121c:	14 c0       	rjmp	.+40     	; 0x1246 <Write_Channel+0x1c4>
		} else {
			CLR_BIT(PORTD_REG, PIN_NO);
    121e:	a2 e3       	ldi	r26, 0x32	; 50
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	e2 e3       	ldi	r30, 0x32	; 50
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	48 2f       	mov	r20, r24
    122a:	89 81       	ldd	r24, Y+1	; 0x01
    122c:	28 2f       	mov	r18, r24
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	02 2e       	mov	r0, r18
    1236:	02 c0       	rjmp	.+4      	; 0x123c <Write_Channel+0x1ba>
    1238:	88 0f       	add	r24, r24
    123a:	99 1f       	adc	r25, r25
    123c:	0a 94       	dec	r0
    123e:	e2 f7       	brpl	.-8      	; 0x1238 <Write_Channel+0x1b6>
    1240:	80 95       	com	r24
    1242:	84 23       	and	r24, r20
    1244:	8c 93       	st	X, r24
		break;
	default:
		break;
	}

}
    1246:	26 96       	adiw	r28, 0x06	; 6
    1248:	0f b6       	in	r0, 0x3f	; 63
    124a:	f8 94       	cli
    124c:	de bf       	out	0x3e, r29	; 62
    124e:	0f be       	out	0x3f, r0	; 63
    1250:	cd bf       	out	0x3d, r28	; 61
    1252:	cf 91       	pop	r28
    1254:	df 91       	pop	r29
    1256:	08 95       	ret

00001258 <Read_Channel>:
STD_LEVEL_TYPES Read_Channel(DIO_CHANNEL_TYPES Channel_ID) {
    1258:	df 93       	push	r29
    125a:	cf 93       	push	r28
    125c:	00 d0       	rcall	.+0      	; 0x125e <Read_Channel+0x6>
    125e:	00 d0       	rcall	.+0      	; 0x1260 <Read_Channel+0x8>
    1260:	00 d0       	rcall	.+0      	; 0x1262 <Read_Channel+0xa>
    1262:	cd b7       	in	r28, 0x3d	; 61
    1264:	de b7       	in	r29, 0x3e	; 62
    1266:	8c 83       	std	Y+4, r24	; 0x04
	STD_LEVEL_TYPES PIN_TYPE = STD_LOW;
    1268:	1b 82       	std	Y+3, r1	; 0x03
	DIO_GROUPE_TYPES Portx = Channel_ID / 8;
    126a:	8c 81       	ldd	r24, Y+4	; 0x04
    126c:	86 95       	lsr	r24
    126e:	86 95       	lsr	r24
    1270:	86 95       	lsr	r24
    1272:	8a 83       	std	Y+2, r24	; 0x02
	DIO_CHANNEL_TYPES PIN_NO = Channel_ID % 8;
    1274:	8c 81       	ldd	r24, Y+4	; 0x04
    1276:	87 70       	andi	r24, 0x07	; 7
    1278:	89 83       	std	Y+1, r24	; 0x01
	switch (Portx) {
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	28 2f       	mov	r18, r24
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	3e 83       	std	Y+6, r19	; 0x06
    1282:	2d 83       	std	Y+5, r18	; 0x05
    1284:	4d 81       	ldd	r20, Y+5	; 0x05
    1286:	5e 81       	ldd	r21, Y+6	; 0x06
    1288:	41 30       	cpi	r20, 0x01	; 1
    128a:	51 05       	cpc	r21, r1
    128c:	41 f1       	breq	.+80     	; 0x12de <Read_Channel+0x86>
    128e:	8d 81       	ldd	r24, Y+5	; 0x05
    1290:	9e 81       	ldd	r25, Y+6	; 0x06
    1292:	82 30       	cpi	r24, 0x02	; 2
    1294:	91 05       	cpc	r25, r1
    1296:	34 f4       	brge	.+12     	; 0x12a4 <Read_Channel+0x4c>
    1298:	2d 81       	ldd	r18, Y+5	; 0x05
    129a:	3e 81       	ldd	r19, Y+6	; 0x06
    129c:	21 15       	cp	r18, r1
    129e:	31 05       	cpc	r19, r1
    12a0:	61 f0       	breq	.+24     	; 0x12ba <Read_Channel+0x62>
    12a2:	52 c0       	rjmp	.+164    	; 0x1348 <Read_Channel+0xf0>
    12a4:	4d 81       	ldd	r20, Y+5	; 0x05
    12a6:	5e 81       	ldd	r21, Y+6	; 0x06
    12a8:	42 30       	cpi	r20, 0x02	; 2
    12aa:	51 05       	cpc	r21, r1
    12ac:	51 f1       	breq	.+84     	; 0x1302 <Read_Channel+0xaa>
    12ae:	8d 81       	ldd	r24, Y+5	; 0x05
    12b0:	9e 81       	ldd	r25, Y+6	; 0x06
    12b2:	83 30       	cpi	r24, 0x03	; 3
    12b4:	91 05       	cpc	r25, r1
    12b6:	b9 f1       	breq	.+110    	; 0x1326 <Read_Channel+0xce>
    12b8:	47 c0       	rjmp	.+142    	; 0x1348 <Read_Channel+0xf0>
	case GROUPA:
		PIN_TYPE = GET_BIT(PINA_REG, PIN_NO);
    12ba:	e9 e3       	ldi	r30, 0x39	; 57
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	28 2f       	mov	r18, r24
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	89 81       	ldd	r24, Y+1	; 0x01
    12c6:	88 2f       	mov	r24, r24
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	a9 01       	movw	r20, r18
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <Read_Channel+0x7a>
    12ce:	55 95       	asr	r21
    12d0:	47 95       	ror	r20
    12d2:	8a 95       	dec	r24
    12d4:	e2 f7       	brpl	.-8      	; 0x12ce <Read_Channel+0x76>
    12d6:	ca 01       	movw	r24, r20
    12d8:	81 70       	andi	r24, 0x01	; 1
    12da:	8b 83       	std	Y+3, r24	; 0x03
    12dc:	35 c0       	rjmp	.+106    	; 0x1348 <Read_Channel+0xf0>
		break;
	case GROUPB:
		PIN_TYPE = GET_BIT(PINB_REG, PIN_NO);
    12de:	e6 e3       	ldi	r30, 0x36	; 54
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	89 81       	ldd	r24, Y+1	; 0x01
    12ea:	88 2f       	mov	r24, r24
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	a9 01       	movw	r20, r18
    12f0:	02 c0       	rjmp	.+4      	; 0x12f6 <Read_Channel+0x9e>
    12f2:	55 95       	asr	r21
    12f4:	47 95       	ror	r20
    12f6:	8a 95       	dec	r24
    12f8:	e2 f7       	brpl	.-8      	; 0x12f2 <Read_Channel+0x9a>
    12fa:	ca 01       	movw	r24, r20
    12fc:	81 70       	andi	r24, 0x01	; 1
    12fe:	8b 83       	std	Y+3, r24	; 0x03
    1300:	23 c0       	rjmp	.+70     	; 0x1348 <Read_Channel+0xf0>
		break;
	case GROUPC:
		PIN_TYPE = GET_BIT(PINC_REG, PIN_NO);
    1302:	e3 e3       	ldi	r30, 0x33	; 51
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	28 2f       	mov	r18, r24
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	89 81       	ldd	r24, Y+1	; 0x01
    130e:	88 2f       	mov	r24, r24
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	a9 01       	movw	r20, r18
    1314:	02 c0       	rjmp	.+4      	; 0x131a <Read_Channel+0xc2>
    1316:	55 95       	asr	r21
    1318:	47 95       	ror	r20
    131a:	8a 95       	dec	r24
    131c:	e2 f7       	brpl	.-8      	; 0x1316 <Read_Channel+0xbe>
    131e:	ca 01       	movw	r24, r20
    1320:	81 70       	andi	r24, 0x01	; 1
    1322:	8b 83       	std	Y+3, r24	; 0x03
    1324:	11 c0       	rjmp	.+34     	; 0x1348 <Read_Channel+0xf0>
		break;
	case GROUPD:
		PIN_TYPE = GET_BIT(PIND_REG, PIN_NO);
    1326:	e0 e3       	ldi	r30, 0x30	; 48
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	28 2f       	mov	r18, r24
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	89 81       	ldd	r24, Y+1	; 0x01
    1332:	88 2f       	mov	r24, r24
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	a9 01       	movw	r20, r18
    1338:	02 c0       	rjmp	.+4      	; 0x133e <Read_Channel+0xe6>
    133a:	55 95       	asr	r21
    133c:	47 95       	ror	r20
    133e:	8a 95       	dec	r24
    1340:	e2 f7       	brpl	.-8      	; 0x133a <Read_Channel+0xe2>
    1342:	ca 01       	movw	r24, r20
    1344:	81 70       	andi	r24, 0x01	; 1
    1346:	8b 83       	std	Y+3, r24	; 0x03
		break;
	default:
		break;
	}
	return PIN_TYPE;
    1348:	8b 81       	ldd	r24, Y+3	; 0x03
}
    134a:	26 96       	adiw	r28, 0x06	; 6
    134c:	0f b6       	in	r0, 0x3f	; 63
    134e:	f8 94       	cli
    1350:	de bf       	out	0x3e, r29	; 62
    1352:	0f be       	out	0x3f, r0	; 63
    1354:	cd bf       	out	0x3d, r28	; 61
    1356:	cf 91       	pop	r28
    1358:	df 91       	pop	r29
    135a:	08 95       	ret

0000135c <Write_PORT>:
void Write_PORT(DIO_GROUPE_TYPES PORT_ID, u8 Data) {
    135c:	df 93       	push	r29
    135e:	cf 93       	push	r28
    1360:	00 d0       	rcall	.+0      	; 0x1362 <Write_PORT+0x6>
    1362:	00 d0       	rcall	.+0      	; 0x1364 <Write_PORT+0x8>
    1364:	cd b7       	in	r28, 0x3d	; 61
    1366:	de b7       	in	r29, 0x3e	; 62
    1368:	89 83       	std	Y+1, r24	; 0x01
    136a:	6a 83       	std	Y+2, r22	; 0x02
	switch (PORT_ID) {
    136c:	89 81       	ldd	r24, Y+1	; 0x01
    136e:	28 2f       	mov	r18, r24
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	3c 83       	std	Y+4, r19	; 0x04
    1374:	2b 83       	std	Y+3, r18	; 0x03
    1376:	8b 81       	ldd	r24, Y+3	; 0x03
    1378:	9c 81       	ldd	r25, Y+4	; 0x04
    137a:	81 30       	cpi	r24, 0x01	; 1
    137c:	91 05       	cpc	r25, r1
    137e:	d1 f0       	breq	.+52     	; 0x13b4 <Write_PORT+0x58>
    1380:	2b 81       	ldd	r18, Y+3	; 0x03
    1382:	3c 81       	ldd	r19, Y+4	; 0x04
    1384:	22 30       	cpi	r18, 0x02	; 2
    1386:	31 05       	cpc	r19, r1
    1388:	2c f4       	brge	.+10     	; 0x1394 <Write_PORT+0x38>
    138a:	8b 81       	ldd	r24, Y+3	; 0x03
    138c:	9c 81       	ldd	r25, Y+4	; 0x04
    138e:	00 97       	sbiw	r24, 0x00	; 0
    1390:	61 f0       	breq	.+24     	; 0x13aa <Write_PORT+0x4e>
    1392:	1e c0       	rjmp	.+60     	; 0x13d0 <Write_PORT+0x74>
    1394:	2b 81       	ldd	r18, Y+3	; 0x03
    1396:	3c 81       	ldd	r19, Y+4	; 0x04
    1398:	22 30       	cpi	r18, 0x02	; 2
    139a:	31 05       	cpc	r19, r1
    139c:	81 f0       	breq	.+32     	; 0x13be <Write_PORT+0x62>
    139e:	8b 81       	ldd	r24, Y+3	; 0x03
    13a0:	9c 81       	ldd	r25, Y+4	; 0x04
    13a2:	83 30       	cpi	r24, 0x03	; 3
    13a4:	91 05       	cpc	r25, r1
    13a6:	81 f0       	breq	.+32     	; 0x13c8 <Write_PORT+0x6c>
    13a8:	13 c0       	rjmp	.+38     	; 0x13d0 <Write_PORT+0x74>
	case GROUPA:
		PORTA_REG = Data;
    13aa:	eb e3       	ldi	r30, 0x3B	; 59
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	8a 81       	ldd	r24, Y+2	; 0x02
    13b0:	80 83       	st	Z, r24
    13b2:	0e c0       	rjmp	.+28     	; 0x13d0 <Write_PORT+0x74>
		break;
	case GROUPB:
		PORTB_REG = Data;
    13b4:	e8 e3       	ldi	r30, 0x38	; 56
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ba:	80 83       	st	Z, r24
    13bc:	09 c0       	rjmp	.+18     	; 0x13d0 <Write_PORT+0x74>
		break;
	case GROUPC:
		PORTC_REG = Data;
    13be:	e5 e3       	ldi	r30, 0x35	; 53
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	8a 81       	ldd	r24, Y+2	; 0x02
    13c4:	80 83       	st	Z, r24
    13c6:	04 c0       	rjmp	.+8      	; 0x13d0 <Write_PORT+0x74>
		break;
	case GROUPD:
		PORTD_REG = Data;
    13c8:	e2 e3       	ldi	r30, 0x32	; 50
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	8a 81       	ldd	r24, Y+2	; 0x02
    13ce:	80 83       	st	Z, r24
		break;
	}
}
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	0f 90       	pop	r0
    13d6:	0f 90       	pop	r0
    13d8:	cf 91       	pop	r28
    13da:	df 91       	pop	r29
    13dc:	08 95       	ret

000013de <Read_PORT>:
u8 Read_PORT(DIO_GROUPE_TYPES PORT_ID) {
    13de:	df 93       	push	r29
    13e0:	cf 93       	push	r28
    13e2:	00 d0       	rcall	.+0      	; 0x13e4 <Read_PORT+0x6>
    13e4:	00 d0       	rcall	.+0      	; 0x13e6 <Read_PORT+0x8>
    13e6:	cd b7       	in	r28, 0x3d	; 61
    13e8:	de b7       	in	r29, 0x3e	; 62
    13ea:	8a 83       	std	Y+2, r24	; 0x02
	u8 Data = 0;
    13ec:	19 82       	std	Y+1, r1	; 0x01
	switch (PORT_ID) {
    13ee:	8a 81       	ldd	r24, Y+2	; 0x02
    13f0:	28 2f       	mov	r18, r24
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	3c 83       	std	Y+4, r19	; 0x04
    13f6:	2b 83       	std	Y+3, r18	; 0x03
    13f8:	8b 81       	ldd	r24, Y+3	; 0x03
    13fa:	9c 81       	ldd	r25, Y+4	; 0x04
    13fc:	81 30       	cpi	r24, 0x01	; 1
    13fe:	91 05       	cpc	r25, r1
    1400:	d1 f0       	breq	.+52     	; 0x1436 <Read_PORT+0x58>
    1402:	2b 81       	ldd	r18, Y+3	; 0x03
    1404:	3c 81       	ldd	r19, Y+4	; 0x04
    1406:	22 30       	cpi	r18, 0x02	; 2
    1408:	31 05       	cpc	r19, r1
    140a:	2c f4       	brge	.+10     	; 0x1416 <Read_PORT+0x38>
    140c:	8b 81       	ldd	r24, Y+3	; 0x03
    140e:	9c 81       	ldd	r25, Y+4	; 0x04
    1410:	00 97       	sbiw	r24, 0x00	; 0
    1412:	61 f0       	breq	.+24     	; 0x142c <Read_PORT+0x4e>
    1414:	1e c0       	rjmp	.+60     	; 0x1452 <Read_PORT+0x74>
    1416:	2b 81       	ldd	r18, Y+3	; 0x03
    1418:	3c 81       	ldd	r19, Y+4	; 0x04
    141a:	22 30       	cpi	r18, 0x02	; 2
    141c:	31 05       	cpc	r19, r1
    141e:	81 f0       	breq	.+32     	; 0x1440 <Read_PORT+0x62>
    1420:	8b 81       	ldd	r24, Y+3	; 0x03
    1422:	9c 81       	ldd	r25, Y+4	; 0x04
    1424:	83 30       	cpi	r24, 0x03	; 3
    1426:	91 05       	cpc	r25, r1
    1428:	81 f0       	breq	.+32     	; 0x144a <Read_PORT+0x6c>
    142a:	13 c0       	rjmp	.+38     	; 0x1452 <Read_PORT+0x74>
	case GROUPA:
		Data = PINA_REG;
    142c:	e9 e3       	ldi	r30, 0x39	; 57
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	89 83       	std	Y+1, r24	; 0x01
    1434:	0e c0       	rjmp	.+28     	; 0x1452 <Read_PORT+0x74>
		break;
	case GROUPB:
		Data = PINB_REG;
    1436:	e6 e3       	ldi	r30, 0x36	; 54
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	89 83       	std	Y+1, r24	; 0x01
    143e:	09 c0       	rjmp	.+18     	; 0x1452 <Read_PORT+0x74>
		break;
	case GROUPC:
		Data = PINC_REG;
    1440:	e3 e3       	ldi	r30, 0x33	; 51
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	89 83       	std	Y+1, r24	; 0x01
    1448:	04 c0       	rjmp	.+8      	; 0x1452 <Read_PORT+0x74>
		break;
	case GROUPD:
		Data = PIND_REG;
    144a:	e0 e3       	ldi	r30, 0x30	; 48
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return Data;
    1452:	89 81       	ldd	r24, Y+1	; 0x01
}
    1454:	0f 90       	pop	r0
    1456:	0f 90       	pop	r0
    1458:	0f 90       	pop	r0
    145a:	0f 90       	pop	r0
    145c:	cf 91       	pop	r28
    145e:	df 91       	pop	r29
    1460:	08 95       	ret

00001462 <DIO_INIT>:

#include "DIO_CFG.h"
#include "../../LIB/BIT_MATH.h"
#include "DIO_HW.h"

void DIO_INIT() {
    1462:	df 93       	push	r29
    1464:	cf 93       	push	r28
    1466:	00 d0       	rcall	.+0      	; 0x1468 <DIO_INIT+0x6>
    1468:	00 d0       	rcall	.+0      	; 0x146a <DIO_INIT+0x8>
    146a:	0f 92       	push	r0
    146c:	cd b7       	in	r28, 0x3d	; 61
    146e:	de b7       	in	r29, 0x3e	; 62
	DIO_CHANNEL_TYPES count;
	DIO_GROUPE_TYPES Portx;
	DIO_CHANNEL_TYPES Channelx;
	for (count = DIO_CHANNEL_A0; count < PIN_COUNT; count++) {
    1470:	1b 82       	std	Y+3, r1	; 0x03
    1472:	fc c0       	rjmp	.+504    	; 0x166c <DIO_INIT+0x20a>
		Portx = count / 8;
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	86 95       	lsr	r24
    1478:	86 95       	lsr	r24
    147a:	86 95       	lsr	r24
    147c:	8a 83       	std	Y+2, r24	; 0x02
		Channelx = count % 8;
    147e:	8b 81       	ldd	r24, Y+3	; 0x03
    1480:	87 70       	andi	r24, 0x07	; 7
    1482:	89 83       	std	Y+1, r24	; 0x01
		switch (Portx) {
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	28 2f       	mov	r18, r24
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	3d 83       	std	Y+5, r19	; 0x05
    148c:	2c 83       	std	Y+4, r18	; 0x04
    148e:	8c 81       	ldd	r24, Y+4	; 0x04
    1490:	9d 81       	ldd	r25, Y+5	; 0x05
    1492:	81 30       	cpi	r24, 0x01	; 1
    1494:	91 05       	cpc	r25, r1
    1496:	09 f4       	brne	.+2      	; 0x149a <DIO_INIT+0x38>
    1498:	4b c0       	rjmp	.+150    	; 0x1530 <DIO_INIT+0xce>
    149a:	2c 81       	ldd	r18, Y+4	; 0x04
    149c:	3d 81       	ldd	r19, Y+5	; 0x05
    149e:	22 30       	cpi	r18, 0x02	; 2
    14a0:	31 05       	cpc	r19, r1
    14a2:	2c f4       	brge	.+10     	; 0x14ae <DIO_INIT+0x4c>
    14a4:	8c 81       	ldd	r24, Y+4	; 0x04
    14a6:	9d 81       	ldd	r25, Y+5	; 0x05
    14a8:	00 97       	sbiw	r24, 0x00	; 0
    14aa:	71 f0       	breq	.+28     	; 0x14c8 <DIO_INIT+0x66>
    14ac:	dc c0       	rjmp	.+440    	; 0x1666 <DIO_INIT+0x204>
    14ae:	2c 81       	ldd	r18, Y+4	; 0x04
    14b0:	3d 81       	ldd	r19, Y+5	; 0x05
    14b2:	22 30       	cpi	r18, 0x02	; 2
    14b4:	31 05       	cpc	r19, r1
    14b6:	09 f4       	brne	.+2      	; 0x14ba <DIO_INIT+0x58>
    14b8:	6f c0       	rjmp	.+222    	; 0x1598 <DIO_INIT+0x136>
    14ba:	8c 81       	ldd	r24, Y+4	; 0x04
    14bc:	9d 81       	ldd	r25, Y+5	; 0x05
    14be:	83 30       	cpi	r24, 0x03	; 3
    14c0:	91 05       	cpc	r25, r1
    14c2:	09 f4       	brne	.+2      	; 0x14c6 <DIO_INIT+0x64>
    14c4:	9d c0       	rjmp	.+314    	; 0x1600 <DIO_INIT+0x19e>
    14c6:	cf c0       	rjmp	.+414    	; 0x1666 <DIO_INIT+0x204>
		case GROUPA:
			if (PIN_CFG[count].PIN_DIR == OUTPUT) {
    14c8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ca:	88 2f       	mov	r24, r24
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	88 0f       	add	r24, r24
    14d0:	99 1f       	adc	r25, r25
    14d2:	fc 01       	movw	r30, r24
    14d4:	e4 55       	subi	r30, 0x54	; 84
    14d6:	fe 4f       	sbci	r31, 0xFE	; 254
    14d8:	80 81       	ld	r24, Z
    14da:	81 30       	cpi	r24, 0x01	; 1
    14dc:	a1 f4       	brne	.+40     	; 0x1506 <DIO_INIT+0xa4>
				SET_BIT(DDRA_REG, Channelx);
    14de:	aa e3       	ldi	r26, 0x3A	; 58
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	ea e3       	ldi	r30, 0x3A	; 58
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	48 2f       	mov	r20, r24
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
    14ec:	28 2f       	mov	r18, r24
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	02 2e       	mov	r0, r18
    14f6:	02 c0       	rjmp	.+4      	; 0x14fc <DIO_INIT+0x9a>
    14f8:	88 0f       	add	r24, r24
    14fa:	99 1f       	adc	r25, r25
    14fc:	0a 94       	dec	r0
    14fe:	e2 f7       	brpl	.-8      	; 0x14f8 <DIO_INIT+0x96>
    1500:	84 2b       	or	r24, r20
    1502:	8c 93       	st	X, r24
    1504:	b0 c0       	rjmp	.+352    	; 0x1666 <DIO_INIT+0x204>
			} else {
				CLR_BIT(DDRA_REG, Channelx);
    1506:	aa e3       	ldi	r26, 0x3A	; 58
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	ea e3       	ldi	r30, 0x3A	; 58
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	48 2f       	mov	r20, r24
    1512:	89 81       	ldd	r24, Y+1	; 0x01
    1514:	28 2f       	mov	r18, r24
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	02 2e       	mov	r0, r18
    151e:	02 c0       	rjmp	.+4      	; 0x1524 <DIO_INIT+0xc2>
    1520:	88 0f       	add	r24, r24
    1522:	99 1f       	adc	r25, r25
    1524:	0a 94       	dec	r0
    1526:	e2 f7       	brpl	.-8      	; 0x1520 <DIO_INIT+0xbe>
    1528:	80 95       	com	r24
    152a:	84 23       	and	r24, r20
    152c:	8c 93       	st	X, r24
    152e:	9b c0       	rjmp	.+310    	; 0x1666 <DIO_INIT+0x204>
			}
			break;
		case GROUPB:
			if (PIN_CFG[count].PIN_DIR == OUTPUT) {
    1530:	8b 81       	ldd	r24, Y+3	; 0x03
    1532:	88 2f       	mov	r24, r24
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	88 0f       	add	r24, r24
    1538:	99 1f       	adc	r25, r25
    153a:	fc 01       	movw	r30, r24
    153c:	e4 55       	subi	r30, 0x54	; 84
    153e:	fe 4f       	sbci	r31, 0xFE	; 254
    1540:	80 81       	ld	r24, Z
    1542:	81 30       	cpi	r24, 0x01	; 1
    1544:	a1 f4       	brne	.+40     	; 0x156e <DIO_INIT+0x10c>
				SET_BIT(DDRB_REG, Channelx);
    1546:	a7 e3       	ldi	r26, 0x37	; 55
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	e7 e3       	ldi	r30, 0x37	; 55
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	48 2f       	mov	r20, r24
    1552:	89 81       	ldd	r24, Y+1	; 0x01
    1554:	28 2f       	mov	r18, r24
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	02 2e       	mov	r0, r18
    155e:	02 c0       	rjmp	.+4      	; 0x1564 <DIO_INIT+0x102>
    1560:	88 0f       	add	r24, r24
    1562:	99 1f       	adc	r25, r25
    1564:	0a 94       	dec	r0
    1566:	e2 f7       	brpl	.-8      	; 0x1560 <DIO_INIT+0xfe>
    1568:	84 2b       	or	r24, r20
    156a:	8c 93       	st	X, r24
    156c:	7c c0       	rjmp	.+248    	; 0x1666 <DIO_INIT+0x204>
			} else {
				CLR_BIT(DDRB_REG, Channelx);
    156e:	a7 e3       	ldi	r26, 0x37	; 55
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	e7 e3       	ldi	r30, 0x37	; 55
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	48 2f       	mov	r20, r24
    157a:	89 81       	ldd	r24, Y+1	; 0x01
    157c:	28 2f       	mov	r18, r24
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	02 2e       	mov	r0, r18
    1586:	02 c0       	rjmp	.+4      	; 0x158c <DIO_INIT+0x12a>
    1588:	88 0f       	add	r24, r24
    158a:	99 1f       	adc	r25, r25
    158c:	0a 94       	dec	r0
    158e:	e2 f7       	brpl	.-8      	; 0x1588 <DIO_INIT+0x126>
    1590:	80 95       	com	r24
    1592:	84 23       	and	r24, r20
    1594:	8c 93       	st	X, r24
    1596:	67 c0       	rjmp	.+206    	; 0x1666 <DIO_INIT+0x204>
			}
			break;
		case GROUPC:
			if (PIN_CFG[count].PIN_DIR == OUTPUT) {
    1598:	8b 81       	ldd	r24, Y+3	; 0x03
    159a:	88 2f       	mov	r24, r24
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	88 0f       	add	r24, r24
    15a0:	99 1f       	adc	r25, r25
    15a2:	fc 01       	movw	r30, r24
    15a4:	e4 55       	subi	r30, 0x54	; 84
    15a6:	fe 4f       	sbci	r31, 0xFE	; 254
    15a8:	80 81       	ld	r24, Z
    15aa:	81 30       	cpi	r24, 0x01	; 1
    15ac:	a1 f4       	brne	.+40     	; 0x15d6 <DIO_INIT+0x174>
				SET_BIT(DDRC_REG, Channelx);
    15ae:	a4 e3       	ldi	r26, 0x34	; 52
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	e4 e3       	ldi	r30, 0x34	; 52
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	48 2f       	mov	r20, r24
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
    15bc:	28 2f       	mov	r18, r24
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	02 2e       	mov	r0, r18
    15c6:	02 c0       	rjmp	.+4      	; 0x15cc <DIO_INIT+0x16a>
    15c8:	88 0f       	add	r24, r24
    15ca:	99 1f       	adc	r25, r25
    15cc:	0a 94       	dec	r0
    15ce:	e2 f7       	brpl	.-8      	; 0x15c8 <DIO_INIT+0x166>
    15d0:	84 2b       	or	r24, r20
    15d2:	8c 93       	st	X, r24
    15d4:	48 c0       	rjmp	.+144    	; 0x1666 <DIO_INIT+0x204>
			} else {
				CLR_BIT(DDRC_REG, Channelx);
    15d6:	a4 e3       	ldi	r26, 0x34	; 52
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	e4 e3       	ldi	r30, 0x34	; 52
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	48 2f       	mov	r20, r24
    15e2:	89 81       	ldd	r24, Y+1	; 0x01
    15e4:	28 2f       	mov	r18, r24
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	02 2e       	mov	r0, r18
    15ee:	02 c0       	rjmp	.+4      	; 0x15f4 <DIO_INIT+0x192>
    15f0:	88 0f       	add	r24, r24
    15f2:	99 1f       	adc	r25, r25
    15f4:	0a 94       	dec	r0
    15f6:	e2 f7       	brpl	.-8      	; 0x15f0 <DIO_INIT+0x18e>
    15f8:	80 95       	com	r24
    15fa:	84 23       	and	r24, r20
    15fc:	8c 93       	st	X, r24
    15fe:	33 c0       	rjmp	.+102    	; 0x1666 <DIO_INIT+0x204>
			}
			break;
		case GROUPD:
			if (PIN_CFG[count].PIN_DIR == OUTPUT) {
    1600:	8b 81       	ldd	r24, Y+3	; 0x03
    1602:	88 2f       	mov	r24, r24
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	88 0f       	add	r24, r24
    1608:	99 1f       	adc	r25, r25
    160a:	fc 01       	movw	r30, r24
    160c:	e4 55       	subi	r30, 0x54	; 84
    160e:	fe 4f       	sbci	r31, 0xFE	; 254
    1610:	80 81       	ld	r24, Z
    1612:	81 30       	cpi	r24, 0x01	; 1
    1614:	a1 f4       	brne	.+40     	; 0x163e <DIO_INIT+0x1dc>
				SET_BIT(DDRD_REG, Channelx);
    1616:	a1 e3       	ldi	r26, 0x31	; 49
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	e1 e3       	ldi	r30, 0x31	; 49
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	48 2f       	mov	r20, r24
    1622:	89 81       	ldd	r24, Y+1	; 0x01
    1624:	28 2f       	mov	r18, r24
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	02 2e       	mov	r0, r18
    162e:	02 c0       	rjmp	.+4      	; 0x1634 <DIO_INIT+0x1d2>
    1630:	88 0f       	add	r24, r24
    1632:	99 1f       	adc	r25, r25
    1634:	0a 94       	dec	r0
    1636:	e2 f7       	brpl	.-8      	; 0x1630 <DIO_INIT+0x1ce>
    1638:	84 2b       	or	r24, r20
    163a:	8c 93       	st	X, r24
    163c:	14 c0       	rjmp	.+40     	; 0x1666 <DIO_INIT+0x204>
			} else {
				CLR_BIT(DDRD_REG, Channelx);
    163e:	a1 e3       	ldi	r26, 0x31	; 49
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	e1 e3       	ldi	r30, 0x31	; 49
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	48 2f       	mov	r20, r24
    164a:	89 81       	ldd	r24, Y+1	; 0x01
    164c:	28 2f       	mov	r18, r24
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	02 2e       	mov	r0, r18
    1656:	02 c0       	rjmp	.+4      	; 0x165c <DIO_INIT+0x1fa>
    1658:	88 0f       	add	r24, r24
    165a:	99 1f       	adc	r25, r25
    165c:	0a 94       	dec	r0
    165e:	e2 f7       	brpl	.-8      	; 0x1658 <DIO_INIT+0x1f6>
    1660:	80 95       	com	r24
    1662:	84 23       	and	r24, r20
    1664:	8c 93       	st	X, r24

void DIO_INIT() {
	DIO_CHANNEL_TYPES count;
	DIO_GROUPE_TYPES Portx;
	DIO_CHANNEL_TYPES Channelx;
	for (count = DIO_CHANNEL_A0; count < PIN_COUNT; count++) {
    1666:	8b 81       	ldd	r24, Y+3	; 0x03
    1668:	8f 5f       	subi	r24, 0xFF	; 255
    166a:	8b 83       	std	Y+3, r24	; 0x03
    166c:	8b 81       	ldd	r24, Y+3	; 0x03
    166e:	80 32       	cpi	r24, 0x20	; 32
    1670:	08 f4       	brcc	.+2      	; 0x1674 <DIO_INIT+0x212>
    1672:	00 cf       	rjmp	.-512    	; 0x1474 <DIO_INIT+0x12>
		default:
			break;
		}
	}

}
    1674:	0f 90       	pop	r0
    1676:	0f 90       	pop	r0
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	cf 91       	pop	r28
    1680:	df 91       	pop	r29
    1682:	08 95       	ret

00001684 <ADC_INIT>:
 */


#include "ADC.h"

void ADC_INIT(){
    1684:	df 93       	push	r29
    1686:	cf 93       	push	r28
    1688:	cd b7       	in	r28, 0x3d	; 61
    168a:	de b7       	in	r29, 0x3e	; 62
	ADMUX = (1<<REFS0) | (1<<REFS1);// INTERNAL VREF
    168c:	e7 e2       	ldi	r30, 0x27	; 39
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 ec       	ldi	r24, 0xC0	; 192
    1692:	80 83       	st	Z, r24
	ADCSRA = (1<<ADEN) | (1<<ADPS1) |(1<<ADPS2);// ENABLE THE 64 PRE SCALER
    1694:	e6 e2       	ldi	r30, 0x26	; 38
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	86 e8       	ldi	r24, 0x86	; 134
    169a:	80 83       	st	Z, r24
}
    169c:	cf 91       	pop	r28
    169e:	df 91       	pop	r29
    16a0:	08 95       	ret

000016a2 <ADC_READ>:
u16 ADC_READ(u8 MODEID){
    16a2:	df 93       	push	r29
    16a4:	cf 93       	push	r28
    16a6:	00 d0       	rcall	.+0      	; 0x16a8 <ADC_READ+0x6>
    16a8:	0f 92       	push	r0
    16aa:	cd b7       	in	r28, 0x3d	; 61
    16ac:	de b7       	in	r29, 0x3e	; 62
    16ae:	8b 83       	std	Y+3, r24	; 0x03
	u16 TEMP = 0;
    16b0:	1a 82       	std	Y+2, r1	; 0x02
    16b2:	19 82       	std	Y+1, r1	; 0x01
	ADMUX = (ADMUX & 0xE0) | (MODEID & 0x1F); // SET ADC MODE
    16b4:	a7 e2       	ldi	r26, 0x27	; 39
    16b6:	b0 e0       	ldi	r27, 0x00	; 0
    16b8:	e7 e2       	ldi	r30, 0x27	; 39
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	80 81       	ld	r24, Z
    16be:	98 2f       	mov	r25, r24
    16c0:	90 7e       	andi	r25, 0xE0	; 224
    16c2:	8b 81       	ldd	r24, Y+3	; 0x03
    16c4:	8f 71       	andi	r24, 0x1F	; 31
    16c6:	89 2b       	or	r24, r25
    16c8:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADSC); //START CONVERSION
    16ca:	a6 e2       	ldi	r26, 0x26	; 38
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	e6 e2       	ldi	r30, 0x26	; 38
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	80 64       	ori	r24, 0x40	; 64
    16d6:	8c 93       	st	X, r24
	while(!(ADCSRA & (1<<ADIF)));// POLLING ON THE FLAG
    16d8:	e6 e2       	ldi	r30, 0x26	; 38
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	88 2f       	mov	r24, r24
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	80 71       	andi	r24, 0x10	; 16
    16e4:	90 70       	andi	r25, 0x00	; 0
    16e6:	00 97       	sbiw	r24, 0x00	; 0
    16e8:	b9 f3       	breq	.-18     	; 0x16d8 <ADC_READ+0x36>
	ADCSRA |= (1<<ADIF); //CLEAR FLAG
    16ea:	a6 e2       	ldi	r26, 0x26	; 38
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	e6 e2       	ldi	r30, 0x26	; 38
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	80 61       	ori	r24, 0x10	; 16
    16f6:	8c 93       	st	X, r24
	TEMP = ADCL;
    16f8:	e4 e2       	ldi	r30, 0x24	; 36
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	88 2f       	mov	r24, r24
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	9a 83       	std	Y+2, r25	; 0x02
    1704:	89 83       	std	Y+1, r24	; 0x01
	TEMP |= ADCH << 8;
    1706:	e5 e2       	ldi	r30, 0x25	; 37
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	88 2f       	mov	r24, r24
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	98 2f       	mov	r25, r24
    1712:	88 27       	eor	r24, r24
    1714:	9c 01       	movw	r18, r24
    1716:	89 81       	ldd	r24, Y+1	; 0x01
    1718:	9a 81       	ldd	r25, Y+2	; 0x02
    171a:	82 2b       	or	r24, r18
    171c:	93 2b       	or	r25, r19
    171e:	9a 83       	std	Y+2, r25	; 0x02
    1720:	89 83       	std	Y+1, r24	; 0x01
	return TEMP;
    1722:	89 81       	ldd	r24, Y+1	; 0x01
    1724:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1726:	0f 90       	pop	r0
    1728:	0f 90       	pop	r0
    172a:	0f 90       	pop	r0
    172c:	cf 91       	pop	r28
    172e:	df 91       	pop	r29
    1730:	08 95       	ret

00001732 <Ultrasonic_Read>:
#include "../../HAL/LCD/LCD.h"


volatile long OVF_COUNT = 0;

double Ultrasonic_Read(void) {
    1732:	ef 92       	push	r14
    1734:	ff 92       	push	r15
    1736:	0f 93       	push	r16
    1738:	1f 93       	push	r17
    173a:	df 93       	push	r29
    173c:	cf 93       	push	r28
    173e:	cd b7       	in	r28, 0x3d	; 61
    1740:	de b7       	in	r29, 0x3e	; 62
    1742:	a0 97       	sbiw	r28, 0x20	; 32
    1744:	0f b6       	in	r0, 0x3f	; 63
    1746:	f8 94       	cli
    1748:	de bf       	out	0x3e, r29	; 62
    174a:	0f be       	out	0x3f, r0	; 63
    174c:	cd bf       	out	0x3d, r28	; 61
	sei(); // set global interrupt flag
    174e:	78 94       	sei
	TIMSK |= (1<<TOIE1);
    1750:	a9 e5       	ldi	r26, 0x59	; 89
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	e9 e5       	ldi	r30, 0x59	; 89
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	84 60       	ori	r24, 0x04	; 4
    175c:	8c 93       	st	X, r24
	TCNT1 = 0; // clear timer
    175e:	ec e4       	ldi	r30, 0x4C	; 76
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	11 82       	std	Z+1, r1	; 0x01
    1764:	10 82       	st	Z, r1
	TCCR1A = 0; // normal mode
    1766:	ef e4       	ldi	r30, 0x4F	; 79
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	10 82       	st	Z, r1
	TCCR1B |= (1 << ICES1) | (1 << CS11); // rising edge & prescale 8
    176c:	ae e4       	ldi	r26, 0x4E	; 78
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	ee e4       	ldi	r30, 0x4E	; 78
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	82 64       	ori	r24, 0x42	; 66
    1778:	8c 93       	st	X, r24
	TIFR |= (1 << TOV1); // clear flag
    177a:	a8 e5       	ldi	r26, 0x58	; 88
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	e8 e5       	ldi	r30, 0x58	; 88
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	84 60       	ori	r24, 0x04	; 4
    1786:	8c 93       	st	X, r24
	TIFR |= (1 << ICF1); // CLEAR interrupt
    1788:	a8 e5       	ldi	r26, 0x58	; 88
    178a:	b0 e0       	ldi	r27, 0x00	; 0
    178c:	e8 e5       	ldi	r30, 0x58	; 88
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	80 62       	ori	r24, 0x20	; 32
    1794:	8c 93       	st	X, r24


	Write_Channel(DIO_CHANNEL_A0, STD_HIGH);
    1796:	80 e0       	ldi	r24, 0x00	; 0
    1798:	61 e0       	ldi	r22, 0x01	; 1
    179a:	0e 94 41 08 	call	0x1082	; 0x1082 <Write_Channel>
    179e:	80 e0       	ldi	r24, 0x00	; 0
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	a0 e2       	ldi	r26, 0x20	; 32
    17a4:	b1 e4       	ldi	r27, 0x41	; 65
    17a6:	8d 8b       	std	Y+21, r24	; 0x15
    17a8:	9e 8b       	std	Y+22, r25	; 0x16
    17aa:	af 8b       	std	Y+23, r26	; 0x17
    17ac:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    17ae:	6d 89       	ldd	r22, Y+21	; 0x15
    17b0:	7e 89       	ldd	r23, Y+22	; 0x16
    17b2:	8f 89       	ldd	r24, Y+23	; 0x17
    17b4:	98 8d       	ldd	r25, Y+24	; 0x18
    17b6:	2b ea       	ldi	r18, 0xAB	; 171
    17b8:	3a ea       	ldi	r19, 0xAA	; 170
    17ba:	4a e2       	ldi	r20, 0x2A	; 42
    17bc:	50 e4       	ldi	r21, 0x40	; 64
    17be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17c2:	dc 01       	movw	r26, r24
    17c4:	cb 01       	movw	r24, r22
    17c6:	89 8b       	std	Y+17, r24	; 0x11
    17c8:	9a 8b       	std	Y+18, r25	; 0x12
    17ca:	ab 8b       	std	Y+19, r26	; 0x13
    17cc:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    17ce:	69 89       	ldd	r22, Y+17	; 0x11
    17d0:	7a 89       	ldd	r23, Y+18	; 0x12
    17d2:	8b 89       	ldd	r24, Y+19	; 0x13
    17d4:	9c 89       	ldd	r25, Y+20	; 0x14
    17d6:	20 e0       	ldi	r18, 0x00	; 0
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	40 e8       	ldi	r20, 0x80	; 128
    17dc:	5f e3       	ldi	r21, 0x3F	; 63
    17de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17e2:	88 23       	and	r24, r24
    17e4:	1c f4       	brge	.+6      	; 0x17ec <Ultrasonic_Read+0xba>
		__ticks = 1;
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	88 8b       	std	Y+16, r24	; 0x10
    17ea:	91 c0       	rjmp	.+290    	; 0x190e <Ultrasonic_Read+0x1dc>
	else if (__tmp > 255)
    17ec:	69 89       	ldd	r22, Y+17	; 0x11
    17ee:	7a 89       	ldd	r23, Y+18	; 0x12
    17f0:	8b 89       	ldd	r24, Y+19	; 0x13
    17f2:	9c 89       	ldd	r25, Y+20	; 0x14
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	4f e7       	ldi	r20, 0x7F	; 127
    17fa:	53 e4       	ldi	r21, 0x43	; 67
    17fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1800:	18 16       	cp	r1, r24
    1802:	0c f0       	brlt	.+2      	; 0x1806 <Ultrasonic_Read+0xd4>
    1804:	7b c0       	rjmp	.+246    	; 0x18fc <Ultrasonic_Read+0x1ca>
	{
		_delay_ms(__us / 1000.0);
    1806:	6d 89       	ldd	r22, Y+21	; 0x15
    1808:	7e 89       	ldd	r23, Y+22	; 0x16
    180a:	8f 89       	ldd	r24, Y+23	; 0x17
    180c:	98 8d       	ldd	r25, Y+24	; 0x18
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	4a e7       	ldi	r20, 0x7A	; 122
    1814:	54 e4       	ldi	r21, 0x44	; 68
    1816:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    181a:	dc 01       	movw	r26, r24
    181c:	cb 01       	movw	r24, r22
    181e:	8c 87       	std	Y+12, r24	; 0x0c
    1820:	9d 87       	std	Y+13, r25	; 0x0d
    1822:	ae 87       	std	Y+14, r26	; 0x0e
    1824:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1826:	6c 85       	ldd	r22, Y+12	; 0x0c
    1828:	7d 85       	ldd	r23, Y+13	; 0x0d
    182a:	8e 85       	ldd	r24, Y+14	; 0x0e
    182c:	9f 85       	ldd	r25, Y+15	; 0x0f
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	4a ef       	ldi	r20, 0xFA	; 250
    1834:	54 e4       	ldi	r21, 0x44	; 68
    1836:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    183a:	dc 01       	movw	r26, r24
    183c:	cb 01       	movw	r24, r22
    183e:	88 87       	std	Y+8, r24	; 0x08
    1840:	99 87       	std	Y+9, r25	; 0x09
    1842:	aa 87       	std	Y+10, r26	; 0x0a
    1844:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1846:	68 85       	ldd	r22, Y+8	; 0x08
    1848:	79 85       	ldd	r23, Y+9	; 0x09
    184a:	8a 85       	ldd	r24, Y+10	; 0x0a
    184c:	9b 85       	ldd	r25, Y+11	; 0x0b
    184e:	20 e0       	ldi	r18, 0x00	; 0
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	40 e8       	ldi	r20, 0x80	; 128
    1854:	5f e3       	ldi	r21, 0x3F	; 63
    1856:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    185a:	88 23       	and	r24, r24
    185c:	2c f4       	brge	.+10     	; 0x1868 <Ultrasonic_Read+0x136>
		__ticks = 1;
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	9f 83       	std	Y+7, r25	; 0x07
    1864:	8e 83       	std	Y+6, r24	; 0x06
    1866:	3f c0       	rjmp	.+126    	; 0x18e6 <Ultrasonic_Read+0x1b4>
	else if (__tmp > 65535)
    1868:	68 85       	ldd	r22, Y+8	; 0x08
    186a:	79 85       	ldd	r23, Y+9	; 0x09
    186c:	8a 85       	ldd	r24, Y+10	; 0x0a
    186e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1870:	20 e0       	ldi	r18, 0x00	; 0
    1872:	3f ef       	ldi	r19, 0xFF	; 255
    1874:	4f e7       	ldi	r20, 0x7F	; 127
    1876:	57 e4       	ldi	r21, 0x47	; 71
    1878:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    187c:	18 16       	cp	r1, r24
    187e:	4c f5       	brge	.+82     	; 0x18d2 <Ultrasonic_Read+0x1a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1880:	6c 85       	ldd	r22, Y+12	; 0x0c
    1882:	7d 85       	ldd	r23, Y+13	; 0x0d
    1884:	8e 85       	ldd	r24, Y+14	; 0x0e
    1886:	9f 85       	ldd	r25, Y+15	; 0x0f
    1888:	20 e0       	ldi	r18, 0x00	; 0
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	40 e2       	ldi	r20, 0x20	; 32
    188e:	51 e4       	ldi	r21, 0x41	; 65
    1890:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1894:	dc 01       	movw	r26, r24
    1896:	cb 01       	movw	r24, r22
    1898:	bc 01       	movw	r22, r24
    189a:	cd 01       	movw	r24, r26
    189c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a0:	dc 01       	movw	r26, r24
    18a2:	cb 01       	movw	r24, r22
    18a4:	9f 83       	std	Y+7, r25	; 0x07
    18a6:	8e 83       	std	Y+6, r24	; 0x06
    18a8:	0f c0       	rjmp	.+30     	; 0x18c8 <Ultrasonic_Read+0x196>
    18aa:	88 ec       	ldi	r24, 0xC8	; 200
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	9d 83       	std	Y+5, r25	; 0x05
    18b0:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18b2:	8c 81       	ldd	r24, Y+4	; 0x04
    18b4:	9d 81       	ldd	r25, Y+5	; 0x05
    18b6:	01 97       	sbiw	r24, 0x01	; 1
    18b8:	f1 f7       	brne	.-4      	; 0x18b6 <Ultrasonic_Read+0x184>
    18ba:	9d 83       	std	Y+5, r25	; 0x05
    18bc:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18be:	8e 81       	ldd	r24, Y+6	; 0x06
    18c0:	9f 81       	ldd	r25, Y+7	; 0x07
    18c2:	01 97       	sbiw	r24, 0x01	; 1
    18c4:	9f 83       	std	Y+7, r25	; 0x07
    18c6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18c8:	8e 81       	ldd	r24, Y+6	; 0x06
    18ca:	9f 81       	ldd	r25, Y+7	; 0x07
    18cc:	00 97       	sbiw	r24, 0x00	; 0
    18ce:	69 f7       	brne	.-38     	; 0x18aa <Ultrasonic_Read+0x178>
    18d0:	24 c0       	rjmp	.+72     	; 0x191a <Ultrasonic_Read+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18d2:	68 85       	ldd	r22, Y+8	; 0x08
    18d4:	79 85       	ldd	r23, Y+9	; 0x09
    18d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    18d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    18da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18de:	dc 01       	movw	r26, r24
    18e0:	cb 01       	movw	r24, r22
    18e2:	9f 83       	std	Y+7, r25	; 0x07
    18e4:	8e 83       	std	Y+6, r24	; 0x06
    18e6:	8e 81       	ldd	r24, Y+6	; 0x06
    18e8:	9f 81       	ldd	r25, Y+7	; 0x07
    18ea:	9b 83       	std	Y+3, r25	; 0x03
    18ec:	8a 83       	std	Y+2, r24	; 0x02
    18ee:	8a 81       	ldd	r24, Y+2	; 0x02
    18f0:	9b 81       	ldd	r25, Y+3	; 0x03
    18f2:	01 97       	sbiw	r24, 0x01	; 1
    18f4:	f1 f7       	brne	.-4      	; 0x18f2 <Ultrasonic_Read+0x1c0>
    18f6:	9b 83       	std	Y+3, r25	; 0x03
    18f8:	8a 83       	std	Y+2, r24	; 0x02
    18fa:	0f c0       	rjmp	.+30     	; 0x191a <Ultrasonic_Read+0x1e8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    18fc:	69 89       	ldd	r22, Y+17	; 0x11
    18fe:	7a 89       	ldd	r23, Y+18	; 0x12
    1900:	8b 89       	ldd	r24, Y+19	; 0x13
    1902:	9c 89       	ldd	r25, Y+20	; 0x14
    1904:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1908:	dc 01       	movw	r26, r24
    190a:	cb 01       	movw	r24, r22
    190c:	88 8b       	std	Y+16, r24	; 0x10
    190e:	88 89       	ldd	r24, Y+16	; 0x10
    1910:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1912:	89 81       	ldd	r24, Y+1	; 0x01
    1914:	8a 95       	dec	r24
    1916:	f1 f7       	brne	.-4      	; 0x1914 <Ultrasonic_Read+0x1e2>
    1918:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	Write_Channel(DIO_CHANNEL_A0, STD_LOW);
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	60 e0       	ldi	r22, 0x00	; 0
    191e:	0e 94 41 08 	call	0x1082	; 0x1082 <Write_Channel>

	while(!(TIFR & (1<<ICF1)));
    1922:	e8 e5       	ldi	r30, 0x58	; 88
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	80 81       	ld	r24, Z
    1928:	88 2f       	mov	r24, r24
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	80 72       	andi	r24, 0x20	; 32
    192e:	90 70       	andi	r25, 0x00	; 0
    1930:	00 97       	sbiw	r24, 0x00	; 0
    1932:	b9 f3       	breq	.-18     	; 0x1922 <Ultrasonic_Read+0x1f0>
	TCNT1 = 0; // clear timer
    1934:	ec e4       	ldi	r30, 0x4C	; 76
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	11 82       	std	Z+1, r1	; 0x01
    193a:	10 82       	st	Z, r1
	OVF_COUNT = 0;
    193c:	10 92 04 02 	sts	0x0204, r1
    1940:	10 92 05 02 	sts	0x0205, r1
    1944:	10 92 06 02 	sts	0x0206, r1
    1948:	10 92 07 02 	sts	0x0207, r1
	TCCR1B &=~ (1 << ICES1);// rising edge & prescale 8
    194c:	ae e4       	ldi	r26, 0x4E	; 78
    194e:	b0 e0       	ldi	r27, 0x00	; 0
    1950:	ee e4       	ldi	r30, 0x4E	; 78
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	80 81       	ld	r24, Z
    1956:	8f 7b       	andi	r24, 0xBF	; 191
    1958:	8c 93       	st	X, r24
	TIFR |= (1 << TOV1); // clear flag
    195a:	a8 e5       	ldi	r26, 0x58	; 88
    195c:	b0 e0       	ldi	r27, 0x00	; 0
    195e:	e8 e5       	ldi	r30, 0x58	; 88
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 81       	ld	r24, Z
    1964:	84 60       	ori	r24, 0x04	; 4
    1966:	8c 93       	st	X, r24
	TIFR |= (1 << ICF1); // CLEAR interrupt
    1968:	a8 e5       	ldi	r26, 0x58	; 88
    196a:	b0 e0       	ldi	r27, 0x00	; 0
    196c:	e8 e5       	ldi	r30, 0x58	; 88
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	80 81       	ld	r24, Z
    1972:	80 62       	ori	r24, 0x20	; 32
    1974:	8c 93       	st	X, r24

	while(!(TIFR & (1<<ICF1)));
    1976:	e8 e5       	ldi	r30, 0x58	; 88
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	88 2f       	mov	r24, r24
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	80 72       	andi	r24, 0x20	; 32
    1982:	90 70       	andi	r25, 0x00	; 0
    1984:	00 97       	sbiw	r24, 0x00	; 0
    1986:	b9 f3       	breq	.-18     	; 0x1976 <Ultrasonic_Read+0x244>
	long count = ICR1 + (OVF_COUNT*65535);
    1988:	e6 e4       	ldi	r30, 0x46	; 70
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	80 81       	ld	r24, Z
    198e:	91 81       	ldd	r25, Z+1	; 0x01
    1990:	7c 01       	movw	r14, r24
    1992:	00 e0       	ldi	r16, 0x00	; 0
    1994:	10 e0       	ldi	r17, 0x00	; 0
    1996:	80 91 04 02 	lds	r24, 0x0204
    199a:	90 91 05 02 	lds	r25, 0x0205
    199e:	a0 91 06 02 	lds	r26, 0x0206
    19a2:	b0 91 07 02 	lds	r27, 0x0207
    19a6:	2f ef       	ldi	r18, 0xFF	; 255
    19a8:	3f ef       	ldi	r19, 0xFF	; 255
    19aa:	40 e0       	ldi	r20, 0x00	; 0
    19ac:	50 e0       	ldi	r21, 0x00	; 0
    19ae:	bc 01       	movw	r22, r24
    19b0:	cd 01       	movw	r24, r26
    19b2:	0e 94 4d 29 	call	0x529a	; 0x529a <__mulsi3>
    19b6:	dc 01       	movw	r26, r24
    19b8:	cb 01       	movw	r24, r22
    19ba:	8e 0d       	add	r24, r14
    19bc:	9f 1d       	adc	r25, r15
    19be:	a0 1f       	adc	r26, r16
    19c0:	b1 1f       	adc	r27, r17
    19c2:	8d 8f       	std	Y+29, r24	; 0x1d
    19c4:	9e 8f       	std	Y+30, r25	; 0x1e
    19c6:	af 8f       	std	Y+31, r26	; 0x1f
    19c8:	b8 a3       	std	Y+32, r27	; 0x20
	double distance = (double) count * 0.008575;
    19ca:	6d 8d       	ldd	r22, Y+29	; 0x1d
    19cc:	7e 8d       	ldd	r23, Y+30	; 0x1e
    19ce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19d0:	98 a1       	ldd	r25, Y+32	; 0x20
    19d2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    19d6:	dc 01       	movw	r26, r24
    19d8:	cb 01       	movw	r24, r22
    19da:	bc 01       	movw	r22, r24
    19dc:	cd 01       	movw	r24, r26
    19de:	28 e2       	ldi	r18, 0x28	; 40
    19e0:	3e e7       	ldi	r19, 0x7E	; 126
    19e2:	4c e0       	ldi	r20, 0x0C	; 12
    19e4:	5c e3       	ldi	r21, 0x3C	; 60
    19e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ea:	dc 01       	movw	r26, r24
    19ec:	cb 01       	movw	r24, r22
    19ee:	89 8f       	std	Y+25, r24	; 0x19
    19f0:	9a 8f       	std	Y+26, r25	; 0x1a
    19f2:	ab 8f       	std	Y+27, r26	; 0x1b
    19f4:	bc 8f       	std	Y+28, r27	; 0x1c
	return distance;
    19f6:	89 8d       	ldd	r24, Y+25	; 0x19
    19f8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    19fa:	ab 8d       	ldd	r26, Y+27	; 0x1b
    19fc:	bc 8d       	ldd	r27, Y+28	; 0x1c


}
    19fe:	bc 01       	movw	r22, r24
    1a00:	cd 01       	movw	r24, r26
    1a02:	a0 96       	adiw	r28, 0x20	; 32
    1a04:	0f b6       	in	r0, 0x3f	; 63
    1a06:	f8 94       	cli
    1a08:	de bf       	out	0x3e, r29	; 62
    1a0a:	0f be       	out	0x3f, r0	; 63
    1a0c:	cd bf       	out	0x3d, r28	; 61
    1a0e:	cf 91       	pop	r28
    1a10:	df 91       	pop	r29
    1a12:	1f 91       	pop	r17
    1a14:	0f 91       	pop	r16
    1a16:	ff 90       	pop	r15
    1a18:	ef 90       	pop	r14
    1a1a:	08 95       	ret

00001a1c <__vector_9>:
ISR(TIMER1_OVF_vect){
    1a1c:	1f 92       	push	r1
    1a1e:	0f 92       	push	r0
    1a20:	0f b6       	in	r0, 0x3f	; 63
    1a22:	0f 92       	push	r0
    1a24:	11 24       	eor	r1, r1
    1a26:	8f 93       	push	r24
    1a28:	9f 93       	push	r25
    1a2a:	af 93       	push	r26
    1a2c:	bf 93       	push	r27
    1a2e:	df 93       	push	r29
    1a30:	cf 93       	push	r28
    1a32:	cd b7       	in	r28, 0x3d	; 61
    1a34:	de b7       	in	r29, 0x3e	; 62
	OVF_COUNT++;
    1a36:	80 91 04 02 	lds	r24, 0x0204
    1a3a:	90 91 05 02 	lds	r25, 0x0205
    1a3e:	a0 91 06 02 	lds	r26, 0x0206
    1a42:	b0 91 07 02 	lds	r27, 0x0207
    1a46:	01 96       	adiw	r24, 0x01	; 1
    1a48:	a1 1d       	adc	r26, r1
    1a4a:	b1 1d       	adc	r27, r1
    1a4c:	80 93 04 02 	sts	0x0204, r24
    1a50:	90 93 05 02 	sts	0x0205, r25
    1a54:	a0 93 06 02 	sts	0x0206, r26
    1a58:	b0 93 07 02 	sts	0x0207, r27
}
    1a5c:	cf 91       	pop	r28
    1a5e:	df 91       	pop	r29
    1a60:	bf 91       	pop	r27
    1a62:	af 91       	pop	r26
    1a64:	9f 91       	pop	r25
    1a66:	8f 91       	pop	r24
    1a68:	0f 90       	pop	r0
    1a6a:	0f be       	out	0x3f, r0	; 63
    1a6c:	0f 90       	pop	r0
    1a6e:	1f 90       	pop	r1
    1a70:	18 95       	reti

00001a72 <UART_INIT>:
 */


#include "USART.h"

void UART_INIT(){
    1a72:	df 93       	push	r29
    1a74:	cf 93       	push	r28
    1a76:	cd b7       	in	r28, 0x3d	; 61
    1a78:	de b7       	in	r29, 0x3e	; 62
	UCSRB |= (1<<TXEN)|(1<<RXEN);//enable reciever and transmitter
    1a7a:	aa e2       	ldi	r26, 0x2A	; 42
    1a7c:	b0 e0       	ldi	r27, 0x00	; 0
    1a7e:	ea e2       	ldi	r30, 0x2A	; 42
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	80 81       	ld	r24, Z
    1a84:	88 61       	ori	r24, 0x18	; 24
    1a86:	8c 93       	st	X, r24
	UCSRC |= (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);//8 BITS
    1a88:	a0 e4       	ldi	r26, 0x40	; 64
    1a8a:	b0 e0       	ldi	r27, 0x00	; 0
    1a8c:	e0 e4       	ldi	r30, 0x40	; 64
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	80 81       	ld	r24, Z
    1a92:	86 68       	ori	r24, 0x86	; 134
    1a94:	8c 93       	st	X, r24
	UBRRL = MyUBRR;
    1a96:	e9 e2       	ldi	r30, 0x29	; 41
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	87 e6       	ldi	r24, 0x67	; 103
    1a9c:	80 83       	st	Z, r24
	UBRRH |= MyUBRR>>8;
    1a9e:	a0 e4       	ldi	r26, 0x40	; 64
    1aa0:	b0 e0       	ldi	r27, 0x00	; 0
    1aa2:	e0 e4       	ldi	r30, 0x40	; 64
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	8c 93       	st	X, r24
}
    1aaa:	cf 91       	pop	r28
    1aac:	df 91       	pop	r29
    1aae:	08 95       	ret

00001ab0 <UART_TransmitChar>:
void UART_TransmitChar(s8 data){
    1ab0:	df 93       	push	r29
    1ab2:	cf 93       	push	r28
    1ab4:	0f 92       	push	r0
    1ab6:	cd b7       	in	r28, 0x3d	; 61
    1ab8:	de b7       	in	r29, 0x3e	; 62
    1aba:	89 83       	std	Y+1, r24	; 0x01
	while(!(UCSRA & (1<<UDRE)));
    1abc:	eb e2       	ldi	r30, 0x2B	; 43
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	80 81       	ld	r24, Z
    1ac2:	88 2f       	mov	r24, r24
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	80 72       	andi	r24, 0x20	; 32
    1ac8:	90 70       	andi	r25, 0x00	; 0
    1aca:	00 97       	sbiw	r24, 0x00	; 0
    1acc:	b9 f3       	breq	.-18     	; 0x1abc <UART_TransmitChar+0xc>
	UDR = data;
    1ace:	ec e2       	ldi	r30, 0x2C	; 44
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	89 81       	ldd	r24, Y+1	; 0x01
    1ad4:	80 83       	st	Z, r24
}
    1ad6:	0f 90       	pop	r0
    1ad8:	cf 91       	pop	r28
    1ada:	df 91       	pop	r29
    1adc:	08 95       	ret

00001ade <UART_Recieve>:
s8 UART_Recieve(){
    1ade:	df 93       	push	r29
    1ae0:	cf 93       	push	r28
    1ae2:	cd b7       	in	r28, 0x3d	; 61
    1ae4:	de b7       	in	r29, 0x3e	; 62
	while(!(UCSRA & (1<<RXC)));
    1ae6:	eb e2       	ldi	r30, 0x2B	; 43
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	80 81       	ld	r24, Z
    1aec:	88 23       	and	r24, r24
    1aee:	dc f7       	brge	.-10     	; 0x1ae6 <UART_Recieve+0x8>
	return UDR;
    1af0:	ec e2       	ldi	r30, 0x2C	; 44
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	80 81       	ld	r24, Z
}
    1af6:	cf 91       	pop	r28
    1af8:	df 91       	pop	r29
    1afa:	08 95       	ret

00001afc <UART_TransmitString>:
void UART_TransmitString(s8 * data){
    1afc:	df 93       	push	r29
    1afe:	cf 93       	push	r28
    1b00:	00 d0       	rcall	.+0      	; 0x1b02 <UART_TransmitString+0x6>
    1b02:	0f 92       	push	r0
    1b04:	cd b7       	in	r28, 0x3d	; 61
    1b06:	de b7       	in	r29, 0x3e	; 62
    1b08:	9b 83       	std	Y+3, r25	; 0x03
    1b0a:	8a 83       	std	Y+2, r24	; 0x02
    1b0c:	0e c0       	rjmp	.+28     	; 0x1b2a <UART_TransmitString+0x2e>
	u8 i;
	while(data[i] != '\0'){
		UART_TransmitChar(data[i]);
    1b0e:	89 81       	ldd	r24, Y+1	; 0x01
    1b10:	28 2f       	mov	r18, r24
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	8a 81       	ldd	r24, Y+2	; 0x02
    1b16:	9b 81       	ldd	r25, Y+3	; 0x03
    1b18:	fc 01       	movw	r30, r24
    1b1a:	e2 0f       	add	r30, r18
    1b1c:	f3 1f       	adc	r31, r19
    1b1e:	80 81       	ld	r24, Z
    1b20:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <UART_TransmitChar>
		i++;
    1b24:	89 81       	ldd	r24, Y+1	; 0x01
    1b26:	8f 5f       	subi	r24, 0xFF	; 255
    1b28:	89 83       	std	Y+1, r24	; 0x01
	while(!(UCSRA & (1<<RXC)));
	return UDR;
}
void UART_TransmitString(s8 * data){
	u8 i;
	while(data[i] != '\0'){
    1b2a:	89 81       	ldd	r24, Y+1	; 0x01
    1b2c:	28 2f       	mov	r18, r24
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	8a 81       	ldd	r24, Y+2	; 0x02
    1b32:	9b 81       	ldd	r25, Y+3	; 0x03
    1b34:	fc 01       	movw	r30, r24
    1b36:	e2 0f       	add	r30, r18
    1b38:	f3 1f       	adc	r31, r19
    1b3a:	80 81       	ld	r24, Z
    1b3c:	88 23       	and	r24, r24
    1b3e:	39 f7       	brne	.-50     	; 0x1b0e <UART_TransmitString+0x12>
		UART_TransmitChar(data[i]);
		i++;
	}
}
    1b40:	0f 90       	pop	r0
    1b42:	0f 90       	pop	r0
    1b44:	0f 90       	pop	r0
    1b46:	cf 91       	pop	r28
    1b48:	df 91       	pop	r29
    1b4a:	08 95       	ret

00001b4c <Stepper_Angle>:
 *      Author: Elbekoo
 */

#include "Stepper.h"

void Stepper_Angle() {
    1b4c:	df 93       	push	r29
    1b4e:	cf 93       	push	r28
    1b50:	cd b7       	in	r28, 0x3d	; 61
    1b52:	de b7       	in	r29, 0x3e	; 62
    1b54:	ec 97       	sbiw	r28, 0x3c	; 60
    1b56:	0f b6       	in	r0, 0x3f	; 63
    1b58:	f8 94       	cli
    1b5a:	de bf       	out	0x3e, r29	; 62
    1b5c:	0f be       	out	0x3f, r0	; 63
    1b5e:	cd bf       	out	0x3d, r28	; 61
	/* Rotate Stepper Motor clockwise with Half step sequence */
	for (int i = 0; i < 150; i++) {
    1b60:	1c ae       	std	Y+60, r1	; 0x3c
    1b62:	1b ae       	std	Y+59, r1	; 0x3b
    1b64:	0a c0       	rjmp	.+20     	; 0x1b7a <Stepper_Angle+0x2e>
		Stepper(0, 3);
    1b66:	80 e0       	ldi	r24, 0x00	; 0
    1b68:	63 e0       	ldi	r22, 0x03	; 3
    1b6a:	70 e0       	ldi	r23, 0x00	; 0
    1b6c:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <Stepper>

#include "Stepper.h"

void Stepper_Angle() {
	/* Rotate Stepper Motor clockwise with Half step sequence */
	for (int i = 0; i < 150; i++) {
    1b70:	8b ad       	ldd	r24, Y+59	; 0x3b
    1b72:	9c ad       	ldd	r25, Y+60	; 0x3c
    1b74:	01 96       	adiw	r24, 0x01	; 1
    1b76:	9c af       	std	Y+60, r25	; 0x3c
    1b78:	8b af       	std	Y+59, r24	; 0x3b
    1b7a:	8b ad       	ldd	r24, Y+59	; 0x3b
    1b7c:	9c ad       	ldd	r25, Y+60	; 0x3c
    1b7e:	86 39       	cpi	r24, 0x96	; 150
    1b80:	91 05       	cpc	r25, r1
    1b82:	8c f3       	brlt	.-30     	; 0x1b66 <Stepper_Angle+0x1a>
		Stepper(0, 3);
	}
	PORTA = 0x09; /* Last step to initial position */
    1b84:	eb e3       	ldi	r30, 0x3B	; 59
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	89 e0       	ldi	r24, 0x09	; 9
    1b8a:	80 83       	st	Z, r24
    1b8c:	80 e0       	ldi	r24, 0x00	; 0
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	a0 e4       	ldi	r26, 0x40	; 64
    1b92:	b0 e4       	ldi	r27, 0x40	; 64
    1b94:	8d ab       	std	Y+53, r24	; 0x35
    1b96:	9e ab       	std	Y+54, r25	; 0x36
    1b98:	af ab       	std	Y+55, r26	; 0x37
    1b9a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b9c:	6d a9       	ldd	r22, Y+53	; 0x35
    1b9e:	7e a9       	ldd	r23, Y+54	; 0x36
    1ba0:	8f a9       	ldd	r24, Y+55	; 0x37
    1ba2:	98 ad       	ldd	r25, Y+56	; 0x38
    1ba4:	20 e0       	ldi	r18, 0x00	; 0
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	4a ef       	ldi	r20, 0xFA	; 250
    1baa:	54 e4       	ldi	r21, 0x44	; 68
    1bac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb0:	dc 01       	movw	r26, r24
    1bb2:	cb 01       	movw	r24, r22
    1bb4:	89 ab       	std	Y+49, r24	; 0x31
    1bb6:	9a ab       	std	Y+50, r25	; 0x32
    1bb8:	ab ab       	std	Y+51, r26	; 0x33
    1bba:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1bbc:	69 a9       	ldd	r22, Y+49	; 0x31
    1bbe:	7a a9       	ldd	r23, Y+50	; 0x32
    1bc0:	8b a9       	ldd	r24, Y+51	; 0x33
    1bc2:	9c a9       	ldd	r25, Y+52	; 0x34
    1bc4:	20 e0       	ldi	r18, 0x00	; 0
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	40 e8       	ldi	r20, 0x80	; 128
    1bca:	5f e3       	ldi	r21, 0x3F	; 63
    1bcc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bd0:	88 23       	and	r24, r24
    1bd2:	2c f4       	brge	.+10     	; 0x1bde <Stepper_Angle+0x92>
		__ticks = 1;
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	98 ab       	std	Y+48, r25	; 0x30
    1bda:	8f a7       	std	Y+47, r24	; 0x2f
    1bdc:	3f c0       	rjmp	.+126    	; 0x1c5c <Stepper_Angle+0x110>
	else if (__tmp > 65535)
    1bde:	69 a9       	ldd	r22, Y+49	; 0x31
    1be0:	7a a9       	ldd	r23, Y+50	; 0x32
    1be2:	8b a9       	ldd	r24, Y+51	; 0x33
    1be4:	9c a9       	ldd	r25, Y+52	; 0x34
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	3f ef       	ldi	r19, 0xFF	; 255
    1bea:	4f e7       	ldi	r20, 0x7F	; 127
    1bec:	57 e4       	ldi	r21, 0x47	; 71
    1bee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bf2:	18 16       	cp	r1, r24
    1bf4:	4c f5       	brge	.+82     	; 0x1c48 <Stepper_Angle+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bf6:	6d a9       	ldd	r22, Y+53	; 0x35
    1bf8:	7e a9       	ldd	r23, Y+54	; 0x36
    1bfa:	8f a9       	ldd	r24, Y+55	; 0x37
    1bfc:	98 ad       	ldd	r25, Y+56	; 0x38
    1bfe:	20 e0       	ldi	r18, 0x00	; 0
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	40 e2       	ldi	r20, 0x20	; 32
    1c04:	51 e4       	ldi	r21, 0x41	; 65
    1c06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c0a:	dc 01       	movw	r26, r24
    1c0c:	cb 01       	movw	r24, r22
    1c0e:	bc 01       	movw	r22, r24
    1c10:	cd 01       	movw	r24, r26
    1c12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c16:	dc 01       	movw	r26, r24
    1c18:	cb 01       	movw	r24, r22
    1c1a:	98 ab       	std	Y+48, r25	; 0x30
    1c1c:	8f a7       	std	Y+47, r24	; 0x2f
    1c1e:	0f c0       	rjmp	.+30     	; 0x1c3e <Stepper_Angle+0xf2>
    1c20:	88 ec       	ldi	r24, 0xC8	; 200
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	9e a7       	std	Y+46, r25	; 0x2e
    1c26:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c28:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c2a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c2c:	01 97       	sbiw	r24, 0x01	; 1
    1c2e:	f1 f7       	brne	.-4      	; 0x1c2c <Stepper_Angle+0xe0>
    1c30:	9e a7       	std	Y+46, r25	; 0x2e
    1c32:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c34:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c36:	98 a9       	ldd	r25, Y+48	; 0x30
    1c38:	01 97       	sbiw	r24, 0x01	; 1
    1c3a:	98 ab       	std	Y+48, r25	; 0x30
    1c3c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c3e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c40:	98 a9       	ldd	r25, Y+48	; 0x30
    1c42:	00 97       	sbiw	r24, 0x00	; 0
    1c44:	69 f7       	brne	.-38     	; 0x1c20 <Stepper_Angle+0xd4>
    1c46:	14 c0       	rjmp	.+40     	; 0x1c70 <Stepper_Angle+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c48:	69 a9       	ldd	r22, Y+49	; 0x31
    1c4a:	7a a9       	ldd	r23, Y+50	; 0x32
    1c4c:	8b a9       	ldd	r24, Y+51	; 0x33
    1c4e:	9c a9       	ldd	r25, Y+52	; 0x34
    1c50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c54:	dc 01       	movw	r26, r24
    1c56:	cb 01       	movw	r24, r22
    1c58:	98 ab       	std	Y+48, r25	; 0x30
    1c5a:	8f a7       	std	Y+47, r24	; 0x2f
    1c5c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c5e:	98 a9       	ldd	r25, Y+48	; 0x30
    1c60:	9c a7       	std	Y+44, r25	; 0x2c
    1c62:	8b a7       	std	Y+43, r24	; 0x2b
    1c64:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c66:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c68:	01 97       	sbiw	r24, 0x01	; 1
    1c6a:	f1 f7       	brne	.-4      	; 0x1c68 <Stepper_Angle+0x11c>
    1c6c:	9c a7       	std	Y+44, r25	; 0x2c
    1c6e:	8b a7       	std	Y+43, r24	; 0x2b
    1c70:	80 e0       	ldi	r24, 0x00	; 0
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	aa e7       	ldi	r26, 0x7A	; 122
    1c76:	b4 e4       	ldi	r27, 0x44	; 68
    1c78:	8f a3       	std	Y+39, r24	; 0x27
    1c7a:	98 a7       	std	Y+40, r25	; 0x28
    1c7c:	a9 a7       	std	Y+41, r26	; 0x29
    1c7e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c80:	6f a1       	ldd	r22, Y+39	; 0x27
    1c82:	78 a5       	ldd	r23, Y+40	; 0x28
    1c84:	89 a5       	ldd	r24, Y+41	; 0x29
    1c86:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c88:	20 e0       	ldi	r18, 0x00	; 0
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	4a ef       	ldi	r20, 0xFA	; 250
    1c8e:	54 e4       	ldi	r21, 0x44	; 68
    1c90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c94:	dc 01       	movw	r26, r24
    1c96:	cb 01       	movw	r24, r22
    1c98:	8b a3       	std	Y+35, r24	; 0x23
    1c9a:	9c a3       	std	Y+36, r25	; 0x24
    1c9c:	ad a3       	std	Y+37, r26	; 0x25
    1c9e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ca0:	6b a1       	ldd	r22, Y+35	; 0x23
    1ca2:	7c a1       	ldd	r23, Y+36	; 0x24
    1ca4:	8d a1       	ldd	r24, Y+37	; 0x25
    1ca6:	9e a1       	ldd	r25, Y+38	; 0x26
    1ca8:	20 e0       	ldi	r18, 0x00	; 0
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	40 e8       	ldi	r20, 0x80	; 128
    1cae:	5f e3       	ldi	r21, 0x3F	; 63
    1cb0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cb4:	88 23       	and	r24, r24
    1cb6:	2c f4       	brge	.+10     	; 0x1cc2 <Stepper_Angle+0x176>
		__ticks = 1;
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	9a a3       	std	Y+34, r25	; 0x22
    1cbe:	89 a3       	std	Y+33, r24	; 0x21
    1cc0:	3f c0       	rjmp	.+126    	; 0x1d40 <Stepper_Angle+0x1f4>
	else if (__tmp > 65535)
    1cc2:	6b a1       	ldd	r22, Y+35	; 0x23
    1cc4:	7c a1       	ldd	r23, Y+36	; 0x24
    1cc6:	8d a1       	ldd	r24, Y+37	; 0x25
    1cc8:	9e a1       	ldd	r25, Y+38	; 0x26
    1cca:	20 e0       	ldi	r18, 0x00	; 0
    1ccc:	3f ef       	ldi	r19, 0xFF	; 255
    1cce:	4f e7       	ldi	r20, 0x7F	; 127
    1cd0:	57 e4       	ldi	r21, 0x47	; 71
    1cd2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cd6:	18 16       	cp	r1, r24
    1cd8:	4c f5       	brge	.+82     	; 0x1d2c <Stepper_Angle+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cda:	6f a1       	ldd	r22, Y+39	; 0x27
    1cdc:	78 a5       	ldd	r23, Y+40	; 0x28
    1cde:	89 a5       	ldd	r24, Y+41	; 0x29
    1ce0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ce2:	20 e0       	ldi	r18, 0x00	; 0
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	40 e2       	ldi	r20, 0x20	; 32
    1ce8:	51 e4       	ldi	r21, 0x41	; 65
    1cea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	bc 01       	movw	r22, r24
    1cf4:	cd 01       	movw	r24, r26
    1cf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	9a a3       	std	Y+34, r25	; 0x22
    1d00:	89 a3       	std	Y+33, r24	; 0x21
    1d02:	0f c0       	rjmp	.+30     	; 0x1d22 <Stepper_Angle+0x1d6>
    1d04:	88 ec       	ldi	r24, 0xC8	; 200
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	98 a3       	std	Y+32, r25	; 0x20
    1d0a:	8f 8f       	std	Y+31, r24	; 0x1f
    1d0c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d0e:	98 a1       	ldd	r25, Y+32	; 0x20
    1d10:	01 97       	sbiw	r24, 0x01	; 1
    1d12:	f1 f7       	brne	.-4      	; 0x1d10 <Stepper_Angle+0x1c4>
    1d14:	98 a3       	std	Y+32, r25	; 0x20
    1d16:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d18:	89 a1       	ldd	r24, Y+33	; 0x21
    1d1a:	9a a1       	ldd	r25, Y+34	; 0x22
    1d1c:	01 97       	sbiw	r24, 0x01	; 1
    1d1e:	9a a3       	std	Y+34, r25	; 0x22
    1d20:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d22:	89 a1       	ldd	r24, Y+33	; 0x21
    1d24:	9a a1       	ldd	r25, Y+34	; 0x22
    1d26:	00 97       	sbiw	r24, 0x00	; 0
    1d28:	69 f7       	brne	.-38     	; 0x1d04 <Stepper_Angle+0x1b8>
    1d2a:	14 c0       	rjmp	.+40     	; 0x1d54 <Stepper_Angle+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d2c:	6b a1       	ldd	r22, Y+35	; 0x23
    1d2e:	7c a1       	ldd	r23, Y+36	; 0x24
    1d30:	8d a1       	ldd	r24, Y+37	; 0x25
    1d32:	9e a1       	ldd	r25, Y+38	; 0x26
    1d34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d38:	dc 01       	movw	r26, r24
    1d3a:	cb 01       	movw	r24, r22
    1d3c:	9a a3       	std	Y+34, r25	; 0x22
    1d3e:	89 a3       	std	Y+33, r24	; 0x21
    1d40:	89 a1       	ldd	r24, Y+33	; 0x21
    1d42:	9a a1       	ldd	r25, Y+34	; 0x22
    1d44:	9e 8f       	std	Y+30, r25	; 0x1e
    1d46:	8d 8f       	std	Y+29, r24	; 0x1d
    1d48:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d4a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d4c:	01 97       	sbiw	r24, 0x01	; 1
    1d4e:	f1 f7       	brne	.-4      	; 0x1d4c <Stepper_Angle+0x200>
    1d50:	9e 8f       	std	Y+30, r25	; 0x1e
    1d52:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(3);
	_delay_ms(1000);

	/* Rotate Stepper Motor Anticlockwise with Full step sequence */
	for (int i = 0; i < 150; i++) {
    1d54:	1a ae       	std	Y+58, r1	; 0x3a
    1d56:	19 ae       	std	Y+57, r1	; 0x39
    1d58:	0a c0       	rjmp	.+20     	; 0x1d6e <Stepper_Angle+0x222>
		Stepper(1, 3);
    1d5a:	81 e0       	ldi	r24, 0x01	; 1
    1d5c:	63 e0       	ldi	r22, 0x03	; 3
    1d5e:	70 e0       	ldi	r23, 0x00	; 0
    1d60:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <Stepper>
	PORTA = 0x09; /* Last step to initial position */
	_delay_ms(3);
	_delay_ms(1000);

	/* Rotate Stepper Motor Anticlockwise with Full step sequence */
	for (int i = 0; i < 150; i++) {
    1d64:	89 ad       	ldd	r24, Y+57	; 0x39
    1d66:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d68:	01 96       	adiw	r24, 0x01	; 1
    1d6a:	9a af       	std	Y+58, r25	; 0x3a
    1d6c:	89 af       	std	Y+57, r24	; 0x39
    1d6e:	89 ad       	ldd	r24, Y+57	; 0x39
    1d70:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d72:	86 39       	cpi	r24, 0x96	; 150
    1d74:	91 05       	cpc	r25, r1
    1d76:	8c f3       	brlt	.-30     	; 0x1d5a <Stepper_Angle+0x20e>
		Stepper(1, 3);
	}
	PORTA = 0x09;
    1d78:	eb e3       	ldi	r30, 0x3B	; 59
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	89 e0       	ldi	r24, 0x09	; 9
    1d7e:	80 83       	st	Z, r24
    1d80:	80 e0       	ldi	r24, 0x00	; 0
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	a0 e4       	ldi	r26, 0x40	; 64
    1d86:	b0 e4       	ldi	r27, 0x40	; 64
    1d88:	89 8f       	std	Y+25, r24	; 0x19
    1d8a:	9a 8f       	std	Y+26, r25	; 0x1a
    1d8c:	ab 8f       	std	Y+27, r26	; 0x1b
    1d8e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d90:	69 8d       	ldd	r22, Y+25	; 0x19
    1d92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d98:	20 e0       	ldi	r18, 0x00	; 0
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	4a ef       	ldi	r20, 0xFA	; 250
    1d9e:	54 e4       	ldi	r21, 0x44	; 68
    1da0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da4:	dc 01       	movw	r26, r24
    1da6:	cb 01       	movw	r24, r22
    1da8:	8d 8b       	std	Y+21, r24	; 0x15
    1daa:	9e 8b       	std	Y+22, r25	; 0x16
    1dac:	af 8b       	std	Y+23, r26	; 0x17
    1dae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1db0:	6d 89       	ldd	r22, Y+21	; 0x15
    1db2:	7e 89       	ldd	r23, Y+22	; 0x16
    1db4:	8f 89       	ldd	r24, Y+23	; 0x17
    1db6:	98 8d       	ldd	r25, Y+24	; 0x18
    1db8:	20 e0       	ldi	r18, 0x00	; 0
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	40 e8       	ldi	r20, 0x80	; 128
    1dbe:	5f e3       	ldi	r21, 0x3F	; 63
    1dc0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dc4:	88 23       	and	r24, r24
    1dc6:	2c f4       	brge	.+10     	; 0x1dd2 <Stepper_Angle+0x286>
		__ticks = 1;
    1dc8:	81 e0       	ldi	r24, 0x01	; 1
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	9c 8b       	std	Y+20, r25	; 0x14
    1dce:	8b 8b       	std	Y+19, r24	; 0x13
    1dd0:	3f c0       	rjmp	.+126    	; 0x1e50 <Stepper_Angle+0x304>
	else if (__tmp > 65535)
    1dd2:	6d 89       	ldd	r22, Y+21	; 0x15
    1dd4:	7e 89       	ldd	r23, Y+22	; 0x16
    1dd6:	8f 89       	ldd	r24, Y+23	; 0x17
    1dd8:	98 8d       	ldd	r25, Y+24	; 0x18
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	3f ef       	ldi	r19, 0xFF	; 255
    1dde:	4f e7       	ldi	r20, 0x7F	; 127
    1de0:	57 e4       	ldi	r21, 0x47	; 71
    1de2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1de6:	18 16       	cp	r1, r24
    1de8:	4c f5       	brge	.+82     	; 0x1e3c <Stepper_Angle+0x2f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dea:	69 8d       	ldd	r22, Y+25	; 0x19
    1dec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1df0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	40 e2       	ldi	r20, 0x20	; 32
    1df8:	51 e4       	ldi	r21, 0x41	; 65
    1dfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dfe:	dc 01       	movw	r26, r24
    1e00:	cb 01       	movw	r24, r22
    1e02:	bc 01       	movw	r22, r24
    1e04:	cd 01       	movw	r24, r26
    1e06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	9c 8b       	std	Y+20, r25	; 0x14
    1e10:	8b 8b       	std	Y+19, r24	; 0x13
    1e12:	0f c0       	rjmp	.+30     	; 0x1e32 <Stepper_Angle+0x2e6>
    1e14:	88 ec       	ldi	r24, 0xC8	; 200
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	9a 8b       	std	Y+18, r25	; 0x12
    1e1a:	89 8b       	std	Y+17, r24	; 0x11
    1e1c:	89 89       	ldd	r24, Y+17	; 0x11
    1e1e:	9a 89       	ldd	r25, Y+18	; 0x12
    1e20:	01 97       	sbiw	r24, 0x01	; 1
    1e22:	f1 f7       	brne	.-4      	; 0x1e20 <Stepper_Angle+0x2d4>
    1e24:	9a 8b       	std	Y+18, r25	; 0x12
    1e26:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e28:	8b 89       	ldd	r24, Y+19	; 0x13
    1e2a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e2c:	01 97       	sbiw	r24, 0x01	; 1
    1e2e:	9c 8b       	std	Y+20, r25	; 0x14
    1e30:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e32:	8b 89       	ldd	r24, Y+19	; 0x13
    1e34:	9c 89       	ldd	r25, Y+20	; 0x14
    1e36:	00 97       	sbiw	r24, 0x00	; 0
    1e38:	69 f7       	brne	.-38     	; 0x1e14 <Stepper_Angle+0x2c8>
    1e3a:	14 c0       	rjmp	.+40     	; 0x1e64 <Stepper_Angle+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e3c:	6d 89       	ldd	r22, Y+21	; 0x15
    1e3e:	7e 89       	ldd	r23, Y+22	; 0x16
    1e40:	8f 89       	ldd	r24, Y+23	; 0x17
    1e42:	98 8d       	ldd	r25, Y+24	; 0x18
    1e44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e48:	dc 01       	movw	r26, r24
    1e4a:	cb 01       	movw	r24, r22
    1e4c:	9c 8b       	std	Y+20, r25	; 0x14
    1e4e:	8b 8b       	std	Y+19, r24	; 0x13
    1e50:	8b 89       	ldd	r24, Y+19	; 0x13
    1e52:	9c 89       	ldd	r25, Y+20	; 0x14
    1e54:	98 8b       	std	Y+16, r25	; 0x10
    1e56:	8f 87       	std	Y+15, r24	; 0x0f
    1e58:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e5a:	98 89       	ldd	r25, Y+16	; 0x10
    1e5c:	01 97       	sbiw	r24, 0x01	; 1
    1e5e:	f1 f7       	brne	.-4      	; 0x1e5c <Stepper_Angle+0x310>
    1e60:	98 8b       	std	Y+16, r25	; 0x10
    1e62:	8f 87       	std	Y+15, r24	; 0x0f
    1e64:	80 e0       	ldi	r24, 0x00	; 0
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	aa e7       	ldi	r26, 0x7A	; 122
    1e6a:	b4 e4       	ldi	r27, 0x44	; 68
    1e6c:	8b 87       	std	Y+11, r24	; 0x0b
    1e6e:	9c 87       	std	Y+12, r25	; 0x0c
    1e70:	ad 87       	std	Y+13, r26	; 0x0d
    1e72:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e74:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e76:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e78:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e7c:	20 e0       	ldi	r18, 0x00	; 0
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	4a ef       	ldi	r20, 0xFA	; 250
    1e82:	54 e4       	ldi	r21, 0x44	; 68
    1e84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e88:	dc 01       	movw	r26, r24
    1e8a:	cb 01       	movw	r24, r22
    1e8c:	8f 83       	std	Y+7, r24	; 0x07
    1e8e:	98 87       	std	Y+8, r25	; 0x08
    1e90:	a9 87       	std	Y+9, r26	; 0x09
    1e92:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e94:	6f 81       	ldd	r22, Y+7	; 0x07
    1e96:	78 85       	ldd	r23, Y+8	; 0x08
    1e98:	89 85       	ldd	r24, Y+9	; 0x09
    1e9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e9c:	20 e0       	ldi	r18, 0x00	; 0
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	40 e8       	ldi	r20, 0x80	; 128
    1ea2:	5f e3       	ldi	r21, 0x3F	; 63
    1ea4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ea8:	88 23       	and	r24, r24
    1eaa:	2c f4       	brge	.+10     	; 0x1eb6 <Stepper_Angle+0x36a>
		__ticks = 1;
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	9e 83       	std	Y+6, r25	; 0x06
    1eb2:	8d 83       	std	Y+5, r24	; 0x05
    1eb4:	3f c0       	rjmp	.+126    	; 0x1f34 <Stepper_Angle+0x3e8>
	else if (__tmp > 65535)
    1eb6:	6f 81       	ldd	r22, Y+7	; 0x07
    1eb8:	78 85       	ldd	r23, Y+8	; 0x08
    1eba:	89 85       	ldd	r24, Y+9	; 0x09
    1ebc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ebe:	20 e0       	ldi	r18, 0x00	; 0
    1ec0:	3f ef       	ldi	r19, 0xFF	; 255
    1ec2:	4f e7       	ldi	r20, 0x7F	; 127
    1ec4:	57 e4       	ldi	r21, 0x47	; 71
    1ec6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1eca:	18 16       	cp	r1, r24
    1ecc:	4c f5       	brge	.+82     	; 0x1f20 <Stepper_Angle+0x3d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ece:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ed0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ed2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ed4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	40 e2       	ldi	r20, 0x20	; 32
    1edc:	51 e4       	ldi	r21, 0x41	; 65
    1ede:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	bc 01       	movw	r22, r24
    1ee8:	cd 01       	movw	r24, r26
    1eea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eee:	dc 01       	movw	r26, r24
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	9e 83       	std	Y+6, r25	; 0x06
    1ef4:	8d 83       	std	Y+5, r24	; 0x05
    1ef6:	0f c0       	rjmp	.+30     	; 0x1f16 <Stepper_Angle+0x3ca>
    1ef8:	88 ec       	ldi	r24, 0xC8	; 200
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	9c 83       	std	Y+4, r25	; 0x04
    1efe:	8b 83       	std	Y+3, r24	; 0x03
    1f00:	8b 81       	ldd	r24, Y+3	; 0x03
    1f02:	9c 81       	ldd	r25, Y+4	; 0x04
    1f04:	01 97       	sbiw	r24, 0x01	; 1
    1f06:	f1 f7       	brne	.-4      	; 0x1f04 <Stepper_Angle+0x3b8>
    1f08:	9c 83       	std	Y+4, r25	; 0x04
    1f0a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f10:	01 97       	sbiw	r24, 0x01	; 1
    1f12:	9e 83       	std	Y+6, r25	; 0x06
    1f14:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f16:	8d 81       	ldd	r24, Y+5	; 0x05
    1f18:	9e 81       	ldd	r25, Y+6	; 0x06
    1f1a:	00 97       	sbiw	r24, 0x00	; 0
    1f1c:	69 f7       	brne	.-38     	; 0x1ef8 <Stepper_Angle+0x3ac>
    1f1e:	14 c0       	rjmp	.+40     	; 0x1f48 <Stepper_Angle+0x3fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f20:	6f 81       	ldd	r22, Y+7	; 0x07
    1f22:	78 85       	ldd	r23, Y+8	; 0x08
    1f24:	89 85       	ldd	r24, Y+9	; 0x09
    1f26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2c:	dc 01       	movw	r26, r24
    1f2e:	cb 01       	movw	r24, r22
    1f30:	9e 83       	std	Y+6, r25	; 0x06
    1f32:	8d 83       	std	Y+5, r24	; 0x05
    1f34:	8d 81       	ldd	r24, Y+5	; 0x05
    1f36:	9e 81       	ldd	r25, Y+6	; 0x06
    1f38:	9a 83       	std	Y+2, r25	; 0x02
    1f3a:	89 83       	std	Y+1, r24	; 0x01
    1f3c:	89 81       	ldd	r24, Y+1	; 0x01
    1f3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f40:	01 97       	sbiw	r24, 0x01	; 1
    1f42:	f1 f7       	brne	.-4      	; 0x1f40 <Stepper_Angle+0x3f4>
    1f44:	9a 83       	std	Y+2, r25	; 0x02
    1f46:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3);
	_delay_ms(1000);
}
    1f48:	ec 96       	adiw	r28, 0x3c	; 60
    1f4a:	0f b6       	in	r0, 0x3f	; 63
    1f4c:	f8 94       	cli
    1f4e:	de bf       	out	0x3e, r29	; 62
    1f50:	0f be       	out	0x3f, r0	; 63
    1f52:	cd bf       	out	0x3d, r28	; 61
    1f54:	cf 91       	pop	r28
    1f56:	df 91       	pop	r29
    1f58:	08 95       	ret

00001f5a <Stepper>:
void Stepper(unsigned char Direction, int period) {
    1f5a:	0f 93       	push	r16
    1f5c:	1f 93       	push	r17
    1f5e:	df 93       	push	r29
    1f60:	cf 93       	push	r28
    1f62:	cd b7       	in	r28, 0x3d	; 61
    1f64:	de b7       	in	r29, 0x3e	; 62
    1f66:	c5 5e       	subi	r28, 0xE5	; 229
    1f68:	d0 40       	sbci	r29, 0x00	; 0
    1f6a:	0f b6       	in	r0, 0x3f	; 63
    1f6c:	f8 94       	cli
    1f6e:	de bf       	out	0x3e, r29	; 62
    1f70:	0f be       	out	0x3f, r0	; 63
    1f72:	cd bf       	out	0x3d, r28	; 61
    1f74:	fe 01       	movw	r30, r28
    1f76:	ef 51       	subi	r30, 0x1F	; 31
    1f78:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7a:	80 83       	st	Z, r24
    1f7c:	fe 01       	movw	r30, r28
    1f7e:	ee 51       	subi	r30, 0x1E	; 30
    1f80:	ff 4f       	sbci	r31, 0xFF	; 255
    1f82:	71 83       	std	Z+1, r23	; 0x01
    1f84:	60 83       	st	Z, r22
	switch (Direction) {
    1f86:	fe 01       	movw	r30, r28
    1f88:	ef 51       	subi	r30, 0x1F	; 31
    1f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8c:	80 81       	ld	r24, Z
    1f8e:	28 2f       	mov	r18, r24
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	cc 51       	subi	r28, 0x1C	; 28
    1f94:	df 4f       	sbci	r29, 0xFF	; 255
    1f96:	39 83       	std	Y+1, r19	; 0x01
    1f98:	28 83       	st	Y, r18
    1f9a:	c4 5e       	subi	r28, 0xE4	; 228
    1f9c:	d0 40       	sbci	r29, 0x00	; 0
    1f9e:	cc 51       	subi	r28, 0x1C	; 28
    1fa0:	df 4f       	sbci	r29, 0xFF	; 255
    1fa2:	88 81       	ld	r24, Y
    1fa4:	99 81       	ldd	r25, Y+1	; 0x01
    1fa6:	c4 5e       	subi	r28, 0xE4	; 228
    1fa8:	d0 40       	sbci	r29, 0x00	; 0
    1faa:	00 97       	sbiw	r24, 0x00	; 0
    1fac:	61 f0       	breq	.+24     	; 0x1fc6 <Stepper+0x6c>
    1fae:	cc 51       	subi	r28, 0x1C	; 28
    1fb0:	df 4f       	sbci	r29, 0xFF	; 255
    1fb2:	e8 81       	ld	r30, Y
    1fb4:	f9 81       	ldd	r31, Y+1	; 0x01
    1fb6:	c4 5e       	subi	r28, 0xE4	; 228
    1fb8:	d0 40       	sbci	r29, 0x00	; 0
    1fba:	e1 30       	cpi	r30, 0x01	; 1
    1fbc:	f1 05       	cpc	r31, r1
    1fbe:	09 f4       	brne	.+2      	; 0x1fc2 <Stepper+0x68>
    1fc0:	14 c6       	rjmp	.+3112   	; 0x2bea <Stepper+0xc90>
    1fc2:	0c 94 d3 1a 	jmp	0x35a6	; 0x35a6 <Stepper+0x164c>
	case 0:
		PORTA = 0x09;
    1fc6:	eb e3       	ldi	r30, 0x3B	; 59
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	89 e0       	ldi	r24, 0x09	; 9
    1fcc:	80 83       	st	Z, r24
		_delay_ms(period);
    1fce:	fe 01       	movw	r30, r28
    1fd0:	ee 51       	subi	r30, 0x1E	; 30
    1fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd4:	80 81       	ld	r24, Z
    1fd6:	91 81       	ldd	r25, Z+1	; 0x01
    1fd8:	aa 27       	eor	r26, r26
    1fda:	97 fd       	sbrc	r25, 7
    1fdc:	a0 95       	com	r26
    1fde:	ba 2f       	mov	r27, r26
    1fe0:	bc 01       	movw	r22, r24
    1fe2:	cd 01       	movw	r24, r26
    1fe4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1fe8:	dc 01       	movw	r26, r24
    1fea:	cb 01       	movw	r24, r22
    1fec:	fe 01       	movw	r30, r28
    1fee:	e3 52       	subi	r30, 0x23	; 35
    1ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff2:	80 83       	st	Z, r24
    1ff4:	91 83       	std	Z+1, r25	; 0x01
    1ff6:	a2 83       	std	Z+2, r26	; 0x02
    1ff8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ffa:	8e 01       	movw	r16, r28
    1ffc:	07 52       	subi	r16, 0x27	; 39
    1ffe:	1f 4f       	sbci	r17, 0xFF	; 255
    2000:	fe 01       	movw	r30, r28
    2002:	e3 52       	subi	r30, 0x23	; 35
    2004:	ff 4f       	sbci	r31, 0xFF	; 255
    2006:	60 81       	ld	r22, Z
    2008:	71 81       	ldd	r23, Z+1	; 0x01
    200a:	82 81       	ldd	r24, Z+2	; 0x02
    200c:	93 81       	ldd	r25, Z+3	; 0x03
    200e:	20 e0       	ldi	r18, 0x00	; 0
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	4a ef       	ldi	r20, 0xFA	; 250
    2014:	54 e4       	ldi	r21, 0x44	; 68
    2016:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    201a:	dc 01       	movw	r26, r24
    201c:	cb 01       	movw	r24, r22
    201e:	f8 01       	movw	r30, r16
    2020:	80 83       	st	Z, r24
    2022:	91 83       	std	Z+1, r25	; 0x01
    2024:	a2 83       	std	Z+2, r26	; 0x02
    2026:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2028:	fe 01       	movw	r30, r28
    202a:	e7 52       	subi	r30, 0x27	; 39
    202c:	ff 4f       	sbci	r31, 0xFF	; 255
    202e:	60 81       	ld	r22, Z
    2030:	71 81       	ldd	r23, Z+1	; 0x01
    2032:	82 81       	ldd	r24, Z+2	; 0x02
    2034:	93 81       	ldd	r25, Z+3	; 0x03
    2036:	20 e0       	ldi	r18, 0x00	; 0
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	40 e8       	ldi	r20, 0x80	; 128
    203c:	5f e3       	ldi	r21, 0x3F	; 63
    203e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2042:	88 23       	and	r24, r24
    2044:	44 f4       	brge	.+16     	; 0x2056 <Stepper+0xfc>
		__ticks = 1;
    2046:	fe 01       	movw	r30, r28
    2048:	e9 52       	subi	r30, 0x29	; 41
    204a:	ff 4f       	sbci	r31, 0xFF	; 255
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	91 83       	std	Z+1, r25	; 0x01
    2052:	80 83       	st	Z, r24
    2054:	64 c0       	rjmp	.+200    	; 0x211e <Stepper+0x1c4>
	else if (__tmp > 65535)
    2056:	fe 01       	movw	r30, r28
    2058:	e7 52       	subi	r30, 0x27	; 39
    205a:	ff 4f       	sbci	r31, 0xFF	; 255
    205c:	60 81       	ld	r22, Z
    205e:	71 81       	ldd	r23, Z+1	; 0x01
    2060:	82 81       	ldd	r24, Z+2	; 0x02
    2062:	93 81       	ldd	r25, Z+3	; 0x03
    2064:	20 e0       	ldi	r18, 0x00	; 0
    2066:	3f ef       	ldi	r19, 0xFF	; 255
    2068:	4f e7       	ldi	r20, 0x7F	; 127
    206a:	57 e4       	ldi	r21, 0x47	; 71
    206c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2070:	18 16       	cp	r1, r24
    2072:	0c f0       	brlt	.+2      	; 0x2076 <Stepper+0x11c>
    2074:	43 c0       	rjmp	.+134    	; 0x20fc <Stepper+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2076:	fe 01       	movw	r30, r28
    2078:	e3 52       	subi	r30, 0x23	; 35
    207a:	ff 4f       	sbci	r31, 0xFF	; 255
    207c:	60 81       	ld	r22, Z
    207e:	71 81       	ldd	r23, Z+1	; 0x01
    2080:	82 81       	ldd	r24, Z+2	; 0x02
    2082:	93 81       	ldd	r25, Z+3	; 0x03
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	40 e2       	ldi	r20, 0x20	; 32
    208a:	51 e4       	ldi	r21, 0x41	; 65
    208c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	8e 01       	movw	r16, r28
    2096:	09 52       	subi	r16, 0x29	; 41
    2098:	1f 4f       	sbci	r17, 0xFF	; 255
    209a:	bc 01       	movw	r22, r24
    209c:	cd 01       	movw	r24, r26
    209e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	f8 01       	movw	r30, r16
    20a8:	91 83       	std	Z+1, r25	; 0x01
    20aa:	80 83       	st	Z, r24
    20ac:	1f c0       	rjmp	.+62     	; 0x20ec <Stepper+0x192>
    20ae:	fe 01       	movw	r30, r28
    20b0:	eb 52       	subi	r30, 0x2B	; 43
    20b2:	ff 4f       	sbci	r31, 0xFF	; 255
    20b4:	88 ec       	ldi	r24, 0xC8	; 200
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	91 83       	std	Z+1, r25	; 0x01
    20ba:	80 83       	st	Z, r24
    20bc:	fe 01       	movw	r30, r28
    20be:	eb 52       	subi	r30, 0x2B	; 43
    20c0:	ff 4f       	sbci	r31, 0xFF	; 255
    20c2:	80 81       	ld	r24, Z
    20c4:	91 81       	ldd	r25, Z+1	; 0x01
    20c6:	01 97       	sbiw	r24, 0x01	; 1
    20c8:	f1 f7       	brne	.-4      	; 0x20c6 <Stepper+0x16c>
    20ca:	fe 01       	movw	r30, r28
    20cc:	eb 52       	subi	r30, 0x2B	; 43
    20ce:	ff 4f       	sbci	r31, 0xFF	; 255
    20d0:	91 83       	std	Z+1, r25	; 0x01
    20d2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20d4:	de 01       	movw	r26, r28
    20d6:	a9 52       	subi	r26, 0x29	; 41
    20d8:	bf 4f       	sbci	r27, 0xFF	; 255
    20da:	fe 01       	movw	r30, r28
    20dc:	e9 52       	subi	r30, 0x29	; 41
    20de:	ff 4f       	sbci	r31, 0xFF	; 255
    20e0:	80 81       	ld	r24, Z
    20e2:	91 81       	ldd	r25, Z+1	; 0x01
    20e4:	01 97       	sbiw	r24, 0x01	; 1
    20e6:	11 96       	adiw	r26, 0x01	; 1
    20e8:	9c 93       	st	X, r25
    20ea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ec:	fe 01       	movw	r30, r28
    20ee:	e9 52       	subi	r30, 0x29	; 41
    20f0:	ff 4f       	sbci	r31, 0xFF	; 255
    20f2:	80 81       	ld	r24, Z
    20f4:	91 81       	ldd	r25, Z+1	; 0x01
    20f6:	00 97       	sbiw	r24, 0x00	; 0
    20f8:	d1 f6       	brne	.-76     	; 0x20ae <Stepper+0x154>
    20fa:	27 c0       	rjmp	.+78     	; 0x214a <Stepper+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20fc:	8e 01       	movw	r16, r28
    20fe:	09 52       	subi	r16, 0x29	; 41
    2100:	1f 4f       	sbci	r17, 0xFF	; 255
    2102:	fe 01       	movw	r30, r28
    2104:	e7 52       	subi	r30, 0x27	; 39
    2106:	ff 4f       	sbci	r31, 0xFF	; 255
    2108:	60 81       	ld	r22, Z
    210a:	71 81       	ldd	r23, Z+1	; 0x01
    210c:	82 81       	ldd	r24, Z+2	; 0x02
    210e:	93 81       	ldd	r25, Z+3	; 0x03
    2110:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2114:	dc 01       	movw	r26, r24
    2116:	cb 01       	movw	r24, r22
    2118:	f8 01       	movw	r30, r16
    211a:	91 83       	std	Z+1, r25	; 0x01
    211c:	80 83       	st	Z, r24
    211e:	de 01       	movw	r26, r28
    2120:	ad 52       	subi	r26, 0x2D	; 45
    2122:	bf 4f       	sbci	r27, 0xFF	; 255
    2124:	fe 01       	movw	r30, r28
    2126:	e9 52       	subi	r30, 0x29	; 41
    2128:	ff 4f       	sbci	r31, 0xFF	; 255
    212a:	80 81       	ld	r24, Z
    212c:	91 81       	ldd	r25, Z+1	; 0x01
    212e:	8d 93       	st	X+, r24
    2130:	9c 93       	st	X, r25
    2132:	fe 01       	movw	r30, r28
    2134:	ed 52       	subi	r30, 0x2D	; 45
    2136:	ff 4f       	sbci	r31, 0xFF	; 255
    2138:	80 81       	ld	r24, Z
    213a:	91 81       	ldd	r25, Z+1	; 0x01
    213c:	01 97       	sbiw	r24, 0x01	; 1
    213e:	f1 f7       	brne	.-4      	; 0x213c <Stepper+0x1e2>
    2140:	fe 01       	movw	r30, r28
    2142:	ed 52       	subi	r30, 0x2D	; 45
    2144:	ff 4f       	sbci	r31, 0xFF	; 255
    2146:	91 83       	std	Z+1, r25	; 0x01
    2148:	80 83       	st	Z, r24
		PORTA = 0x08;
    214a:	eb e3       	ldi	r30, 0x3B	; 59
    214c:	f0 e0       	ldi	r31, 0x00	; 0
    214e:	88 e0       	ldi	r24, 0x08	; 8
    2150:	80 83       	st	Z, r24
		_delay_ms(period);
    2152:	fe 01       	movw	r30, r28
    2154:	ee 51       	subi	r30, 0x1E	; 30
    2156:	ff 4f       	sbci	r31, 0xFF	; 255
    2158:	80 81       	ld	r24, Z
    215a:	91 81       	ldd	r25, Z+1	; 0x01
    215c:	aa 27       	eor	r26, r26
    215e:	97 fd       	sbrc	r25, 7
    2160:	a0 95       	com	r26
    2162:	ba 2f       	mov	r27, r26
    2164:	bc 01       	movw	r22, r24
    2166:	cd 01       	movw	r24, r26
    2168:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	fe 01       	movw	r30, r28
    2172:	e1 53       	subi	r30, 0x31	; 49
    2174:	ff 4f       	sbci	r31, 0xFF	; 255
    2176:	80 83       	st	Z, r24
    2178:	91 83       	std	Z+1, r25	; 0x01
    217a:	a2 83       	std	Z+2, r26	; 0x02
    217c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    217e:	8e 01       	movw	r16, r28
    2180:	05 53       	subi	r16, 0x35	; 53
    2182:	1f 4f       	sbci	r17, 0xFF	; 255
    2184:	fe 01       	movw	r30, r28
    2186:	e1 53       	subi	r30, 0x31	; 49
    2188:	ff 4f       	sbci	r31, 0xFF	; 255
    218a:	60 81       	ld	r22, Z
    218c:	71 81       	ldd	r23, Z+1	; 0x01
    218e:	82 81       	ldd	r24, Z+2	; 0x02
    2190:	93 81       	ldd	r25, Z+3	; 0x03
    2192:	20 e0       	ldi	r18, 0x00	; 0
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	4a ef       	ldi	r20, 0xFA	; 250
    2198:	54 e4       	ldi	r21, 0x44	; 68
    219a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    219e:	dc 01       	movw	r26, r24
    21a0:	cb 01       	movw	r24, r22
    21a2:	f8 01       	movw	r30, r16
    21a4:	80 83       	st	Z, r24
    21a6:	91 83       	std	Z+1, r25	; 0x01
    21a8:	a2 83       	std	Z+2, r26	; 0x02
    21aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21ac:	fe 01       	movw	r30, r28
    21ae:	e5 53       	subi	r30, 0x35	; 53
    21b0:	ff 4f       	sbci	r31, 0xFF	; 255
    21b2:	60 81       	ld	r22, Z
    21b4:	71 81       	ldd	r23, Z+1	; 0x01
    21b6:	82 81       	ldd	r24, Z+2	; 0x02
    21b8:	93 81       	ldd	r25, Z+3	; 0x03
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	40 e8       	ldi	r20, 0x80	; 128
    21c0:	5f e3       	ldi	r21, 0x3F	; 63
    21c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21c6:	88 23       	and	r24, r24
    21c8:	44 f4       	brge	.+16     	; 0x21da <Stepper+0x280>
		__ticks = 1;
    21ca:	fe 01       	movw	r30, r28
    21cc:	e7 53       	subi	r30, 0x37	; 55
    21ce:	ff 4f       	sbci	r31, 0xFF	; 255
    21d0:	81 e0       	ldi	r24, 0x01	; 1
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	91 83       	std	Z+1, r25	; 0x01
    21d6:	80 83       	st	Z, r24
    21d8:	64 c0       	rjmp	.+200    	; 0x22a2 <Stepper+0x348>
	else if (__tmp > 65535)
    21da:	fe 01       	movw	r30, r28
    21dc:	e5 53       	subi	r30, 0x35	; 53
    21de:	ff 4f       	sbci	r31, 0xFF	; 255
    21e0:	60 81       	ld	r22, Z
    21e2:	71 81       	ldd	r23, Z+1	; 0x01
    21e4:	82 81       	ldd	r24, Z+2	; 0x02
    21e6:	93 81       	ldd	r25, Z+3	; 0x03
    21e8:	20 e0       	ldi	r18, 0x00	; 0
    21ea:	3f ef       	ldi	r19, 0xFF	; 255
    21ec:	4f e7       	ldi	r20, 0x7F	; 127
    21ee:	57 e4       	ldi	r21, 0x47	; 71
    21f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21f4:	18 16       	cp	r1, r24
    21f6:	0c f0       	brlt	.+2      	; 0x21fa <Stepper+0x2a0>
    21f8:	43 c0       	rjmp	.+134    	; 0x2280 <Stepper+0x326>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21fa:	fe 01       	movw	r30, r28
    21fc:	e1 53       	subi	r30, 0x31	; 49
    21fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2200:	60 81       	ld	r22, Z
    2202:	71 81       	ldd	r23, Z+1	; 0x01
    2204:	82 81       	ldd	r24, Z+2	; 0x02
    2206:	93 81       	ldd	r25, Z+3	; 0x03
    2208:	20 e0       	ldi	r18, 0x00	; 0
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	40 e2       	ldi	r20, 0x20	; 32
    220e:	51 e4       	ldi	r21, 0x41	; 65
    2210:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2214:	dc 01       	movw	r26, r24
    2216:	cb 01       	movw	r24, r22
    2218:	8e 01       	movw	r16, r28
    221a:	07 53       	subi	r16, 0x37	; 55
    221c:	1f 4f       	sbci	r17, 0xFF	; 255
    221e:	bc 01       	movw	r22, r24
    2220:	cd 01       	movw	r24, r26
    2222:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2226:	dc 01       	movw	r26, r24
    2228:	cb 01       	movw	r24, r22
    222a:	f8 01       	movw	r30, r16
    222c:	91 83       	std	Z+1, r25	; 0x01
    222e:	80 83       	st	Z, r24
    2230:	1f c0       	rjmp	.+62     	; 0x2270 <Stepper+0x316>
    2232:	fe 01       	movw	r30, r28
    2234:	e9 53       	subi	r30, 0x39	; 57
    2236:	ff 4f       	sbci	r31, 0xFF	; 255
    2238:	88 ec       	ldi	r24, 0xC8	; 200
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	91 83       	std	Z+1, r25	; 0x01
    223e:	80 83       	st	Z, r24
    2240:	fe 01       	movw	r30, r28
    2242:	e9 53       	subi	r30, 0x39	; 57
    2244:	ff 4f       	sbci	r31, 0xFF	; 255
    2246:	80 81       	ld	r24, Z
    2248:	91 81       	ldd	r25, Z+1	; 0x01
    224a:	01 97       	sbiw	r24, 0x01	; 1
    224c:	f1 f7       	brne	.-4      	; 0x224a <Stepper+0x2f0>
    224e:	fe 01       	movw	r30, r28
    2250:	e9 53       	subi	r30, 0x39	; 57
    2252:	ff 4f       	sbci	r31, 0xFF	; 255
    2254:	91 83       	std	Z+1, r25	; 0x01
    2256:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2258:	de 01       	movw	r26, r28
    225a:	a7 53       	subi	r26, 0x37	; 55
    225c:	bf 4f       	sbci	r27, 0xFF	; 255
    225e:	fe 01       	movw	r30, r28
    2260:	e7 53       	subi	r30, 0x37	; 55
    2262:	ff 4f       	sbci	r31, 0xFF	; 255
    2264:	80 81       	ld	r24, Z
    2266:	91 81       	ldd	r25, Z+1	; 0x01
    2268:	01 97       	sbiw	r24, 0x01	; 1
    226a:	11 96       	adiw	r26, 0x01	; 1
    226c:	9c 93       	st	X, r25
    226e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2270:	fe 01       	movw	r30, r28
    2272:	e7 53       	subi	r30, 0x37	; 55
    2274:	ff 4f       	sbci	r31, 0xFF	; 255
    2276:	80 81       	ld	r24, Z
    2278:	91 81       	ldd	r25, Z+1	; 0x01
    227a:	00 97       	sbiw	r24, 0x00	; 0
    227c:	d1 f6       	brne	.-76     	; 0x2232 <Stepper+0x2d8>
    227e:	27 c0       	rjmp	.+78     	; 0x22ce <Stepper+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2280:	8e 01       	movw	r16, r28
    2282:	07 53       	subi	r16, 0x37	; 55
    2284:	1f 4f       	sbci	r17, 0xFF	; 255
    2286:	fe 01       	movw	r30, r28
    2288:	e5 53       	subi	r30, 0x35	; 53
    228a:	ff 4f       	sbci	r31, 0xFF	; 255
    228c:	60 81       	ld	r22, Z
    228e:	71 81       	ldd	r23, Z+1	; 0x01
    2290:	82 81       	ldd	r24, Z+2	; 0x02
    2292:	93 81       	ldd	r25, Z+3	; 0x03
    2294:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2298:	dc 01       	movw	r26, r24
    229a:	cb 01       	movw	r24, r22
    229c:	f8 01       	movw	r30, r16
    229e:	91 83       	std	Z+1, r25	; 0x01
    22a0:	80 83       	st	Z, r24
    22a2:	de 01       	movw	r26, r28
    22a4:	ab 53       	subi	r26, 0x3B	; 59
    22a6:	bf 4f       	sbci	r27, 0xFF	; 255
    22a8:	fe 01       	movw	r30, r28
    22aa:	e7 53       	subi	r30, 0x37	; 55
    22ac:	ff 4f       	sbci	r31, 0xFF	; 255
    22ae:	80 81       	ld	r24, Z
    22b0:	91 81       	ldd	r25, Z+1	; 0x01
    22b2:	8d 93       	st	X+, r24
    22b4:	9c 93       	st	X, r25
    22b6:	fe 01       	movw	r30, r28
    22b8:	eb 53       	subi	r30, 0x3B	; 59
    22ba:	ff 4f       	sbci	r31, 0xFF	; 255
    22bc:	80 81       	ld	r24, Z
    22be:	91 81       	ldd	r25, Z+1	; 0x01
    22c0:	01 97       	sbiw	r24, 0x01	; 1
    22c2:	f1 f7       	brne	.-4      	; 0x22c0 <Stepper+0x366>
    22c4:	fe 01       	movw	r30, r28
    22c6:	eb 53       	subi	r30, 0x3B	; 59
    22c8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ca:	91 83       	std	Z+1, r25	; 0x01
    22cc:	80 83       	st	Z, r24
		PORTA = 0x0C;
    22ce:	eb e3       	ldi	r30, 0x3B	; 59
    22d0:	f0 e0       	ldi	r31, 0x00	; 0
    22d2:	8c e0       	ldi	r24, 0x0C	; 12
    22d4:	80 83       	st	Z, r24
		_delay_ms(period);
    22d6:	fe 01       	movw	r30, r28
    22d8:	ee 51       	subi	r30, 0x1E	; 30
    22da:	ff 4f       	sbci	r31, 0xFF	; 255
    22dc:	80 81       	ld	r24, Z
    22de:	91 81       	ldd	r25, Z+1	; 0x01
    22e0:	aa 27       	eor	r26, r26
    22e2:	97 fd       	sbrc	r25, 7
    22e4:	a0 95       	com	r26
    22e6:	ba 2f       	mov	r27, r26
    22e8:	bc 01       	movw	r22, r24
    22ea:	cd 01       	movw	r24, r26
    22ec:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    22f0:	dc 01       	movw	r26, r24
    22f2:	cb 01       	movw	r24, r22
    22f4:	fe 01       	movw	r30, r28
    22f6:	ef 53       	subi	r30, 0x3F	; 63
    22f8:	ff 4f       	sbci	r31, 0xFF	; 255
    22fa:	80 83       	st	Z, r24
    22fc:	91 83       	std	Z+1, r25	; 0x01
    22fe:	a2 83       	std	Z+2, r26	; 0x02
    2300:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2302:	8e 01       	movw	r16, r28
    2304:	03 54       	subi	r16, 0x43	; 67
    2306:	1f 4f       	sbci	r17, 0xFF	; 255
    2308:	fe 01       	movw	r30, r28
    230a:	ef 53       	subi	r30, 0x3F	; 63
    230c:	ff 4f       	sbci	r31, 0xFF	; 255
    230e:	60 81       	ld	r22, Z
    2310:	71 81       	ldd	r23, Z+1	; 0x01
    2312:	82 81       	ldd	r24, Z+2	; 0x02
    2314:	93 81       	ldd	r25, Z+3	; 0x03
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	4a ef       	ldi	r20, 0xFA	; 250
    231c:	54 e4       	ldi	r21, 0x44	; 68
    231e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2322:	dc 01       	movw	r26, r24
    2324:	cb 01       	movw	r24, r22
    2326:	f8 01       	movw	r30, r16
    2328:	80 83       	st	Z, r24
    232a:	91 83       	std	Z+1, r25	; 0x01
    232c:	a2 83       	std	Z+2, r26	; 0x02
    232e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2330:	fe 01       	movw	r30, r28
    2332:	e3 54       	subi	r30, 0x43	; 67
    2334:	ff 4f       	sbci	r31, 0xFF	; 255
    2336:	60 81       	ld	r22, Z
    2338:	71 81       	ldd	r23, Z+1	; 0x01
    233a:	82 81       	ldd	r24, Z+2	; 0x02
    233c:	93 81       	ldd	r25, Z+3	; 0x03
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	40 e8       	ldi	r20, 0x80	; 128
    2344:	5f e3       	ldi	r21, 0x3F	; 63
    2346:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    234a:	88 23       	and	r24, r24
    234c:	44 f4       	brge	.+16     	; 0x235e <Stepper+0x404>
		__ticks = 1;
    234e:	fe 01       	movw	r30, r28
    2350:	e5 54       	subi	r30, 0x45	; 69
    2352:	ff 4f       	sbci	r31, 0xFF	; 255
    2354:	81 e0       	ldi	r24, 0x01	; 1
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	91 83       	std	Z+1, r25	; 0x01
    235a:	80 83       	st	Z, r24
    235c:	64 c0       	rjmp	.+200    	; 0x2426 <Stepper+0x4cc>
	else if (__tmp > 65535)
    235e:	fe 01       	movw	r30, r28
    2360:	e3 54       	subi	r30, 0x43	; 67
    2362:	ff 4f       	sbci	r31, 0xFF	; 255
    2364:	60 81       	ld	r22, Z
    2366:	71 81       	ldd	r23, Z+1	; 0x01
    2368:	82 81       	ldd	r24, Z+2	; 0x02
    236a:	93 81       	ldd	r25, Z+3	; 0x03
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	3f ef       	ldi	r19, 0xFF	; 255
    2370:	4f e7       	ldi	r20, 0x7F	; 127
    2372:	57 e4       	ldi	r21, 0x47	; 71
    2374:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2378:	18 16       	cp	r1, r24
    237a:	0c f0       	brlt	.+2      	; 0x237e <Stepper+0x424>
    237c:	43 c0       	rjmp	.+134    	; 0x2404 <Stepper+0x4aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    237e:	fe 01       	movw	r30, r28
    2380:	ef 53       	subi	r30, 0x3F	; 63
    2382:	ff 4f       	sbci	r31, 0xFF	; 255
    2384:	60 81       	ld	r22, Z
    2386:	71 81       	ldd	r23, Z+1	; 0x01
    2388:	82 81       	ldd	r24, Z+2	; 0x02
    238a:	93 81       	ldd	r25, Z+3	; 0x03
    238c:	20 e0       	ldi	r18, 0x00	; 0
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	40 e2       	ldi	r20, 0x20	; 32
    2392:	51 e4       	ldi	r21, 0x41	; 65
    2394:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2398:	dc 01       	movw	r26, r24
    239a:	cb 01       	movw	r24, r22
    239c:	8e 01       	movw	r16, r28
    239e:	05 54       	subi	r16, 0x45	; 69
    23a0:	1f 4f       	sbci	r17, 0xFF	; 255
    23a2:	bc 01       	movw	r22, r24
    23a4:	cd 01       	movw	r24, r26
    23a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23aa:	dc 01       	movw	r26, r24
    23ac:	cb 01       	movw	r24, r22
    23ae:	f8 01       	movw	r30, r16
    23b0:	91 83       	std	Z+1, r25	; 0x01
    23b2:	80 83       	st	Z, r24
    23b4:	1f c0       	rjmp	.+62     	; 0x23f4 <Stepper+0x49a>
    23b6:	fe 01       	movw	r30, r28
    23b8:	e7 54       	subi	r30, 0x47	; 71
    23ba:	ff 4f       	sbci	r31, 0xFF	; 255
    23bc:	88 ec       	ldi	r24, 0xC8	; 200
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	91 83       	std	Z+1, r25	; 0x01
    23c2:	80 83       	st	Z, r24
    23c4:	fe 01       	movw	r30, r28
    23c6:	e7 54       	subi	r30, 0x47	; 71
    23c8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ca:	80 81       	ld	r24, Z
    23cc:	91 81       	ldd	r25, Z+1	; 0x01
    23ce:	01 97       	sbiw	r24, 0x01	; 1
    23d0:	f1 f7       	brne	.-4      	; 0x23ce <Stepper+0x474>
    23d2:	fe 01       	movw	r30, r28
    23d4:	e7 54       	subi	r30, 0x47	; 71
    23d6:	ff 4f       	sbci	r31, 0xFF	; 255
    23d8:	91 83       	std	Z+1, r25	; 0x01
    23da:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23dc:	de 01       	movw	r26, r28
    23de:	a5 54       	subi	r26, 0x45	; 69
    23e0:	bf 4f       	sbci	r27, 0xFF	; 255
    23e2:	fe 01       	movw	r30, r28
    23e4:	e5 54       	subi	r30, 0x45	; 69
    23e6:	ff 4f       	sbci	r31, 0xFF	; 255
    23e8:	80 81       	ld	r24, Z
    23ea:	91 81       	ldd	r25, Z+1	; 0x01
    23ec:	01 97       	sbiw	r24, 0x01	; 1
    23ee:	11 96       	adiw	r26, 0x01	; 1
    23f0:	9c 93       	st	X, r25
    23f2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23f4:	fe 01       	movw	r30, r28
    23f6:	e5 54       	subi	r30, 0x45	; 69
    23f8:	ff 4f       	sbci	r31, 0xFF	; 255
    23fa:	80 81       	ld	r24, Z
    23fc:	91 81       	ldd	r25, Z+1	; 0x01
    23fe:	00 97       	sbiw	r24, 0x00	; 0
    2400:	d1 f6       	brne	.-76     	; 0x23b6 <Stepper+0x45c>
    2402:	27 c0       	rjmp	.+78     	; 0x2452 <Stepper+0x4f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2404:	8e 01       	movw	r16, r28
    2406:	05 54       	subi	r16, 0x45	; 69
    2408:	1f 4f       	sbci	r17, 0xFF	; 255
    240a:	fe 01       	movw	r30, r28
    240c:	e3 54       	subi	r30, 0x43	; 67
    240e:	ff 4f       	sbci	r31, 0xFF	; 255
    2410:	60 81       	ld	r22, Z
    2412:	71 81       	ldd	r23, Z+1	; 0x01
    2414:	82 81       	ldd	r24, Z+2	; 0x02
    2416:	93 81       	ldd	r25, Z+3	; 0x03
    2418:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    241c:	dc 01       	movw	r26, r24
    241e:	cb 01       	movw	r24, r22
    2420:	f8 01       	movw	r30, r16
    2422:	91 83       	std	Z+1, r25	; 0x01
    2424:	80 83       	st	Z, r24
    2426:	de 01       	movw	r26, r28
    2428:	a9 54       	subi	r26, 0x49	; 73
    242a:	bf 4f       	sbci	r27, 0xFF	; 255
    242c:	fe 01       	movw	r30, r28
    242e:	e5 54       	subi	r30, 0x45	; 69
    2430:	ff 4f       	sbci	r31, 0xFF	; 255
    2432:	80 81       	ld	r24, Z
    2434:	91 81       	ldd	r25, Z+1	; 0x01
    2436:	8d 93       	st	X+, r24
    2438:	9c 93       	st	X, r25
    243a:	fe 01       	movw	r30, r28
    243c:	e9 54       	subi	r30, 0x49	; 73
    243e:	ff 4f       	sbci	r31, 0xFF	; 255
    2440:	80 81       	ld	r24, Z
    2442:	91 81       	ldd	r25, Z+1	; 0x01
    2444:	01 97       	sbiw	r24, 0x01	; 1
    2446:	f1 f7       	brne	.-4      	; 0x2444 <Stepper+0x4ea>
    2448:	fe 01       	movw	r30, r28
    244a:	e9 54       	subi	r30, 0x49	; 73
    244c:	ff 4f       	sbci	r31, 0xFF	; 255
    244e:	91 83       	std	Z+1, r25	; 0x01
    2450:	80 83       	st	Z, r24
		PORTA = 0x04;
    2452:	eb e3       	ldi	r30, 0x3B	; 59
    2454:	f0 e0       	ldi	r31, 0x00	; 0
    2456:	84 e0       	ldi	r24, 0x04	; 4
    2458:	80 83       	st	Z, r24
		_delay_ms(period);
    245a:	fe 01       	movw	r30, r28
    245c:	ee 51       	subi	r30, 0x1E	; 30
    245e:	ff 4f       	sbci	r31, 0xFF	; 255
    2460:	80 81       	ld	r24, Z
    2462:	91 81       	ldd	r25, Z+1	; 0x01
    2464:	aa 27       	eor	r26, r26
    2466:	97 fd       	sbrc	r25, 7
    2468:	a0 95       	com	r26
    246a:	ba 2f       	mov	r27, r26
    246c:	bc 01       	movw	r22, r24
    246e:	cd 01       	movw	r24, r26
    2470:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2474:	dc 01       	movw	r26, r24
    2476:	cb 01       	movw	r24, r22
    2478:	fe 01       	movw	r30, r28
    247a:	ed 54       	subi	r30, 0x4D	; 77
    247c:	ff 4f       	sbci	r31, 0xFF	; 255
    247e:	80 83       	st	Z, r24
    2480:	91 83       	std	Z+1, r25	; 0x01
    2482:	a2 83       	std	Z+2, r26	; 0x02
    2484:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2486:	8e 01       	movw	r16, r28
    2488:	01 55       	subi	r16, 0x51	; 81
    248a:	1f 4f       	sbci	r17, 0xFF	; 255
    248c:	fe 01       	movw	r30, r28
    248e:	ed 54       	subi	r30, 0x4D	; 77
    2490:	ff 4f       	sbci	r31, 0xFF	; 255
    2492:	60 81       	ld	r22, Z
    2494:	71 81       	ldd	r23, Z+1	; 0x01
    2496:	82 81       	ldd	r24, Z+2	; 0x02
    2498:	93 81       	ldd	r25, Z+3	; 0x03
    249a:	20 e0       	ldi	r18, 0x00	; 0
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	4a ef       	ldi	r20, 0xFA	; 250
    24a0:	54 e4       	ldi	r21, 0x44	; 68
    24a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a6:	dc 01       	movw	r26, r24
    24a8:	cb 01       	movw	r24, r22
    24aa:	f8 01       	movw	r30, r16
    24ac:	80 83       	st	Z, r24
    24ae:	91 83       	std	Z+1, r25	; 0x01
    24b0:	a2 83       	std	Z+2, r26	; 0x02
    24b2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24b4:	fe 01       	movw	r30, r28
    24b6:	e1 55       	subi	r30, 0x51	; 81
    24b8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ba:	60 81       	ld	r22, Z
    24bc:	71 81       	ldd	r23, Z+1	; 0x01
    24be:	82 81       	ldd	r24, Z+2	; 0x02
    24c0:	93 81       	ldd	r25, Z+3	; 0x03
    24c2:	20 e0       	ldi	r18, 0x00	; 0
    24c4:	30 e0       	ldi	r19, 0x00	; 0
    24c6:	40 e8       	ldi	r20, 0x80	; 128
    24c8:	5f e3       	ldi	r21, 0x3F	; 63
    24ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24ce:	88 23       	and	r24, r24
    24d0:	44 f4       	brge	.+16     	; 0x24e2 <Stepper+0x588>
		__ticks = 1;
    24d2:	fe 01       	movw	r30, r28
    24d4:	e3 55       	subi	r30, 0x53	; 83
    24d6:	ff 4f       	sbci	r31, 0xFF	; 255
    24d8:	81 e0       	ldi	r24, 0x01	; 1
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	91 83       	std	Z+1, r25	; 0x01
    24de:	80 83       	st	Z, r24
    24e0:	64 c0       	rjmp	.+200    	; 0x25aa <Stepper+0x650>
	else if (__tmp > 65535)
    24e2:	fe 01       	movw	r30, r28
    24e4:	e1 55       	subi	r30, 0x51	; 81
    24e6:	ff 4f       	sbci	r31, 0xFF	; 255
    24e8:	60 81       	ld	r22, Z
    24ea:	71 81       	ldd	r23, Z+1	; 0x01
    24ec:	82 81       	ldd	r24, Z+2	; 0x02
    24ee:	93 81       	ldd	r25, Z+3	; 0x03
    24f0:	20 e0       	ldi	r18, 0x00	; 0
    24f2:	3f ef       	ldi	r19, 0xFF	; 255
    24f4:	4f e7       	ldi	r20, 0x7F	; 127
    24f6:	57 e4       	ldi	r21, 0x47	; 71
    24f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24fc:	18 16       	cp	r1, r24
    24fe:	0c f0       	brlt	.+2      	; 0x2502 <Stepper+0x5a8>
    2500:	43 c0       	rjmp	.+134    	; 0x2588 <Stepper+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2502:	fe 01       	movw	r30, r28
    2504:	ed 54       	subi	r30, 0x4D	; 77
    2506:	ff 4f       	sbci	r31, 0xFF	; 255
    2508:	60 81       	ld	r22, Z
    250a:	71 81       	ldd	r23, Z+1	; 0x01
    250c:	82 81       	ldd	r24, Z+2	; 0x02
    250e:	93 81       	ldd	r25, Z+3	; 0x03
    2510:	20 e0       	ldi	r18, 0x00	; 0
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	40 e2       	ldi	r20, 0x20	; 32
    2516:	51 e4       	ldi	r21, 0x41	; 65
    2518:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    251c:	dc 01       	movw	r26, r24
    251e:	cb 01       	movw	r24, r22
    2520:	8e 01       	movw	r16, r28
    2522:	03 55       	subi	r16, 0x53	; 83
    2524:	1f 4f       	sbci	r17, 0xFF	; 255
    2526:	bc 01       	movw	r22, r24
    2528:	cd 01       	movw	r24, r26
    252a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    252e:	dc 01       	movw	r26, r24
    2530:	cb 01       	movw	r24, r22
    2532:	f8 01       	movw	r30, r16
    2534:	91 83       	std	Z+1, r25	; 0x01
    2536:	80 83       	st	Z, r24
    2538:	1f c0       	rjmp	.+62     	; 0x2578 <Stepper+0x61e>
    253a:	fe 01       	movw	r30, r28
    253c:	e5 55       	subi	r30, 0x55	; 85
    253e:	ff 4f       	sbci	r31, 0xFF	; 255
    2540:	88 ec       	ldi	r24, 0xC8	; 200
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	91 83       	std	Z+1, r25	; 0x01
    2546:	80 83       	st	Z, r24
    2548:	fe 01       	movw	r30, r28
    254a:	e5 55       	subi	r30, 0x55	; 85
    254c:	ff 4f       	sbci	r31, 0xFF	; 255
    254e:	80 81       	ld	r24, Z
    2550:	91 81       	ldd	r25, Z+1	; 0x01
    2552:	01 97       	sbiw	r24, 0x01	; 1
    2554:	f1 f7       	brne	.-4      	; 0x2552 <Stepper+0x5f8>
    2556:	fe 01       	movw	r30, r28
    2558:	e5 55       	subi	r30, 0x55	; 85
    255a:	ff 4f       	sbci	r31, 0xFF	; 255
    255c:	91 83       	std	Z+1, r25	; 0x01
    255e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2560:	de 01       	movw	r26, r28
    2562:	a3 55       	subi	r26, 0x53	; 83
    2564:	bf 4f       	sbci	r27, 0xFF	; 255
    2566:	fe 01       	movw	r30, r28
    2568:	e3 55       	subi	r30, 0x53	; 83
    256a:	ff 4f       	sbci	r31, 0xFF	; 255
    256c:	80 81       	ld	r24, Z
    256e:	91 81       	ldd	r25, Z+1	; 0x01
    2570:	01 97       	sbiw	r24, 0x01	; 1
    2572:	11 96       	adiw	r26, 0x01	; 1
    2574:	9c 93       	st	X, r25
    2576:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2578:	fe 01       	movw	r30, r28
    257a:	e3 55       	subi	r30, 0x53	; 83
    257c:	ff 4f       	sbci	r31, 0xFF	; 255
    257e:	80 81       	ld	r24, Z
    2580:	91 81       	ldd	r25, Z+1	; 0x01
    2582:	00 97       	sbiw	r24, 0x00	; 0
    2584:	d1 f6       	brne	.-76     	; 0x253a <Stepper+0x5e0>
    2586:	27 c0       	rjmp	.+78     	; 0x25d6 <Stepper+0x67c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2588:	8e 01       	movw	r16, r28
    258a:	03 55       	subi	r16, 0x53	; 83
    258c:	1f 4f       	sbci	r17, 0xFF	; 255
    258e:	fe 01       	movw	r30, r28
    2590:	e1 55       	subi	r30, 0x51	; 81
    2592:	ff 4f       	sbci	r31, 0xFF	; 255
    2594:	60 81       	ld	r22, Z
    2596:	71 81       	ldd	r23, Z+1	; 0x01
    2598:	82 81       	ldd	r24, Z+2	; 0x02
    259a:	93 81       	ldd	r25, Z+3	; 0x03
    259c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a0:	dc 01       	movw	r26, r24
    25a2:	cb 01       	movw	r24, r22
    25a4:	f8 01       	movw	r30, r16
    25a6:	91 83       	std	Z+1, r25	; 0x01
    25a8:	80 83       	st	Z, r24
    25aa:	de 01       	movw	r26, r28
    25ac:	a7 55       	subi	r26, 0x57	; 87
    25ae:	bf 4f       	sbci	r27, 0xFF	; 255
    25b0:	fe 01       	movw	r30, r28
    25b2:	e3 55       	subi	r30, 0x53	; 83
    25b4:	ff 4f       	sbci	r31, 0xFF	; 255
    25b6:	80 81       	ld	r24, Z
    25b8:	91 81       	ldd	r25, Z+1	; 0x01
    25ba:	8d 93       	st	X+, r24
    25bc:	9c 93       	st	X, r25
    25be:	fe 01       	movw	r30, r28
    25c0:	e7 55       	subi	r30, 0x57	; 87
    25c2:	ff 4f       	sbci	r31, 0xFF	; 255
    25c4:	80 81       	ld	r24, Z
    25c6:	91 81       	ldd	r25, Z+1	; 0x01
    25c8:	01 97       	sbiw	r24, 0x01	; 1
    25ca:	f1 f7       	brne	.-4      	; 0x25c8 <Stepper+0x66e>
    25cc:	fe 01       	movw	r30, r28
    25ce:	e7 55       	subi	r30, 0x57	; 87
    25d0:	ff 4f       	sbci	r31, 0xFF	; 255
    25d2:	91 83       	std	Z+1, r25	; 0x01
    25d4:	80 83       	st	Z, r24
		PORTA = 0x06;
    25d6:	eb e3       	ldi	r30, 0x3B	; 59
    25d8:	f0 e0       	ldi	r31, 0x00	; 0
    25da:	86 e0       	ldi	r24, 0x06	; 6
    25dc:	80 83       	st	Z, r24
		_delay_ms(period);
    25de:	fe 01       	movw	r30, r28
    25e0:	ee 51       	subi	r30, 0x1E	; 30
    25e2:	ff 4f       	sbci	r31, 0xFF	; 255
    25e4:	80 81       	ld	r24, Z
    25e6:	91 81       	ldd	r25, Z+1	; 0x01
    25e8:	aa 27       	eor	r26, r26
    25ea:	97 fd       	sbrc	r25, 7
    25ec:	a0 95       	com	r26
    25ee:	ba 2f       	mov	r27, r26
    25f0:	bc 01       	movw	r22, r24
    25f2:	cd 01       	movw	r24, r26
    25f4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    25f8:	dc 01       	movw	r26, r24
    25fa:	cb 01       	movw	r24, r22
    25fc:	fe 01       	movw	r30, r28
    25fe:	eb 55       	subi	r30, 0x5B	; 91
    2600:	ff 4f       	sbci	r31, 0xFF	; 255
    2602:	80 83       	st	Z, r24
    2604:	91 83       	std	Z+1, r25	; 0x01
    2606:	a2 83       	std	Z+2, r26	; 0x02
    2608:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    260a:	8e 01       	movw	r16, r28
    260c:	0f 55       	subi	r16, 0x5F	; 95
    260e:	1f 4f       	sbci	r17, 0xFF	; 255
    2610:	fe 01       	movw	r30, r28
    2612:	eb 55       	subi	r30, 0x5B	; 91
    2614:	ff 4f       	sbci	r31, 0xFF	; 255
    2616:	60 81       	ld	r22, Z
    2618:	71 81       	ldd	r23, Z+1	; 0x01
    261a:	82 81       	ldd	r24, Z+2	; 0x02
    261c:	93 81       	ldd	r25, Z+3	; 0x03
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	4a ef       	ldi	r20, 0xFA	; 250
    2624:	54 e4       	ldi	r21, 0x44	; 68
    2626:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    262a:	dc 01       	movw	r26, r24
    262c:	cb 01       	movw	r24, r22
    262e:	f8 01       	movw	r30, r16
    2630:	80 83       	st	Z, r24
    2632:	91 83       	std	Z+1, r25	; 0x01
    2634:	a2 83       	std	Z+2, r26	; 0x02
    2636:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2638:	fe 01       	movw	r30, r28
    263a:	ef 55       	subi	r30, 0x5F	; 95
    263c:	ff 4f       	sbci	r31, 0xFF	; 255
    263e:	60 81       	ld	r22, Z
    2640:	71 81       	ldd	r23, Z+1	; 0x01
    2642:	82 81       	ldd	r24, Z+2	; 0x02
    2644:	93 81       	ldd	r25, Z+3	; 0x03
    2646:	20 e0       	ldi	r18, 0x00	; 0
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	40 e8       	ldi	r20, 0x80	; 128
    264c:	5f e3       	ldi	r21, 0x3F	; 63
    264e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2652:	88 23       	and	r24, r24
    2654:	44 f4       	brge	.+16     	; 0x2666 <Stepper+0x70c>
		__ticks = 1;
    2656:	fe 01       	movw	r30, r28
    2658:	e1 56       	subi	r30, 0x61	; 97
    265a:	ff 4f       	sbci	r31, 0xFF	; 255
    265c:	81 e0       	ldi	r24, 0x01	; 1
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	91 83       	std	Z+1, r25	; 0x01
    2662:	80 83       	st	Z, r24
    2664:	64 c0       	rjmp	.+200    	; 0x272e <Stepper+0x7d4>
	else if (__tmp > 65535)
    2666:	fe 01       	movw	r30, r28
    2668:	ef 55       	subi	r30, 0x5F	; 95
    266a:	ff 4f       	sbci	r31, 0xFF	; 255
    266c:	60 81       	ld	r22, Z
    266e:	71 81       	ldd	r23, Z+1	; 0x01
    2670:	82 81       	ldd	r24, Z+2	; 0x02
    2672:	93 81       	ldd	r25, Z+3	; 0x03
    2674:	20 e0       	ldi	r18, 0x00	; 0
    2676:	3f ef       	ldi	r19, 0xFF	; 255
    2678:	4f e7       	ldi	r20, 0x7F	; 127
    267a:	57 e4       	ldi	r21, 0x47	; 71
    267c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2680:	18 16       	cp	r1, r24
    2682:	0c f0       	brlt	.+2      	; 0x2686 <Stepper+0x72c>
    2684:	43 c0       	rjmp	.+134    	; 0x270c <Stepper+0x7b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2686:	fe 01       	movw	r30, r28
    2688:	eb 55       	subi	r30, 0x5B	; 91
    268a:	ff 4f       	sbci	r31, 0xFF	; 255
    268c:	60 81       	ld	r22, Z
    268e:	71 81       	ldd	r23, Z+1	; 0x01
    2690:	82 81       	ldd	r24, Z+2	; 0x02
    2692:	93 81       	ldd	r25, Z+3	; 0x03
    2694:	20 e0       	ldi	r18, 0x00	; 0
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	40 e2       	ldi	r20, 0x20	; 32
    269a:	51 e4       	ldi	r21, 0x41	; 65
    269c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a0:	dc 01       	movw	r26, r24
    26a2:	cb 01       	movw	r24, r22
    26a4:	8e 01       	movw	r16, r28
    26a6:	01 56       	subi	r16, 0x61	; 97
    26a8:	1f 4f       	sbci	r17, 0xFF	; 255
    26aa:	bc 01       	movw	r22, r24
    26ac:	cd 01       	movw	r24, r26
    26ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b2:	dc 01       	movw	r26, r24
    26b4:	cb 01       	movw	r24, r22
    26b6:	f8 01       	movw	r30, r16
    26b8:	91 83       	std	Z+1, r25	; 0x01
    26ba:	80 83       	st	Z, r24
    26bc:	1f c0       	rjmp	.+62     	; 0x26fc <Stepper+0x7a2>
    26be:	fe 01       	movw	r30, r28
    26c0:	e3 56       	subi	r30, 0x63	; 99
    26c2:	ff 4f       	sbci	r31, 0xFF	; 255
    26c4:	88 ec       	ldi	r24, 0xC8	; 200
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	91 83       	std	Z+1, r25	; 0x01
    26ca:	80 83       	st	Z, r24
    26cc:	fe 01       	movw	r30, r28
    26ce:	e3 56       	subi	r30, 0x63	; 99
    26d0:	ff 4f       	sbci	r31, 0xFF	; 255
    26d2:	80 81       	ld	r24, Z
    26d4:	91 81       	ldd	r25, Z+1	; 0x01
    26d6:	01 97       	sbiw	r24, 0x01	; 1
    26d8:	f1 f7       	brne	.-4      	; 0x26d6 <Stepper+0x77c>
    26da:	fe 01       	movw	r30, r28
    26dc:	e3 56       	subi	r30, 0x63	; 99
    26de:	ff 4f       	sbci	r31, 0xFF	; 255
    26e0:	91 83       	std	Z+1, r25	; 0x01
    26e2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26e4:	de 01       	movw	r26, r28
    26e6:	a1 56       	subi	r26, 0x61	; 97
    26e8:	bf 4f       	sbci	r27, 0xFF	; 255
    26ea:	fe 01       	movw	r30, r28
    26ec:	e1 56       	subi	r30, 0x61	; 97
    26ee:	ff 4f       	sbci	r31, 0xFF	; 255
    26f0:	80 81       	ld	r24, Z
    26f2:	91 81       	ldd	r25, Z+1	; 0x01
    26f4:	01 97       	sbiw	r24, 0x01	; 1
    26f6:	11 96       	adiw	r26, 0x01	; 1
    26f8:	9c 93       	st	X, r25
    26fa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26fc:	fe 01       	movw	r30, r28
    26fe:	e1 56       	subi	r30, 0x61	; 97
    2700:	ff 4f       	sbci	r31, 0xFF	; 255
    2702:	80 81       	ld	r24, Z
    2704:	91 81       	ldd	r25, Z+1	; 0x01
    2706:	00 97       	sbiw	r24, 0x00	; 0
    2708:	d1 f6       	brne	.-76     	; 0x26be <Stepper+0x764>
    270a:	27 c0       	rjmp	.+78     	; 0x275a <Stepper+0x800>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    270c:	8e 01       	movw	r16, r28
    270e:	01 56       	subi	r16, 0x61	; 97
    2710:	1f 4f       	sbci	r17, 0xFF	; 255
    2712:	fe 01       	movw	r30, r28
    2714:	ef 55       	subi	r30, 0x5F	; 95
    2716:	ff 4f       	sbci	r31, 0xFF	; 255
    2718:	60 81       	ld	r22, Z
    271a:	71 81       	ldd	r23, Z+1	; 0x01
    271c:	82 81       	ldd	r24, Z+2	; 0x02
    271e:	93 81       	ldd	r25, Z+3	; 0x03
    2720:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2724:	dc 01       	movw	r26, r24
    2726:	cb 01       	movw	r24, r22
    2728:	f8 01       	movw	r30, r16
    272a:	91 83       	std	Z+1, r25	; 0x01
    272c:	80 83       	st	Z, r24
    272e:	de 01       	movw	r26, r28
    2730:	a5 56       	subi	r26, 0x65	; 101
    2732:	bf 4f       	sbci	r27, 0xFF	; 255
    2734:	fe 01       	movw	r30, r28
    2736:	e1 56       	subi	r30, 0x61	; 97
    2738:	ff 4f       	sbci	r31, 0xFF	; 255
    273a:	80 81       	ld	r24, Z
    273c:	91 81       	ldd	r25, Z+1	; 0x01
    273e:	8d 93       	st	X+, r24
    2740:	9c 93       	st	X, r25
    2742:	fe 01       	movw	r30, r28
    2744:	e5 56       	subi	r30, 0x65	; 101
    2746:	ff 4f       	sbci	r31, 0xFF	; 255
    2748:	80 81       	ld	r24, Z
    274a:	91 81       	ldd	r25, Z+1	; 0x01
    274c:	01 97       	sbiw	r24, 0x01	; 1
    274e:	f1 f7       	brne	.-4      	; 0x274c <Stepper+0x7f2>
    2750:	fe 01       	movw	r30, r28
    2752:	e5 56       	subi	r30, 0x65	; 101
    2754:	ff 4f       	sbci	r31, 0xFF	; 255
    2756:	91 83       	std	Z+1, r25	; 0x01
    2758:	80 83       	st	Z, r24
		PORTA = 0x02;
    275a:	eb e3       	ldi	r30, 0x3B	; 59
    275c:	f0 e0       	ldi	r31, 0x00	; 0
    275e:	82 e0       	ldi	r24, 0x02	; 2
    2760:	80 83       	st	Z, r24
		_delay_ms(period);
    2762:	fe 01       	movw	r30, r28
    2764:	ee 51       	subi	r30, 0x1E	; 30
    2766:	ff 4f       	sbci	r31, 0xFF	; 255
    2768:	80 81       	ld	r24, Z
    276a:	91 81       	ldd	r25, Z+1	; 0x01
    276c:	aa 27       	eor	r26, r26
    276e:	97 fd       	sbrc	r25, 7
    2770:	a0 95       	com	r26
    2772:	ba 2f       	mov	r27, r26
    2774:	bc 01       	movw	r22, r24
    2776:	cd 01       	movw	r24, r26
    2778:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    277c:	dc 01       	movw	r26, r24
    277e:	cb 01       	movw	r24, r22
    2780:	fe 01       	movw	r30, r28
    2782:	e9 56       	subi	r30, 0x69	; 105
    2784:	ff 4f       	sbci	r31, 0xFF	; 255
    2786:	80 83       	st	Z, r24
    2788:	91 83       	std	Z+1, r25	; 0x01
    278a:	a2 83       	std	Z+2, r26	; 0x02
    278c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    278e:	8e 01       	movw	r16, r28
    2790:	0d 56       	subi	r16, 0x6D	; 109
    2792:	1f 4f       	sbci	r17, 0xFF	; 255
    2794:	fe 01       	movw	r30, r28
    2796:	e9 56       	subi	r30, 0x69	; 105
    2798:	ff 4f       	sbci	r31, 0xFF	; 255
    279a:	60 81       	ld	r22, Z
    279c:	71 81       	ldd	r23, Z+1	; 0x01
    279e:	82 81       	ldd	r24, Z+2	; 0x02
    27a0:	93 81       	ldd	r25, Z+3	; 0x03
    27a2:	20 e0       	ldi	r18, 0x00	; 0
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	4a ef       	ldi	r20, 0xFA	; 250
    27a8:	54 e4       	ldi	r21, 0x44	; 68
    27aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ae:	dc 01       	movw	r26, r24
    27b0:	cb 01       	movw	r24, r22
    27b2:	f8 01       	movw	r30, r16
    27b4:	80 83       	st	Z, r24
    27b6:	91 83       	std	Z+1, r25	; 0x01
    27b8:	a2 83       	std	Z+2, r26	; 0x02
    27ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27bc:	fe 01       	movw	r30, r28
    27be:	ed 56       	subi	r30, 0x6D	; 109
    27c0:	ff 4f       	sbci	r31, 0xFF	; 255
    27c2:	60 81       	ld	r22, Z
    27c4:	71 81       	ldd	r23, Z+1	; 0x01
    27c6:	82 81       	ldd	r24, Z+2	; 0x02
    27c8:	93 81       	ldd	r25, Z+3	; 0x03
    27ca:	20 e0       	ldi	r18, 0x00	; 0
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	40 e8       	ldi	r20, 0x80	; 128
    27d0:	5f e3       	ldi	r21, 0x3F	; 63
    27d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27d6:	88 23       	and	r24, r24
    27d8:	44 f4       	brge	.+16     	; 0x27ea <Stepper+0x890>
		__ticks = 1;
    27da:	fe 01       	movw	r30, r28
    27dc:	ef 56       	subi	r30, 0x6F	; 111
    27de:	ff 4f       	sbci	r31, 0xFF	; 255
    27e0:	81 e0       	ldi	r24, 0x01	; 1
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	91 83       	std	Z+1, r25	; 0x01
    27e6:	80 83       	st	Z, r24
    27e8:	64 c0       	rjmp	.+200    	; 0x28b2 <Stepper+0x958>
	else if (__tmp > 65535)
    27ea:	fe 01       	movw	r30, r28
    27ec:	ed 56       	subi	r30, 0x6D	; 109
    27ee:	ff 4f       	sbci	r31, 0xFF	; 255
    27f0:	60 81       	ld	r22, Z
    27f2:	71 81       	ldd	r23, Z+1	; 0x01
    27f4:	82 81       	ldd	r24, Z+2	; 0x02
    27f6:	93 81       	ldd	r25, Z+3	; 0x03
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	3f ef       	ldi	r19, 0xFF	; 255
    27fc:	4f e7       	ldi	r20, 0x7F	; 127
    27fe:	57 e4       	ldi	r21, 0x47	; 71
    2800:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2804:	18 16       	cp	r1, r24
    2806:	0c f0       	brlt	.+2      	; 0x280a <Stepper+0x8b0>
    2808:	43 c0       	rjmp	.+134    	; 0x2890 <Stepper+0x936>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    280a:	fe 01       	movw	r30, r28
    280c:	e9 56       	subi	r30, 0x69	; 105
    280e:	ff 4f       	sbci	r31, 0xFF	; 255
    2810:	60 81       	ld	r22, Z
    2812:	71 81       	ldd	r23, Z+1	; 0x01
    2814:	82 81       	ldd	r24, Z+2	; 0x02
    2816:	93 81       	ldd	r25, Z+3	; 0x03
    2818:	20 e0       	ldi	r18, 0x00	; 0
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	40 e2       	ldi	r20, 0x20	; 32
    281e:	51 e4       	ldi	r21, 0x41	; 65
    2820:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2824:	dc 01       	movw	r26, r24
    2826:	cb 01       	movw	r24, r22
    2828:	8e 01       	movw	r16, r28
    282a:	0f 56       	subi	r16, 0x6F	; 111
    282c:	1f 4f       	sbci	r17, 0xFF	; 255
    282e:	bc 01       	movw	r22, r24
    2830:	cd 01       	movw	r24, r26
    2832:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2836:	dc 01       	movw	r26, r24
    2838:	cb 01       	movw	r24, r22
    283a:	f8 01       	movw	r30, r16
    283c:	91 83       	std	Z+1, r25	; 0x01
    283e:	80 83       	st	Z, r24
    2840:	1f c0       	rjmp	.+62     	; 0x2880 <Stepper+0x926>
    2842:	fe 01       	movw	r30, r28
    2844:	e1 57       	subi	r30, 0x71	; 113
    2846:	ff 4f       	sbci	r31, 0xFF	; 255
    2848:	88 ec       	ldi	r24, 0xC8	; 200
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	91 83       	std	Z+1, r25	; 0x01
    284e:	80 83       	st	Z, r24
    2850:	fe 01       	movw	r30, r28
    2852:	e1 57       	subi	r30, 0x71	; 113
    2854:	ff 4f       	sbci	r31, 0xFF	; 255
    2856:	80 81       	ld	r24, Z
    2858:	91 81       	ldd	r25, Z+1	; 0x01
    285a:	01 97       	sbiw	r24, 0x01	; 1
    285c:	f1 f7       	brne	.-4      	; 0x285a <Stepper+0x900>
    285e:	fe 01       	movw	r30, r28
    2860:	e1 57       	subi	r30, 0x71	; 113
    2862:	ff 4f       	sbci	r31, 0xFF	; 255
    2864:	91 83       	std	Z+1, r25	; 0x01
    2866:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2868:	de 01       	movw	r26, r28
    286a:	af 56       	subi	r26, 0x6F	; 111
    286c:	bf 4f       	sbci	r27, 0xFF	; 255
    286e:	fe 01       	movw	r30, r28
    2870:	ef 56       	subi	r30, 0x6F	; 111
    2872:	ff 4f       	sbci	r31, 0xFF	; 255
    2874:	80 81       	ld	r24, Z
    2876:	91 81       	ldd	r25, Z+1	; 0x01
    2878:	01 97       	sbiw	r24, 0x01	; 1
    287a:	11 96       	adiw	r26, 0x01	; 1
    287c:	9c 93       	st	X, r25
    287e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2880:	fe 01       	movw	r30, r28
    2882:	ef 56       	subi	r30, 0x6F	; 111
    2884:	ff 4f       	sbci	r31, 0xFF	; 255
    2886:	80 81       	ld	r24, Z
    2888:	91 81       	ldd	r25, Z+1	; 0x01
    288a:	00 97       	sbiw	r24, 0x00	; 0
    288c:	d1 f6       	brne	.-76     	; 0x2842 <Stepper+0x8e8>
    288e:	27 c0       	rjmp	.+78     	; 0x28de <Stepper+0x984>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2890:	8e 01       	movw	r16, r28
    2892:	0f 56       	subi	r16, 0x6F	; 111
    2894:	1f 4f       	sbci	r17, 0xFF	; 255
    2896:	fe 01       	movw	r30, r28
    2898:	ed 56       	subi	r30, 0x6D	; 109
    289a:	ff 4f       	sbci	r31, 0xFF	; 255
    289c:	60 81       	ld	r22, Z
    289e:	71 81       	ldd	r23, Z+1	; 0x01
    28a0:	82 81       	ldd	r24, Z+2	; 0x02
    28a2:	93 81       	ldd	r25, Z+3	; 0x03
    28a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a8:	dc 01       	movw	r26, r24
    28aa:	cb 01       	movw	r24, r22
    28ac:	f8 01       	movw	r30, r16
    28ae:	91 83       	std	Z+1, r25	; 0x01
    28b0:	80 83       	st	Z, r24
    28b2:	de 01       	movw	r26, r28
    28b4:	a3 57       	subi	r26, 0x73	; 115
    28b6:	bf 4f       	sbci	r27, 0xFF	; 255
    28b8:	fe 01       	movw	r30, r28
    28ba:	ef 56       	subi	r30, 0x6F	; 111
    28bc:	ff 4f       	sbci	r31, 0xFF	; 255
    28be:	80 81       	ld	r24, Z
    28c0:	91 81       	ldd	r25, Z+1	; 0x01
    28c2:	8d 93       	st	X+, r24
    28c4:	9c 93       	st	X, r25
    28c6:	fe 01       	movw	r30, r28
    28c8:	e3 57       	subi	r30, 0x73	; 115
    28ca:	ff 4f       	sbci	r31, 0xFF	; 255
    28cc:	80 81       	ld	r24, Z
    28ce:	91 81       	ldd	r25, Z+1	; 0x01
    28d0:	01 97       	sbiw	r24, 0x01	; 1
    28d2:	f1 f7       	brne	.-4      	; 0x28d0 <Stepper+0x976>
    28d4:	fe 01       	movw	r30, r28
    28d6:	e3 57       	subi	r30, 0x73	; 115
    28d8:	ff 4f       	sbci	r31, 0xFF	; 255
    28da:	91 83       	std	Z+1, r25	; 0x01
    28dc:	80 83       	st	Z, r24
		PORTA = 0x03;
    28de:	eb e3       	ldi	r30, 0x3B	; 59
    28e0:	f0 e0       	ldi	r31, 0x00	; 0
    28e2:	83 e0       	ldi	r24, 0x03	; 3
    28e4:	80 83       	st	Z, r24
		_delay_ms(period);
    28e6:	fe 01       	movw	r30, r28
    28e8:	ee 51       	subi	r30, 0x1E	; 30
    28ea:	ff 4f       	sbci	r31, 0xFF	; 255
    28ec:	80 81       	ld	r24, Z
    28ee:	91 81       	ldd	r25, Z+1	; 0x01
    28f0:	aa 27       	eor	r26, r26
    28f2:	97 fd       	sbrc	r25, 7
    28f4:	a0 95       	com	r26
    28f6:	ba 2f       	mov	r27, r26
    28f8:	bc 01       	movw	r22, r24
    28fa:	cd 01       	movw	r24, r26
    28fc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2900:	dc 01       	movw	r26, r24
    2902:	cb 01       	movw	r24, r22
    2904:	fe 01       	movw	r30, r28
    2906:	e7 57       	subi	r30, 0x77	; 119
    2908:	ff 4f       	sbci	r31, 0xFF	; 255
    290a:	80 83       	st	Z, r24
    290c:	91 83       	std	Z+1, r25	; 0x01
    290e:	a2 83       	std	Z+2, r26	; 0x02
    2910:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2912:	8e 01       	movw	r16, r28
    2914:	0b 57       	subi	r16, 0x7B	; 123
    2916:	1f 4f       	sbci	r17, 0xFF	; 255
    2918:	fe 01       	movw	r30, r28
    291a:	e7 57       	subi	r30, 0x77	; 119
    291c:	ff 4f       	sbci	r31, 0xFF	; 255
    291e:	60 81       	ld	r22, Z
    2920:	71 81       	ldd	r23, Z+1	; 0x01
    2922:	82 81       	ldd	r24, Z+2	; 0x02
    2924:	93 81       	ldd	r25, Z+3	; 0x03
    2926:	20 e0       	ldi	r18, 0x00	; 0
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	4a ef       	ldi	r20, 0xFA	; 250
    292c:	54 e4       	ldi	r21, 0x44	; 68
    292e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2932:	dc 01       	movw	r26, r24
    2934:	cb 01       	movw	r24, r22
    2936:	f8 01       	movw	r30, r16
    2938:	80 83       	st	Z, r24
    293a:	91 83       	std	Z+1, r25	; 0x01
    293c:	a2 83       	std	Z+2, r26	; 0x02
    293e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2940:	fe 01       	movw	r30, r28
    2942:	eb 57       	subi	r30, 0x7B	; 123
    2944:	ff 4f       	sbci	r31, 0xFF	; 255
    2946:	60 81       	ld	r22, Z
    2948:	71 81       	ldd	r23, Z+1	; 0x01
    294a:	82 81       	ldd	r24, Z+2	; 0x02
    294c:	93 81       	ldd	r25, Z+3	; 0x03
    294e:	20 e0       	ldi	r18, 0x00	; 0
    2950:	30 e0       	ldi	r19, 0x00	; 0
    2952:	40 e8       	ldi	r20, 0x80	; 128
    2954:	5f e3       	ldi	r21, 0x3F	; 63
    2956:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    295a:	88 23       	and	r24, r24
    295c:	44 f4       	brge	.+16     	; 0x296e <Stepper+0xa14>
		__ticks = 1;
    295e:	fe 01       	movw	r30, r28
    2960:	ed 57       	subi	r30, 0x7D	; 125
    2962:	ff 4f       	sbci	r31, 0xFF	; 255
    2964:	81 e0       	ldi	r24, 0x01	; 1
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	91 83       	std	Z+1, r25	; 0x01
    296a:	80 83       	st	Z, r24
    296c:	64 c0       	rjmp	.+200    	; 0x2a36 <Stepper+0xadc>
	else if (__tmp > 65535)
    296e:	fe 01       	movw	r30, r28
    2970:	eb 57       	subi	r30, 0x7B	; 123
    2972:	ff 4f       	sbci	r31, 0xFF	; 255
    2974:	60 81       	ld	r22, Z
    2976:	71 81       	ldd	r23, Z+1	; 0x01
    2978:	82 81       	ldd	r24, Z+2	; 0x02
    297a:	93 81       	ldd	r25, Z+3	; 0x03
    297c:	20 e0       	ldi	r18, 0x00	; 0
    297e:	3f ef       	ldi	r19, 0xFF	; 255
    2980:	4f e7       	ldi	r20, 0x7F	; 127
    2982:	57 e4       	ldi	r21, 0x47	; 71
    2984:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2988:	18 16       	cp	r1, r24
    298a:	0c f0       	brlt	.+2      	; 0x298e <Stepper+0xa34>
    298c:	43 c0       	rjmp	.+134    	; 0x2a14 <Stepper+0xaba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    298e:	fe 01       	movw	r30, r28
    2990:	e7 57       	subi	r30, 0x77	; 119
    2992:	ff 4f       	sbci	r31, 0xFF	; 255
    2994:	60 81       	ld	r22, Z
    2996:	71 81       	ldd	r23, Z+1	; 0x01
    2998:	82 81       	ldd	r24, Z+2	; 0x02
    299a:	93 81       	ldd	r25, Z+3	; 0x03
    299c:	20 e0       	ldi	r18, 0x00	; 0
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	40 e2       	ldi	r20, 0x20	; 32
    29a2:	51 e4       	ldi	r21, 0x41	; 65
    29a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29a8:	dc 01       	movw	r26, r24
    29aa:	cb 01       	movw	r24, r22
    29ac:	8e 01       	movw	r16, r28
    29ae:	0d 57       	subi	r16, 0x7D	; 125
    29b0:	1f 4f       	sbci	r17, 0xFF	; 255
    29b2:	bc 01       	movw	r22, r24
    29b4:	cd 01       	movw	r24, r26
    29b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ba:	dc 01       	movw	r26, r24
    29bc:	cb 01       	movw	r24, r22
    29be:	f8 01       	movw	r30, r16
    29c0:	91 83       	std	Z+1, r25	; 0x01
    29c2:	80 83       	st	Z, r24
    29c4:	1f c0       	rjmp	.+62     	; 0x2a04 <Stepper+0xaaa>
    29c6:	fe 01       	movw	r30, r28
    29c8:	ef 57       	subi	r30, 0x7F	; 127
    29ca:	ff 4f       	sbci	r31, 0xFF	; 255
    29cc:	88 ec       	ldi	r24, 0xC8	; 200
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	91 83       	std	Z+1, r25	; 0x01
    29d2:	80 83       	st	Z, r24
    29d4:	fe 01       	movw	r30, r28
    29d6:	ef 57       	subi	r30, 0x7F	; 127
    29d8:	ff 4f       	sbci	r31, 0xFF	; 255
    29da:	80 81       	ld	r24, Z
    29dc:	91 81       	ldd	r25, Z+1	; 0x01
    29de:	01 97       	sbiw	r24, 0x01	; 1
    29e0:	f1 f7       	brne	.-4      	; 0x29de <Stepper+0xa84>
    29e2:	fe 01       	movw	r30, r28
    29e4:	ef 57       	subi	r30, 0x7F	; 127
    29e6:	ff 4f       	sbci	r31, 0xFF	; 255
    29e8:	91 83       	std	Z+1, r25	; 0x01
    29ea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ec:	de 01       	movw	r26, r28
    29ee:	ad 57       	subi	r26, 0x7D	; 125
    29f0:	bf 4f       	sbci	r27, 0xFF	; 255
    29f2:	fe 01       	movw	r30, r28
    29f4:	ed 57       	subi	r30, 0x7D	; 125
    29f6:	ff 4f       	sbci	r31, 0xFF	; 255
    29f8:	80 81       	ld	r24, Z
    29fa:	91 81       	ldd	r25, Z+1	; 0x01
    29fc:	01 97       	sbiw	r24, 0x01	; 1
    29fe:	11 96       	adiw	r26, 0x01	; 1
    2a00:	9c 93       	st	X, r25
    2a02:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a04:	fe 01       	movw	r30, r28
    2a06:	ed 57       	subi	r30, 0x7D	; 125
    2a08:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0a:	80 81       	ld	r24, Z
    2a0c:	91 81       	ldd	r25, Z+1	; 0x01
    2a0e:	00 97       	sbiw	r24, 0x00	; 0
    2a10:	d1 f6       	brne	.-76     	; 0x29c6 <Stepper+0xa6c>
    2a12:	27 c0       	rjmp	.+78     	; 0x2a62 <Stepper+0xb08>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a14:	8e 01       	movw	r16, r28
    2a16:	0d 57       	subi	r16, 0x7D	; 125
    2a18:	1f 4f       	sbci	r17, 0xFF	; 255
    2a1a:	fe 01       	movw	r30, r28
    2a1c:	eb 57       	subi	r30, 0x7B	; 123
    2a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a20:	60 81       	ld	r22, Z
    2a22:	71 81       	ldd	r23, Z+1	; 0x01
    2a24:	82 81       	ldd	r24, Z+2	; 0x02
    2a26:	93 81       	ldd	r25, Z+3	; 0x03
    2a28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a2c:	dc 01       	movw	r26, r24
    2a2e:	cb 01       	movw	r24, r22
    2a30:	f8 01       	movw	r30, r16
    2a32:	91 83       	std	Z+1, r25	; 0x01
    2a34:	80 83       	st	Z, r24
    2a36:	de 01       	movw	r26, r28
    2a38:	a1 58       	subi	r26, 0x81	; 129
    2a3a:	bf 4f       	sbci	r27, 0xFF	; 255
    2a3c:	fe 01       	movw	r30, r28
    2a3e:	ed 57       	subi	r30, 0x7D	; 125
    2a40:	ff 4f       	sbci	r31, 0xFF	; 255
    2a42:	80 81       	ld	r24, Z
    2a44:	91 81       	ldd	r25, Z+1	; 0x01
    2a46:	8d 93       	st	X+, r24
    2a48:	9c 93       	st	X, r25
    2a4a:	fe 01       	movw	r30, r28
    2a4c:	e1 58       	subi	r30, 0x81	; 129
    2a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a50:	80 81       	ld	r24, Z
    2a52:	91 81       	ldd	r25, Z+1	; 0x01
    2a54:	01 97       	sbiw	r24, 0x01	; 1
    2a56:	f1 f7       	brne	.-4      	; 0x2a54 <Stepper+0xafa>
    2a58:	fe 01       	movw	r30, r28
    2a5a:	e1 58       	subi	r30, 0x81	; 129
    2a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5e:	91 83       	std	Z+1, r25	; 0x01
    2a60:	80 83       	st	Z, r24
		PORTA = 0x01;
    2a62:	eb e3       	ldi	r30, 0x3B	; 59
    2a64:	f0 e0       	ldi	r31, 0x00	; 0
    2a66:	81 e0       	ldi	r24, 0x01	; 1
    2a68:	80 83       	st	Z, r24
		_delay_ms(period);
    2a6a:	fe 01       	movw	r30, r28
    2a6c:	ee 51       	subi	r30, 0x1E	; 30
    2a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a70:	80 81       	ld	r24, Z
    2a72:	91 81       	ldd	r25, Z+1	; 0x01
    2a74:	aa 27       	eor	r26, r26
    2a76:	97 fd       	sbrc	r25, 7
    2a78:	a0 95       	com	r26
    2a7a:	ba 2f       	mov	r27, r26
    2a7c:	bc 01       	movw	r22, r24
    2a7e:	cd 01       	movw	r24, r26
    2a80:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2a84:	dc 01       	movw	r26, r24
    2a86:	cb 01       	movw	r24, r22
    2a88:	fe 01       	movw	r30, r28
    2a8a:	e5 58       	subi	r30, 0x85	; 133
    2a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8e:	80 83       	st	Z, r24
    2a90:	91 83       	std	Z+1, r25	; 0x01
    2a92:	a2 83       	std	Z+2, r26	; 0x02
    2a94:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a96:	8e 01       	movw	r16, r28
    2a98:	09 58       	subi	r16, 0x89	; 137
    2a9a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a9c:	fe 01       	movw	r30, r28
    2a9e:	e5 58       	subi	r30, 0x85	; 133
    2aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa2:	60 81       	ld	r22, Z
    2aa4:	71 81       	ldd	r23, Z+1	; 0x01
    2aa6:	82 81       	ldd	r24, Z+2	; 0x02
    2aa8:	93 81       	ldd	r25, Z+3	; 0x03
    2aaa:	20 e0       	ldi	r18, 0x00	; 0
    2aac:	30 e0       	ldi	r19, 0x00	; 0
    2aae:	4a ef       	ldi	r20, 0xFA	; 250
    2ab0:	54 e4       	ldi	r21, 0x44	; 68
    2ab2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab6:	dc 01       	movw	r26, r24
    2ab8:	cb 01       	movw	r24, r22
    2aba:	f8 01       	movw	r30, r16
    2abc:	80 83       	st	Z, r24
    2abe:	91 83       	std	Z+1, r25	; 0x01
    2ac0:	a2 83       	std	Z+2, r26	; 0x02
    2ac2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ac4:	fe 01       	movw	r30, r28
    2ac6:	e9 58       	subi	r30, 0x89	; 137
    2ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aca:	60 81       	ld	r22, Z
    2acc:	71 81       	ldd	r23, Z+1	; 0x01
    2ace:	82 81       	ldd	r24, Z+2	; 0x02
    2ad0:	93 81       	ldd	r25, Z+3	; 0x03
    2ad2:	20 e0       	ldi	r18, 0x00	; 0
    2ad4:	30 e0       	ldi	r19, 0x00	; 0
    2ad6:	40 e8       	ldi	r20, 0x80	; 128
    2ad8:	5f e3       	ldi	r21, 0x3F	; 63
    2ada:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ade:	88 23       	and	r24, r24
    2ae0:	44 f4       	brge	.+16     	; 0x2af2 <Stepper+0xb98>
		__ticks = 1;
    2ae2:	fe 01       	movw	r30, r28
    2ae4:	eb 58       	subi	r30, 0x8B	; 139
    2ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae8:	81 e0       	ldi	r24, 0x01	; 1
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	91 83       	std	Z+1, r25	; 0x01
    2aee:	80 83       	st	Z, r24
    2af0:	64 c0       	rjmp	.+200    	; 0x2bba <Stepper+0xc60>
	else if (__tmp > 65535)
    2af2:	fe 01       	movw	r30, r28
    2af4:	e9 58       	subi	r30, 0x89	; 137
    2af6:	ff 4f       	sbci	r31, 0xFF	; 255
    2af8:	60 81       	ld	r22, Z
    2afa:	71 81       	ldd	r23, Z+1	; 0x01
    2afc:	82 81       	ldd	r24, Z+2	; 0x02
    2afe:	93 81       	ldd	r25, Z+3	; 0x03
    2b00:	20 e0       	ldi	r18, 0x00	; 0
    2b02:	3f ef       	ldi	r19, 0xFF	; 255
    2b04:	4f e7       	ldi	r20, 0x7F	; 127
    2b06:	57 e4       	ldi	r21, 0x47	; 71
    2b08:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b0c:	18 16       	cp	r1, r24
    2b0e:	0c f0       	brlt	.+2      	; 0x2b12 <Stepper+0xbb8>
    2b10:	43 c0       	rjmp	.+134    	; 0x2b98 <Stepper+0xc3e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b12:	fe 01       	movw	r30, r28
    2b14:	e5 58       	subi	r30, 0x85	; 133
    2b16:	ff 4f       	sbci	r31, 0xFF	; 255
    2b18:	60 81       	ld	r22, Z
    2b1a:	71 81       	ldd	r23, Z+1	; 0x01
    2b1c:	82 81       	ldd	r24, Z+2	; 0x02
    2b1e:	93 81       	ldd	r25, Z+3	; 0x03
    2b20:	20 e0       	ldi	r18, 0x00	; 0
    2b22:	30 e0       	ldi	r19, 0x00	; 0
    2b24:	40 e2       	ldi	r20, 0x20	; 32
    2b26:	51 e4       	ldi	r21, 0x41	; 65
    2b28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b2c:	dc 01       	movw	r26, r24
    2b2e:	cb 01       	movw	r24, r22
    2b30:	8e 01       	movw	r16, r28
    2b32:	0b 58       	subi	r16, 0x8B	; 139
    2b34:	1f 4f       	sbci	r17, 0xFF	; 255
    2b36:	bc 01       	movw	r22, r24
    2b38:	cd 01       	movw	r24, r26
    2b3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b3e:	dc 01       	movw	r26, r24
    2b40:	cb 01       	movw	r24, r22
    2b42:	f8 01       	movw	r30, r16
    2b44:	91 83       	std	Z+1, r25	; 0x01
    2b46:	80 83       	st	Z, r24
    2b48:	1f c0       	rjmp	.+62     	; 0x2b88 <Stepper+0xc2e>
    2b4a:	fe 01       	movw	r30, r28
    2b4c:	ed 58       	subi	r30, 0x8D	; 141
    2b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b50:	88 ec       	ldi	r24, 0xC8	; 200
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	91 83       	std	Z+1, r25	; 0x01
    2b56:	80 83       	st	Z, r24
    2b58:	fe 01       	movw	r30, r28
    2b5a:	ed 58       	subi	r30, 0x8D	; 141
    2b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5e:	80 81       	ld	r24, Z
    2b60:	91 81       	ldd	r25, Z+1	; 0x01
    2b62:	01 97       	sbiw	r24, 0x01	; 1
    2b64:	f1 f7       	brne	.-4      	; 0x2b62 <Stepper+0xc08>
    2b66:	fe 01       	movw	r30, r28
    2b68:	ed 58       	subi	r30, 0x8D	; 141
    2b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6c:	91 83       	std	Z+1, r25	; 0x01
    2b6e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b70:	de 01       	movw	r26, r28
    2b72:	ab 58       	subi	r26, 0x8B	; 139
    2b74:	bf 4f       	sbci	r27, 0xFF	; 255
    2b76:	fe 01       	movw	r30, r28
    2b78:	eb 58       	subi	r30, 0x8B	; 139
    2b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7c:	80 81       	ld	r24, Z
    2b7e:	91 81       	ldd	r25, Z+1	; 0x01
    2b80:	01 97       	sbiw	r24, 0x01	; 1
    2b82:	11 96       	adiw	r26, 0x01	; 1
    2b84:	9c 93       	st	X, r25
    2b86:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b88:	fe 01       	movw	r30, r28
    2b8a:	eb 58       	subi	r30, 0x8B	; 139
    2b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8e:	80 81       	ld	r24, Z
    2b90:	91 81       	ldd	r25, Z+1	; 0x01
    2b92:	00 97       	sbiw	r24, 0x00	; 0
    2b94:	d1 f6       	brne	.-76     	; 0x2b4a <Stepper+0xbf0>
    2b96:	07 c5       	rjmp	.+2574   	; 0x35a6 <Stepper+0x164c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b98:	8e 01       	movw	r16, r28
    2b9a:	0b 58       	subi	r16, 0x8B	; 139
    2b9c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b9e:	fe 01       	movw	r30, r28
    2ba0:	e9 58       	subi	r30, 0x89	; 137
    2ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba4:	60 81       	ld	r22, Z
    2ba6:	71 81       	ldd	r23, Z+1	; 0x01
    2ba8:	82 81       	ldd	r24, Z+2	; 0x02
    2baa:	93 81       	ldd	r25, Z+3	; 0x03
    2bac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb0:	dc 01       	movw	r26, r24
    2bb2:	cb 01       	movw	r24, r22
    2bb4:	f8 01       	movw	r30, r16
    2bb6:	91 83       	std	Z+1, r25	; 0x01
    2bb8:	80 83       	st	Z, r24
    2bba:	de 01       	movw	r26, r28
    2bbc:	af 58       	subi	r26, 0x8F	; 143
    2bbe:	bf 4f       	sbci	r27, 0xFF	; 255
    2bc0:	fe 01       	movw	r30, r28
    2bc2:	eb 58       	subi	r30, 0x8B	; 139
    2bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc6:	80 81       	ld	r24, Z
    2bc8:	91 81       	ldd	r25, Z+1	; 0x01
    2bca:	11 96       	adiw	r26, 0x01	; 1
    2bcc:	9c 93       	st	X, r25
    2bce:	8e 93       	st	-X, r24
    2bd0:	fe 01       	movw	r30, r28
    2bd2:	ef 58       	subi	r30, 0x8F	; 143
    2bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd6:	80 81       	ld	r24, Z
    2bd8:	91 81       	ldd	r25, Z+1	; 0x01
    2bda:	01 97       	sbiw	r24, 0x01	; 1
    2bdc:	f1 f7       	brne	.-4      	; 0x2bda <Stepper+0xc80>
    2bde:	fe 01       	movw	r30, r28
    2be0:	ef 58       	subi	r30, 0x8F	; 143
    2be2:	ff 4f       	sbci	r31, 0xFF	; 255
    2be4:	91 83       	std	Z+1, r25	; 0x01
    2be6:	80 83       	st	Z, r24
    2be8:	de c4       	rjmp	.+2492   	; 0x35a6 <Stepper+0x164c>
		break;
	case 1:
		PORTA = 0x01;
    2bea:	eb e3       	ldi	r30, 0x3B	; 59
    2bec:	f0 e0       	ldi	r31, 0x00	; 0
    2bee:	81 e0       	ldi	r24, 0x01	; 1
    2bf0:	80 83       	st	Z, r24
		_delay_ms(period);
    2bf2:	fe 01       	movw	r30, r28
    2bf4:	ee 51       	subi	r30, 0x1E	; 30
    2bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf8:	80 81       	ld	r24, Z
    2bfa:	91 81       	ldd	r25, Z+1	; 0x01
    2bfc:	aa 27       	eor	r26, r26
    2bfe:	97 fd       	sbrc	r25, 7
    2c00:	a0 95       	com	r26
    2c02:	ba 2f       	mov	r27, r26
    2c04:	bc 01       	movw	r22, r24
    2c06:	cd 01       	movw	r24, r26
    2c08:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2c0c:	dc 01       	movw	r26, r24
    2c0e:	cb 01       	movw	r24, r22
    2c10:	fe 01       	movw	r30, r28
    2c12:	e3 59       	subi	r30, 0x93	; 147
    2c14:	ff 4f       	sbci	r31, 0xFF	; 255
    2c16:	80 83       	st	Z, r24
    2c18:	91 83       	std	Z+1, r25	; 0x01
    2c1a:	a2 83       	std	Z+2, r26	; 0x02
    2c1c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c1e:	8e 01       	movw	r16, r28
    2c20:	07 59       	subi	r16, 0x97	; 151
    2c22:	1f 4f       	sbci	r17, 0xFF	; 255
    2c24:	fe 01       	movw	r30, r28
    2c26:	e3 59       	subi	r30, 0x93	; 147
    2c28:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2a:	60 81       	ld	r22, Z
    2c2c:	71 81       	ldd	r23, Z+1	; 0x01
    2c2e:	82 81       	ldd	r24, Z+2	; 0x02
    2c30:	93 81       	ldd	r25, Z+3	; 0x03
    2c32:	20 e0       	ldi	r18, 0x00	; 0
    2c34:	30 e0       	ldi	r19, 0x00	; 0
    2c36:	4a ef       	ldi	r20, 0xFA	; 250
    2c38:	54 e4       	ldi	r21, 0x44	; 68
    2c3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c3e:	dc 01       	movw	r26, r24
    2c40:	cb 01       	movw	r24, r22
    2c42:	f8 01       	movw	r30, r16
    2c44:	80 83       	st	Z, r24
    2c46:	91 83       	std	Z+1, r25	; 0x01
    2c48:	a2 83       	std	Z+2, r26	; 0x02
    2c4a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c4c:	fe 01       	movw	r30, r28
    2c4e:	e7 59       	subi	r30, 0x97	; 151
    2c50:	ff 4f       	sbci	r31, 0xFF	; 255
    2c52:	60 81       	ld	r22, Z
    2c54:	71 81       	ldd	r23, Z+1	; 0x01
    2c56:	82 81       	ldd	r24, Z+2	; 0x02
    2c58:	93 81       	ldd	r25, Z+3	; 0x03
    2c5a:	20 e0       	ldi	r18, 0x00	; 0
    2c5c:	30 e0       	ldi	r19, 0x00	; 0
    2c5e:	40 e8       	ldi	r20, 0x80	; 128
    2c60:	5f e3       	ldi	r21, 0x3F	; 63
    2c62:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c66:	88 23       	and	r24, r24
    2c68:	44 f4       	brge	.+16     	; 0x2c7a <Stepper+0xd20>
		__ticks = 1;
    2c6a:	fe 01       	movw	r30, r28
    2c6c:	e9 59       	subi	r30, 0x99	; 153
    2c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c70:	81 e0       	ldi	r24, 0x01	; 1
    2c72:	90 e0       	ldi	r25, 0x00	; 0
    2c74:	91 83       	std	Z+1, r25	; 0x01
    2c76:	80 83       	st	Z, r24
    2c78:	64 c0       	rjmp	.+200    	; 0x2d42 <Stepper+0xde8>
	else if (__tmp > 65535)
    2c7a:	fe 01       	movw	r30, r28
    2c7c:	e7 59       	subi	r30, 0x97	; 151
    2c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c80:	60 81       	ld	r22, Z
    2c82:	71 81       	ldd	r23, Z+1	; 0x01
    2c84:	82 81       	ldd	r24, Z+2	; 0x02
    2c86:	93 81       	ldd	r25, Z+3	; 0x03
    2c88:	20 e0       	ldi	r18, 0x00	; 0
    2c8a:	3f ef       	ldi	r19, 0xFF	; 255
    2c8c:	4f e7       	ldi	r20, 0x7F	; 127
    2c8e:	57 e4       	ldi	r21, 0x47	; 71
    2c90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c94:	18 16       	cp	r1, r24
    2c96:	0c f0       	brlt	.+2      	; 0x2c9a <Stepper+0xd40>
    2c98:	43 c0       	rjmp	.+134    	; 0x2d20 <Stepper+0xdc6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c9a:	fe 01       	movw	r30, r28
    2c9c:	e3 59       	subi	r30, 0x93	; 147
    2c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca0:	60 81       	ld	r22, Z
    2ca2:	71 81       	ldd	r23, Z+1	; 0x01
    2ca4:	82 81       	ldd	r24, Z+2	; 0x02
    2ca6:	93 81       	ldd	r25, Z+3	; 0x03
    2ca8:	20 e0       	ldi	r18, 0x00	; 0
    2caa:	30 e0       	ldi	r19, 0x00	; 0
    2cac:	40 e2       	ldi	r20, 0x20	; 32
    2cae:	51 e4       	ldi	r21, 0x41	; 65
    2cb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb4:	dc 01       	movw	r26, r24
    2cb6:	cb 01       	movw	r24, r22
    2cb8:	8e 01       	movw	r16, r28
    2cba:	09 59       	subi	r16, 0x99	; 153
    2cbc:	1f 4f       	sbci	r17, 0xFF	; 255
    2cbe:	bc 01       	movw	r22, r24
    2cc0:	cd 01       	movw	r24, r26
    2cc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cc6:	dc 01       	movw	r26, r24
    2cc8:	cb 01       	movw	r24, r22
    2cca:	f8 01       	movw	r30, r16
    2ccc:	91 83       	std	Z+1, r25	; 0x01
    2cce:	80 83       	st	Z, r24
    2cd0:	1f c0       	rjmp	.+62     	; 0x2d10 <Stepper+0xdb6>
    2cd2:	fe 01       	movw	r30, r28
    2cd4:	eb 59       	subi	r30, 0x9B	; 155
    2cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd8:	88 ec       	ldi	r24, 0xC8	; 200
    2cda:	90 e0       	ldi	r25, 0x00	; 0
    2cdc:	91 83       	std	Z+1, r25	; 0x01
    2cde:	80 83       	st	Z, r24
    2ce0:	fe 01       	movw	r30, r28
    2ce2:	eb 59       	subi	r30, 0x9B	; 155
    2ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce6:	80 81       	ld	r24, Z
    2ce8:	91 81       	ldd	r25, Z+1	; 0x01
    2cea:	01 97       	sbiw	r24, 0x01	; 1
    2cec:	f1 f7       	brne	.-4      	; 0x2cea <Stepper+0xd90>
    2cee:	fe 01       	movw	r30, r28
    2cf0:	eb 59       	subi	r30, 0x9B	; 155
    2cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf4:	91 83       	std	Z+1, r25	; 0x01
    2cf6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cf8:	de 01       	movw	r26, r28
    2cfa:	a9 59       	subi	r26, 0x99	; 153
    2cfc:	bf 4f       	sbci	r27, 0xFF	; 255
    2cfe:	fe 01       	movw	r30, r28
    2d00:	e9 59       	subi	r30, 0x99	; 153
    2d02:	ff 4f       	sbci	r31, 0xFF	; 255
    2d04:	80 81       	ld	r24, Z
    2d06:	91 81       	ldd	r25, Z+1	; 0x01
    2d08:	01 97       	sbiw	r24, 0x01	; 1
    2d0a:	11 96       	adiw	r26, 0x01	; 1
    2d0c:	9c 93       	st	X, r25
    2d0e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d10:	fe 01       	movw	r30, r28
    2d12:	e9 59       	subi	r30, 0x99	; 153
    2d14:	ff 4f       	sbci	r31, 0xFF	; 255
    2d16:	80 81       	ld	r24, Z
    2d18:	91 81       	ldd	r25, Z+1	; 0x01
    2d1a:	00 97       	sbiw	r24, 0x00	; 0
    2d1c:	d1 f6       	brne	.-76     	; 0x2cd2 <Stepper+0xd78>
    2d1e:	27 c0       	rjmp	.+78     	; 0x2d6e <Stepper+0xe14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d20:	8e 01       	movw	r16, r28
    2d22:	09 59       	subi	r16, 0x99	; 153
    2d24:	1f 4f       	sbci	r17, 0xFF	; 255
    2d26:	fe 01       	movw	r30, r28
    2d28:	e7 59       	subi	r30, 0x97	; 151
    2d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2c:	60 81       	ld	r22, Z
    2d2e:	71 81       	ldd	r23, Z+1	; 0x01
    2d30:	82 81       	ldd	r24, Z+2	; 0x02
    2d32:	93 81       	ldd	r25, Z+3	; 0x03
    2d34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d38:	dc 01       	movw	r26, r24
    2d3a:	cb 01       	movw	r24, r22
    2d3c:	f8 01       	movw	r30, r16
    2d3e:	91 83       	std	Z+1, r25	; 0x01
    2d40:	80 83       	st	Z, r24
    2d42:	de 01       	movw	r26, r28
    2d44:	ad 59       	subi	r26, 0x9D	; 157
    2d46:	bf 4f       	sbci	r27, 0xFF	; 255
    2d48:	fe 01       	movw	r30, r28
    2d4a:	e9 59       	subi	r30, 0x99	; 153
    2d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4e:	80 81       	ld	r24, Z
    2d50:	91 81       	ldd	r25, Z+1	; 0x01
    2d52:	8d 93       	st	X+, r24
    2d54:	9c 93       	st	X, r25
    2d56:	fe 01       	movw	r30, r28
    2d58:	ed 59       	subi	r30, 0x9D	; 157
    2d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5c:	80 81       	ld	r24, Z
    2d5e:	91 81       	ldd	r25, Z+1	; 0x01
    2d60:	01 97       	sbiw	r24, 0x01	; 1
    2d62:	f1 f7       	brne	.-4      	; 0x2d60 <Stepper+0xe06>
    2d64:	fe 01       	movw	r30, r28
    2d66:	ed 59       	subi	r30, 0x9D	; 157
    2d68:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6a:	91 83       	std	Z+1, r25	; 0x01
    2d6c:	80 83       	st	Z, r24
		PORTA = 0x03;
    2d6e:	eb e3       	ldi	r30, 0x3B	; 59
    2d70:	f0 e0       	ldi	r31, 0x00	; 0
    2d72:	83 e0       	ldi	r24, 0x03	; 3
    2d74:	80 83       	st	Z, r24
		_delay_ms(period);
    2d76:	fe 01       	movw	r30, r28
    2d78:	ee 51       	subi	r30, 0x1E	; 30
    2d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7c:	80 81       	ld	r24, Z
    2d7e:	91 81       	ldd	r25, Z+1	; 0x01
    2d80:	aa 27       	eor	r26, r26
    2d82:	97 fd       	sbrc	r25, 7
    2d84:	a0 95       	com	r26
    2d86:	ba 2f       	mov	r27, r26
    2d88:	bc 01       	movw	r22, r24
    2d8a:	cd 01       	movw	r24, r26
    2d8c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2d90:	dc 01       	movw	r26, r24
    2d92:	cb 01       	movw	r24, r22
    2d94:	fe 01       	movw	r30, r28
    2d96:	e1 5a       	subi	r30, 0xA1	; 161
    2d98:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9a:	80 83       	st	Z, r24
    2d9c:	91 83       	std	Z+1, r25	; 0x01
    2d9e:	a2 83       	std	Z+2, r26	; 0x02
    2da0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2da2:	8e 01       	movw	r16, r28
    2da4:	05 5a       	subi	r16, 0xA5	; 165
    2da6:	1f 4f       	sbci	r17, 0xFF	; 255
    2da8:	fe 01       	movw	r30, r28
    2daa:	e1 5a       	subi	r30, 0xA1	; 161
    2dac:	ff 4f       	sbci	r31, 0xFF	; 255
    2dae:	60 81       	ld	r22, Z
    2db0:	71 81       	ldd	r23, Z+1	; 0x01
    2db2:	82 81       	ldd	r24, Z+2	; 0x02
    2db4:	93 81       	ldd	r25, Z+3	; 0x03
    2db6:	20 e0       	ldi	r18, 0x00	; 0
    2db8:	30 e0       	ldi	r19, 0x00	; 0
    2dba:	4a ef       	ldi	r20, 0xFA	; 250
    2dbc:	54 e4       	ldi	r21, 0x44	; 68
    2dbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc2:	dc 01       	movw	r26, r24
    2dc4:	cb 01       	movw	r24, r22
    2dc6:	f8 01       	movw	r30, r16
    2dc8:	80 83       	st	Z, r24
    2dca:	91 83       	std	Z+1, r25	; 0x01
    2dcc:	a2 83       	std	Z+2, r26	; 0x02
    2dce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2dd0:	fe 01       	movw	r30, r28
    2dd2:	e5 5a       	subi	r30, 0xA5	; 165
    2dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd6:	60 81       	ld	r22, Z
    2dd8:	71 81       	ldd	r23, Z+1	; 0x01
    2dda:	82 81       	ldd	r24, Z+2	; 0x02
    2ddc:	93 81       	ldd	r25, Z+3	; 0x03
    2dde:	20 e0       	ldi	r18, 0x00	; 0
    2de0:	30 e0       	ldi	r19, 0x00	; 0
    2de2:	40 e8       	ldi	r20, 0x80	; 128
    2de4:	5f e3       	ldi	r21, 0x3F	; 63
    2de6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dea:	88 23       	and	r24, r24
    2dec:	44 f4       	brge	.+16     	; 0x2dfe <Stepper+0xea4>
		__ticks = 1;
    2dee:	fe 01       	movw	r30, r28
    2df0:	e7 5a       	subi	r30, 0xA7	; 167
    2df2:	ff 4f       	sbci	r31, 0xFF	; 255
    2df4:	81 e0       	ldi	r24, 0x01	; 1
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	91 83       	std	Z+1, r25	; 0x01
    2dfa:	80 83       	st	Z, r24
    2dfc:	64 c0       	rjmp	.+200    	; 0x2ec6 <Stepper+0xf6c>
	else if (__tmp > 65535)
    2dfe:	fe 01       	movw	r30, r28
    2e00:	e5 5a       	subi	r30, 0xA5	; 165
    2e02:	ff 4f       	sbci	r31, 0xFF	; 255
    2e04:	60 81       	ld	r22, Z
    2e06:	71 81       	ldd	r23, Z+1	; 0x01
    2e08:	82 81       	ldd	r24, Z+2	; 0x02
    2e0a:	93 81       	ldd	r25, Z+3	; 0x03
    2e0c:	20 e0       	ldi	r18, 0x00	; 0
    2e0e:	3f ef       	ldi	r19, 0xFF	; 255
    2e10:	4f e7       	ldi	r20, 0x7F	; 127
    2e12:	57 e4       	ldi	r21, 0x47	; 71
    2e14:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e18:	18 16       	cp	r1, r24
    2e1a:	0c f0       	brlt	.+2      	; 0x2e1e <Stepper+0xec4>
    2e1c:	43 c0       	rjmp	.+134    	; 0x2ea4 <Stepper+0xf4a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e1e:	fe 01       	movw	r30, r28
    2e20:	e1 5a       	subi	r30, 0xA1	; 161
    2e22:	ff 4f       	sbci	r31, 0xFF	; 255
    2e24:	60 81       	ld	r22, Z
    2e26:	71 81       	ldd	r23, Z+1	; 0x01
    2e28:	82 81       	ldd	r24, Z+2	; 0x02
    2e2a:	93 81       	ldd	r25, Z+3	; 0x03
    2e2c:	20 e0       	ldi	r18, 0x00	; 0
    2e2e:	30 e0       	ldi	r19, 0x00	; 0
    2e30:	40 e2       	ldi	r20, 0x20	; 32
    2e32:	51 e4       	ldi	r21, 0x41	; 65
    2e34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e38:	dc 01       	movw	r26, r24
    2e3a:	cb 01       	movw	r24, r22
    2e3c:	8e 01       	movw	r16, r28
    2e3e:	07 5a       	subi	r16, 0xA7	; 167
    2e40:	1f 4f       	sbci	r17, 0xFF	; 255
    2e42:	bc 01       	movw	r22, r24
    2e44:	cd 01       	movw	r24, r26
    2e46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e4a:	dc 01       	movw	r26, r24
    2e4c:	cb 01       	movw	r24, r22
    2e4e:	f8 01       	movw	r30, r16
    2e50:	91 83       	std	Z+1, r25	; 0x01
    2e52:	80 83       	st	Z, r24
    2e54:	1f c0       	rjmp	.+62     	; 0x2e94 <Stepper+0xf3a>
    2e56:	fe 01       	movw	r30, r28
    2e58:	e9 5a       	subi	r30, 0xA9	; 169
    2e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5c:	88 ec       	ldi	r24, 0xC8	; 200
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	91 83       	std	Z+1, r25	; 0x01
    2e62:	80 83       	st	Z, r24
    2e64:	fe 01       	movw	r30, r28
    2e66:	e9 5a       	subi	r30, 0xA9	; 169
    2e68:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6a:	80 81       	ld	r24, Z
    2e6c:	91 81       	ldd	r25, Z+1	; 0x01
    2e6e:	01 97       	sbiw	r24, 0x01	; 1
    2e70:	f1 f7       	brne	.-4      	; 0x2e6e <Stepper+0xf14>
    2e72:	fe 01       	movw	r30, r28
    2e74:	e9 5a       	subi	r30, 0xA9	; 169
    2e76:	ff 4f       	sbci	r31, 0xFF	; 255
    2e78:	91 83       	std	Z+1, r25	; 0x01
    2e7a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e7c:	de 01       	movw	r26, r28
    2e7e:	a7 5a       	subi	r26, 0xA7	; 167
    2e80:	bf 4f       	sbci	r27, 0xFF	; 255
    2e82:	fe 01       	movw	r30, r28
    2e84:	e7 5a       	subi	r30, 0xA7	; 167
    2e86:	ff 4f       	sbci	r31, 0xFF	; 255
    2e88:	80 81       	ld	r24, Z
    2e8a:	91 81       	ldd	r25, Z+1	; 0x01
    2e8c:	01 97       	sbiw	r24, 0x01	; 1
    2e8e:	11 96       	adiw	r26, 0x01	; 1
    2e90:	9c 93       	st	X, r25
    2e92:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e94:	fe 01       	movw	r30, r28
    2e96:	e7 5a       	subi	r30, 0xA7	; 167
    2e98:	ff 4f       	sbci	r31, 0xFF	; 255
    2e9a:	80 81       	ld	r24, Z
    2e9c:	91 81       	ldd	r25, Z+1	; 0x01
    2e9e:	00 97       	sbiw	r24, 0x00	; 0
    2ea0:	d1 f6       	brne	.-76     	; 0x2e56 <Stepper+0xefc>
    2ea2:	27 c0       	rjmp	.+78     	; 0x2ef2 <Stepper+0xf98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ea4:	8e 01       	movw	r16, r28
    2ea6:	07 5a       	subi	r16, 0xA7	; 167
    2ea8:	1f 4f       	sbci	r17, 0xFF	; 255
    2eaa:	fe 01       	movw	r30, r28
    2eac:	e5 5a       	subi	r30, 0xA5	; 165
    2eae:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb0:	60 81       	ld	r22, Z
    2eb2:	71 81       	ldd	r23, Z+1	; 0x01
    2eb4:	82 81       	ldd	r24, Z+2	; 0x02
    2eb6:	93 81       	ldd	r25, Z+3	; 0x03
    2eb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ebc:	dc 01       	movw	r26, r24
    2ebe:	cb 01       	movw	r24, r22
    2ec0:	f8 01       	movw	r30, r16
    2ec2:	91 83       	std	Z+1, r25	; 0x01
    2ec4:	80 83       	st	Z, r24
    2ec6:	de 01       	movw	r26, r28
    2ec8:	ab 5a       	subi	r26, 0xAB	; 171
    2eca:	bf 4f       	sbci	r27, 0xFF	; 255
    2ecc:	fe 01       	movw	r30, r28
    2ece:	e7 5a       	subi	r30, 0xA7	; 167
    2ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed2:	80 81       	ld	r24, Z
    2ed4:	91 81       	ldd	r25, Z+1	; 0x01
    2ed6:	8d 93       	st	X+, r24
    2ed8:	9c 93       	st	X, r25
    2eda:	fe 01       	movw	r30, r28
    2edc:	eb 5a       	subi	r30, 0xAB	; 171
    2ede:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee0:	80 81       	ld	r24, Z
    2ee2:	91 81       	ldd	r25, Z+1	; 0x01
    2ee4:	01 97       	sbiw	r24, 0x01	; 1
    2ee6:	f1 f7       	brne	.-4      	; 0x2ee4 <Stepper+0xf8a>
    2ee8:	fe 01       	movw	r30, r28
    2eea:	eb 5a       	subi	r30, 0xAB	; 171
    2eec:	ff 4f       	sbci	r31, 0xFF	; 255
    2eee:	91 83       	std	Z+1, r25	; 0x01
    2ef0:	80 83       	st	Z, r24
		PORTA = 0x02;
    2ef2:	eb e3       	ldi	r30, 0x3B	; 59
    2ef4:	f0 e0       	ldi	r31, 0x00	; 0
    2ef6:	82 e0       	ldi	r24, 0x02	; 2
    2ef8:	80 83       	st	Z, r24
		_delay_ms(period);
    2efa:	fe 01       	movw	r30, r28
    2efc:	ee 51       	subi	r30, 0x1E	; 30
    2efe:	ff 4f       	sbci	r31, 0xFF	; 255
    2f00:	80 81       	ld	r24, Z
    2f02:	91 81       	ldd	r25, Z+1	; 0x01
    2f04:	aa 27       	eor	r26, r26
    2f06:	97 fd       	sbrc	r25, 7
    2f08:	a0 95       	com	r26
    2f0a:	ba 2f       	mov	r27, r26
    2f0c:	bc 01       	movw	r22, r24
    2f0e:	cd 01       	movw	r24, r26
    2f10:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2f14:	dc 01       	movw	r26, r24
    2f16:	cb 01       	movw	r24, r22
    2f18:	fe 01       	movw	r30, r28
    2f1a:	ef 5a       	subi	r30, 0xAF	; 175
    2f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1e:	80 83       	st	Z, r24
    2f20:	91 83       	std	Z+1, r25	; 0x01
    2f22:	a2 83       	std	Z+2, r26	; 0x02
    2f24:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f26:	8e 01       	movw	r16, r28
    2f28:	03 5b       	subi	r16, 0xB3	; 179
    2f2a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f2c:	fe 01       	movw	r30, r28
    2f2e:	ef 5a       	subi	r30, 0xAF	; 175
    2f30:	ff 4f       	sbci	r31, 0xFF	; 255
    2f32:	60 81       	ld	r22, Z
    2f34:	71 81       	ldd	r23, Z+1	; 0x01
    2f36:	82 81       	ldd	r24, Z+2	; 0x02
    2f38:	93 81       	ldd	r25, Z+3	; 0x03
    2f3a:	20 e0       	ldi	r18, 0x00	; 0
    2f3c:	30 e0       	ldi	r19, 0x00	; 0
    2f3e:	4a ef       	ldi	r20, 0xFA	; 250
    2f40:	54 e4       	ldi	r21, 0x44	; 68
    2f42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f46:	dc 01       	movw	r26, r24
    2f48:	cb 01       	movw	r24, r22
    2f4a:	f8 01       	movw	r30, r16
    2f4c:	80 83       	st	Z, r24
    2f4e:	91 83       	std	Z+1, r25	; 0x01
    2f50:	a2 83       	std	Z+2, r26	; 0x02
    2f52:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f54:	fe 01       	movw	r30, r28
    2f56:	e3 5b       	subi	r30, 0xB3	; 179
    2f58:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5a:	60 81       	ld	r22, Z
    2f5c:	71 81       	ldd	r23, Z+1	; 0x01
    2f5e:	82 81       	ldd	r24, Z+2	; 0x02
    2f60:	93 81       	ldd	r25, Z+3	; 0x03
    2f62:	20 e0       	ldi	r18, 0x00	; 0
    2f64:	30 e0       	ldi	r19, 0x00	; 0
    2f66:	40 e8       	ldi	r20, 0x80	; 128
    2f68:	5f e3       	ldi	r21, 0x3F	; 63
    2f6a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f6e:	88 23       	and	r24, r24
    2f70:	44 f4       	brge	.+16     	; 0x2f82 <Stepper+0x1028>
		__ticks = 1;
    2f72:	fe 01       	movw	r30, r28
    2f74:	e5 5b       	subi	r30, 0xB5	; 181
    2f76:	ff 4f       	sbci	r31, 0xFF	; 255
    2f78:	81 e0       	ldi	r24, 0x01	; 1
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	91 83       	std	Z+1, r25	; 0x01
    2f7e:	80 83       	st	Z, r24
    2f80:	64 c0       	rjmp	.+200    	; 0x304a <Stepper+0x10f0>
	else if (__tmp > 65535)
    2f82:	fe 01       	movw	r30, r28
    2f84:	e3 5b       	subi	r30, 0xB3	; 179
    2f86:	ff 4f       	sbci	r31, 0xFF	; 255
    2f88:	60 81       	ld	r22, Z
    2f8a:	71 81       	ldd	r23, Z+1	; 0x01
    2f8c:	82 81       	ldd	r24, Z+2	; 0x02
    2f8e:	93 81       	ldd	r25, Z+3	; 0x03
    2f90:	20 e0       	ldi	r18, 0x00	; 0
    2f92:	3f ef       	ldi	r19, 0xFF	; 255
    2f94:	4f e7       	ldi	r20, 0x7F	; 127
    2f96:	57 e4       	ldi	r21, 0x47	; 71
    2f98:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f9c:	18 16       	cp	r1, r24
    2f9e:	0c f0       	brlt	.+2      	; 0x2fa2 <Stepper+0x1048>
    2fa0:	43 c0       	rjmp	.+134    	; 0x3028 <Stepper+0x10ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fa2:	fe 01       	movw	r30, r28
    2fa4:	ef 5a       	subi	r30, 0xAF	; 175
    2fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa8:	60 81       	ld	r22, Z
    2faa:	71 81       	ldd	r23, Z+1	; 0x01
    2fac:	82 81       	ldd	r24, Z+2	; 0x02
    2fae:	93 81       	ldd	r25, Z+3	; 0x03
    2fb0:	20 e0       	ldi	r18, 0x00	; 0
    2fb2:	30 e0       	ldi	r19, 0x00	; 0
    2fb4:	40 e2       	ldi	r20, 0x20	; 32
    2fb6:	51 e4       	ldi	r21, 0x41	; 65
    2fb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fbc:	dc 01       	movw	r26, r24
    2fbe:	cb 01       	movw	r24, r22
    2fc0:	8e 01       	movw	r16, r28
    2fc2:	05 5b       	subi	r16, 0xB5	; 181
    2fc4:	1f 4f       	sbci	r17, 0xFF	; 255
    2fc6:	bc 01       	movw	r22, r24
    2fc8:	cd 01       	movw	r24, r26
    2fca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fce:	dc 01       	movw	r26, r24
    2fd0:	cb 01       	movw	r24, r22
    2fd2:	f8 01       	movw	r30, r16
    2fd4:	91 83       	std	Z+1, r25	; 0x01
    2fd6:	80 83       	st	Z, r24
    2fd8:	1f c0       	rjmp	.+62     	; 0x3018 <Stepper+0x10be>
    2fda:	fe 01       	movw	r30, r28
    2fdc:	e7 5b       	subi	r30, 0xB7	; 183
    2fde:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe0:	88 ec       	ldi	r24, 0xC8	; 200
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
    2fe4:	91 83       	std	Z+1, r25	; 0x01
    2fe6:	80 83       	st	Z, r24
    2fe8:	fe 01       	movw	r30, r28
    2fea:	e7 5b       	subi	r30, 0xB7	; 183
    2fec:	ff 4f       	sbci	r31, 0xFF	; 255
    2fee:	80 81       	ld	r24, Z
    2ff0:	91 81       	ldd	r25, Z+1	; 0x01
    2ff2:	01 97       	sbiw	r24, 0x01	; 1
    2ff4:	f1 f7       	brne	.-4      	; 0x2ff2 <Stepper+0x1098>
    2ff6:	fe 01       	movw	r30, r28
    2ff8:	e7 5b       	subi	r30, 0xB7	; 183
    2ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffc:	91 83       	std	Z+1, r25	; 0x01
    2ffe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3000:	de 01       	movw	r26, r28
    3002:	a5 5b       	subi	r26, 0xB5	; 181
    3004:	bf 4f       	sbci	r27, 0xFF	; 255
    3006:	fe 01       	movw	r30, r28
    3008:	e5 5b       	subi	r30, 0xB5	; 181
    300a:	ff 4f       	sbci	r31, 0xFF	; 255
    300c:	80 81       	ld	r24, Z
    300e:	91 81       	ldd	r25, Z+1	; 0x01
    3010:	01 97       	sbiw	r24, 0x01	; 1
    3012:	11 96       	adiw	r26, 0x01	; 1
    3014:	9c 93       	st	X, r25
    3016:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3018:	fe 01       	movw	r30, r28
    301a:	e5 5b       	subi	r30, 0xB5	; 181
    301c:	ff 4f       	sbci	r31, 0xFF	; 255
    301e:	80 81       	ld	r24, Z
    3020:	91 81       	ldd	r25, Z+1	; 0x01
    3022:	00 97       	sbiw	r24, 0x00	; 0
    3024:	d1 f6       	brne	.-76     	; 0x2fda <Stepper+0x1080>
    3026:	27 c0       	rjmp	.+78     	; 0x3076 <Stepper+0x111c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3028:	8e 01       	movw	r16, r28
    302a:	05 5b       	subi	r16, 0xB5	; 181
    302c:	1f 4f       	sbci	r17, 0xFF	; 255
    302e:	fe 01       	movw	r30, r28
    3030:	e3 5b       	subi	r30, 0xB3	; 179
    3032:	ff 4f       	sbci	r31, 0xFF	; 255
    3034:	60 81       	ld	r22, Z
    3036:	71 81       	ldd	r23, Z+1	; 0x01
    3038:	82 81       	ldd	r24, Z+2	; 0x02
    303a:	93 81       	ldd	r25, Z+3	; 0x03
    303c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3040:	dc 01       	movw	r26, r24
    3042:	cb 01       	movw	r24, r22
    3044:	f8 01       	movw	r30, r16
    3046:	91 83       	std	Z+1, r25	; 0x01
    3048:	80 83       	st	Z, r24
    304a:	de 01       	movw	r26, r28
    304c:	a9 5b       	subi	r26, 0xB9	; 185
    304e:	bf 4f       	sbci	r27, 0xFF	; 255
    3050:	fe 01       	movw	r30, r28
    3052:	e5 5b       	subi	r30, 0xB5	; 181
    3054:	ff 4f       	sbci	r31, 0xFF	; 255
    3056:	80 81       	ld	r24, Z
    3058:	91 81       	ldd	r25, Z+1	; 0x01
    305a:	8d 93       	st	X+, r24
    305c:	9c 93       	st	X, r25
    305e:	fe 01       	movw	r30, r28
    3060:	e9 5b       	subi	r30, 0xB9	; 185
    3062:	ff 4f       	sbci	r31, 0xFF	; 255
    3064:	80 81       	ld	r24, Z
    3066:	91 81       	ldd	r25, Z+1	; 0x01
    3068:	01 97       	sbiw	r24, 0x01	; 1
    306a:	f1 f7       	brne	.-4      	; 0x3068 <Stepper+0x110e>
    306c:	fe 01       	movw	r30, r28
    306e:	e9 5b       	subi	r30, 0xB9	; 185
    3070:	ff 4f       	sbci	r31, 0xFF	; 255
    3072:	91 83       	std	Z+1, r25	; 0x01
    3074:	80 83       	st	Z, r24
		PORTA = 0x06;
    3076:	eb e3       	ldi	r30, 0x3B	; 59
    3078:	f0 e0       	ldi	r31, 0x00	; 0
    307a:	86 e0       	ldi	r24, 0x06	; 6
    307c:	80 83       	st	Z, r24
		_delay_ms(period);
    307e:	fe 01       	movw	r30, r28
    3080:	ee 51       	subi	r30, 0x1E	; 30
    3082:	ff 4f       	sbci	r31, 0xFF	; 255
    3084:	80 81       	ld	r24, Z
    3086:	91 81       	ldd	r25, Z+1	; 0x01
    3088:	aa 27       	eor	r26, r26
    308a:	97 fd       	sbrc	r25, 7
    308c:	a0 95       	com	r26
    308e:	ba 2f       	mov	r27, r26
    3090:	bc 01       	movw	r22, r24
    3092:	cd 01       	movw	r24, r26
    3094:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    3098:	dc 01       	movw	r26, r24
    309a:	cb 01       	movw	r24, r22
    309c:	fe 01       	movw	r30, r28
    309e:	ed 5b       	subi	r30, 0xBD	; 189
    30a0:	ff 4f       	sbci	r31, 0xFF	; 255
    30a2:	80 83       	st	Z, r24
    30a4:	91 83       	std	Z+1, r25	; 0x01
    30a6:	a2 83       	std	Z+2, r26	; 0x02
    30a8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30aa:	8e 01       	movw	r16, r28
    30ac:	01 5c       	subi	r16, 0xC1	; 193
    30ae:	1f 4f       	sbci	r17, 0xFF	; 255
    30b0:	fe 01       	movw	r30, r28
    30b2:	ed 5b       	subi	r30, 0xBD	; 189
    30b4:	ff 4f       	sbci	r31, 0xFF	; 255
    30b6:	60 81       	ld	r22, Z
    30b8:	71 81       	ldd	r23, Z+1	; 0x01
    30ba:	82 81       	ldd	r24, Z+2	; 0x02
    30bc:	93 81       	ldd	r25, Z+3	; 0x03
    30be:	20 e0       	ldi	r18, 0x00	; 0
    30c0:	30 e0       	ldi	r19, 0x00	; 0
    30c2:	4a ef       	ldi	r20, 0xFA	; 250
    30c4:	54 e4       	ldi	r21, 0x44	; 68
    30c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ca:	dc 01       	movw	r26, r24
    30cc:	cb 01       	movw	r24, r22
    30ce:	f8 01       	movw	r30, r16
    30d0:	80 83       	st	Z, r24
    30d2:	91 83       	std	Z+1, r25	; 0x01
    30d4:	a2 83       	std	Z+2, r26	; 0x02
    30d6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    30d8:	fe 01       	movw	r30, r28
    30da:	ff 96       	adiw	r30, 0x3f	; 63
    30dc:	60 81       	ld	r22, Z
    30de:	71 81       	ldd	r23, Z+1	; 0x01
    30e0:	82 81       	ldd	r24, Z+2	; 0x02
    30e2:	93 81       	ldd	r25, Z+3	; 0x03
    30e4:	20 e0       	ldi	r18, 0x00	; 0
    30e6:	30 e0       	ldi	r19, 0x00	; 0
    30e8:	40 e8       	ldi	r20, 0x80	; 128
    30ea:	5f e3       	ldi	r21, 0x3F	; 63
    30ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30f0:	88 23       	and	r24, r24
    30f2:	2c f4       	brge	.+10     	; 0x30fe <Stepper+0x11a4>
		__ticks = 1;
    30f4:	81 e0       	ldi	r24, 0x01	; 1
    30f6:	90 e0       	ldi	r25, 0x00	; 0
    30f8:	9e af       	std	Y+62, r25	; 0x3e
    30fa:	8d af       	std	Y+61, r24	; 0x3d
    30fc:	46 c0       	rjmp	.+140    	; 0x318a <Stepper+0x1230>
	else if (__tmp > 65535)
    30fe:	fe 01       	movw	r30, r28
    3100:	ff 96       	adiw	r30, 0x3f	; 63
    3102:	60 81       	ld	r22, Z
    3104:	71 81       	ldd	r23, Z+1	; 0x01
    3106:	82 81       	ldd	r24, Z+2	; 0x02
    3108:	93 81       	ldd	r25, Z+3	; 0x03
    310a:	20 e0       	ldi	r18, 0x00	; 0
    310c:	3f ef       	ldi	r19, 0xFF	; 255
    310e:	4f e7       	ldi	r20, 0x7F	; 127
    3110:	57 e4       	ldi	r21, 0x47	; 71
    3112:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3116:	18 16       	cp	r1, r24
    3118:	64 f5       	brge	.+88     	; 0x3172 <Stepper+0x1218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    311a:	fe 01       	movw	r30, r28
    311c:	ed 5b       	subi	r30, 0xBD	; 189
    311e:	ff 4f       	sbci	r31, 0xFF	; 255
    3120:	60 81       	ld	r22, Z
    3122:	71 81       	ldd	r23, Z+1	; 0x01
    3124:	82 81       	ldd	r24, Z+2	; 0x02
    3126:	93 81       	ldd	r25, Z+3	; 0x03
    3128:	20 e0       	ldi	r18, 0x00	; 0
    312a:	30 e0       	ldi	r19, 0x00	; 0
    312c:	40 e2       	ldi	r20, 0x20	; 32
    312e:	51 e4       	ldi	r21, 0x41	; 65
    3130:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3134:	dc 01       	movw	r26, r24
    3136:	cb 01       	movw	r24, r22
    3138:	bc 01       	movw	r22, r24
    313a:	cd 01       	movw	r24, r26
    313c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3140:	dc 01       	movw	r26, r24
    3142:	cb 01       	movw	r24, r22
    3144:	9e af       	std	Y+62, r25	; 0x3e
    3146:	8d af       	std	Y+61, r24	; 0x3d
    3148:	0f c0       	rjmp	.+30     	; 0x3168 <Stepper+0x120e>
    314a:	88 ec       	ldi	r24, 0xC8	; 200
    314c:	90 e0       	ldi	r25, 0x00	; 0
    314e:	9c af       	std	Y+60, r25	; 0x3c
    3150:	8b af       	std	Y+59, r24	; 0x3b
    3152:	8b ad       	ldd	r24, Y+59	; 0x3b
    3154:	9c ad       	ldd	r25, Y+60	; 0x3c
    3156:	01 97       	sbiw	r24, 0x01	; 1
    3158:	f1 f7       	brne	.-4      	; 0x3156 <Stepper+0x11fc>
    315a:	9c af       	std	Y+60, r25	; 0x3c
    315c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    315e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3160:	9e ad       	ldd	r25, Y+62	; 0x3e
    3162:	01 97       	sbiw	r24, 0x01	; 1
    3164:	9e af       	std	Y+62, r25	; 0x3e
    3166:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3168:	8d ad       	ldd	r24, Y+61	; 0x3d
    316a:	9e ad       	ldd	r25, Y+62	; 0x3e
    316c:	00 97       	sbiw	r24, 0x00	; 0
    316e:	69 f7       	brne	.-38     	; 0x314a <Stepper+0x11f0>
    3170:	16 c0       	rjmp	.+44     	; 0x319e <Stepper+0x1244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3172:	fe 01       	movw	r30, r28
    3174:	ff 96       	adiw	r30, 0x3f	; 63
    3176:	60 81       	ld	r22, Z
    3178:	71 81       	ldd	r23, Z+1	; 0x01
    317a:	82 81       	ldd	r24, Z+2	; 0x02
    317c:	93 81       	ldd	r25, Z+3	; 0x03
    317e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3182:	dc 01       	movw	r26, r24
    3184:	cb 01       	movw	r24, r22
    3186:	9e af       	std	Y+62, r25	; 0x3e
    3188:	8d af       	std	Y+61, r24	; 0x3d
    318a:	8d ad       	ldd	r24, Y+61	; 0x3d
    318c:	9e ad       	ldd	r25, Y+62	; 0x3e
    318e:	9a af       	std	Y+58, r25	; 0x3a
    3190:	89 af       	std	Y+57, r24	; 0x39
    3192:	89 ad       	ldd	r24, Y+57	; 0x39
    3194:	9a ad       	ldd	r25, Y+58	; 0x3a
    3196:	01 97       	sbiw	r24, 0x01	; 1
    3198:	f1 f7       	brne	.-4      	; 0x3196 <Stepper+0x123c>
    319a:	9a af       	std	Y+58, r25	; 0x3a
    319c:	89 af       	std	Y+57, r24	; 0x39
		PORTA = 0x04;
    319e:	eb e3       	ldi	r30, 0x3B	; 59
    31a0:	f0 e0       	ldi	r31, 0x00	; 0
    31a2:	84 e0       	ldi	r24, 0x04	; 4
    31a4:	80 83       	st	Z, r24
		_delay_ms(period);
    31a6:	fe 01       	movw	r30, r28
    31a8:	ee 51       	subi	r30, 0x1E	; 30
    31aa:	ff 4f       	sbci	r31, 0xFF	; 255
    31ac:	80 81       	ld	r24, Z
    31ae:	91 81       	ldd	r25, Z+1	; 0x01
    31b0:	aa 27       	eor	r26, r26
    31b2:	97 fd       	sbrc	r25, 7
    31b4:	a0 95       	com	r26
    31b6:	ba 2f       	mov	r27, r26
    31b8:	bc 01       	movw	r22, r24
    31ba:	cd 01       	movw	r24, r26
    31bc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    31c0:	dc 01       	movw	r26, r24
    31c2:	cb 01       	movw	r24, r22
    31c4:	8d ab       	std	Y+53, r24	; 0x35
    31c6:	9e ab       	std	Y+54, r25	; 0x36
    31c8:	af ab       	std	Y+55, r26	; 0x37
    31ca:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31cc:	6d a9       	ldd	r22, Y+53	; 0x35
    31ce:	7e a9       	ldd	r23, Y+54	; 0x36
    31d0:	8f a9       	ldd	r24, Y+55	; 0x37
    31d2:	98 ad       	ldd	r25, Y+56	; 0x38
    31d4:	20 e0       	ldi	r18, 0x00	; 0
    31d6:	30 e0       	ldi	r19, 0x00	; 0
    31d8:	4a ef       	ldi	r20, 0xFA	; 250
    31da:	54 e4       	ldi	r21, 0x44	; 68
    31dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31e0:	dc 01       	movw	r26, r24
    31e2:	cb 01       	movw	r24, r22
    31e4:	89 ab       	std	Y+49, r24	; 0x31
    31e6:	9a ab       	std	Y+50, r25	; 0x32
    31e8:	ab ab       	std	Y+51, r26	; 0x33
    31ea:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    31ec:	69 a9       	ldd	r22, Y+49	; 0x31
    31ee:	7a a9       	ldd	r23, Y+50	; 0x32
    31f0:	8b a9       	ldd	r24, Y+51	; 0x33
    31f2:	9c a9       	ldd	r25, Y+52	; 0x34
    31f4:	20 e0       	ldi	r18, 0x00	; 0
    31f6:	30 e0       	ldi	r19, 0x00	; 0
    31f8:	40 e8       	ldi	r20, 0x80	; 128
    31fa:	5f e3       	ldi	r21, 0x3F	; 63
    31fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3200:	88 23       	and	r24, r24
    3202:	2c f4       	brge	.+10     	; 0x320e <Stepper+0x12b4>
		__ticks = 1;
    3204:	81 e0       	ldi	r24, 0x01	; 1
    3206:	90 e0       	ldi	r25, 0x00	; 0
    3208:	98 ab       	std	Y+48, r25	; 0x30
    320a:	8f a7       	std	Y+47, r24	; 0x2f
    320c:	3f c0       	rjmp	.+126    	; 0x328c <Stepper+0x1332>
	else if (__tmp > 65535)
    320e:	69 a9       	ldd	r22, Y+49	; 0x31
    3210:	7a a9       	ldd	r23, Y+50	; 0x32
    3212:	8b a9       	ldd	r24, Y+51	; 0x33
    3214:	9c a9       	ldd	r25, Y+52	; 0x34
    3216:	20 e0       	ldi	r18, 0x00	; 0
    3218:	3f ef       	ldi	r19, 0xFF	; 255
    321a:	4f e7       	ldi	r20, 0x7F	; 127
    321c:	57 e4       	ldi	r21, 0x47	; 71
    321e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3222:	18 16       	cp	r1, r24
    3224:	4c f5       	brge	.+82     	; 0x3278 <Stepper+0x131e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3226:	6d a9       	ldd	r22, Y+53	; 0x35
    3228:	7e a9       	ldd	r23, Y+54	; 0x36
    322a:	8f a9       	ldd	r24, Y+55	; 0x37
    322c:	98 ad       	ldd	r25, Y+56	; 0x38
    322e:	20 e0       	ldi	r18, 0x00	; 0
    3230:	30 e0       	ldi	r19, 0x00	; 0
    3232:	40 e2       	ldi	r20, 0x20	; 32
    3234:	51 e4       	ldi	r21, 0x41	; 65
    3236:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    323a:	dc 01       	movw	r26, r24
    323c:	cb 01       	movw	r24, r22
    323e:	bc 01       	movw	r22, r24
    3240:	cd 01       	movw	r24, r26
    3242:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3246:	dc 01       	movw	r26, r24
    3248:	cb 01       	movw	r24, r22
    324a:	98 ab       	std	Y+48, r25	; 0x30
    324c:	8f a7       	std	Y+47, r24	; 0x2f
    324e:	0f c0       	rjmp	.+30     	; 0x326e <Stepper+0x1314>
    3250:	88 ec       	ldi	r24, 0xC8	; 200
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	9e a7       	std	Y+46, r25	; 0x2e
    3256:	8d a7       	std	Y+45, r24	; 0x2d
    3258:	8d a5       	ldd	r24, Y+45	; 0x2d
    325a:	9e a5       	ldd	r25, Y+46	; 0x2e
    325c:	01 97       	sbiw	r24, 0x01	; 1
    325e:	f1 f7       	brne	.-4      	; 0x325c <Stepper+0x1302>
    3260:	9e a7       	std	Y+46, r25	; 0x2e
    3262:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3264:	8f a5       	ldd	r24, Y+47	; 0x2f
    3266:	98 a9       	ldd	r25, Y+48	; 0x30
    3268:	01 97       	sbiw	r24, 0x01	; 1
    326a:	98 ab       	std	Y+48, r25	; 0x30
    326c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    326e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3270:	98 a9       	ldd	r25, Y+48	; 0x30
    3272:	00 97       	sbiw	r24, 0x00	; 0
    3274:	69 f7       	brne	.-38     	; 0x3250 <Stepper+0x12f6>
    3276:	14 c0       	rjmp	.+40     	; 0x32a0 <Stepper+0x1346>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3278:	69 a9       	ldd	r22, Y+49	; 0x31
    327a:	7a a9       	ldd	r23, Y+50	; 0x32
    327c:	8b a9       	ldd	r24, Y+51	; 0x33
    327e:	9c a9       	ldd	r25, Y+52	; 0x34
    3280:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3284:	dc 01       	movw	r26, r24
    3286:	cb 01       	movw	r24, r22
    3288:	98 ab       	std	Y+48, r25	; 0x30
    328a:	8f a7       	std	Y+47, r24	; 0x2f
    328c:	8f a5       	ldd	r24, Y+47	; 0x2f
    328e:	98 a9       	ldd	r25, Y+48	; 0x30
    3290:	9c a7       	std	Y+44, r25	; 0x2c
    3292:	8b a7       	std	Y+43, r24	; 0x2b
    3294:	8b a5       	ldd	r24, Y+43	; 0x2b
    3296:	9c a5       	ldd	r25, Y+44	; 0x2c
    3298:	01 97       	sbiw	r24, 0x01	; 1
    329a:	f1 f7       	brne	.-4      	; 0x3298 <Stepper+0x133e>
    329c:	9c a7       	std	Y+44, r25	; 0x2c
    329e:	8b a7       	std	Y+43, r24	; 0x2b
		PORTA = 0x0C;
    32a0:	eb e3       	ldi	r30, 0x3B	; 59
    32a2:	f0 e0       	ldi	r31, 0x00	; 0
    32a4:	8c e0       	ldi	r24, 0x0C	; 12
    32a6:	80 83       	st	Z, r24
		_delay_ms(period);
    32a8:	fe 01       	movw	r30, r28
    32aa:	ee 51       	subi	r30, 0x1E	; 30
    32ac:	ff 4f       	sbci	r31, 0xFF	; 255
    32ae:	80 81       	ld	r24, Z
    32b0:	91 81       	ldd	r25, Z+1	; 0x01
    32b2:	aa 27       	eor	r26, r26
    32b4:	97 fd       	sbrc	r25, 7
    32b6:	a0 95       	com	r26
    32b8:	ba 2f       	mov	r27, r26
    32ba:	bc 01       	movw	r22, r24
    32bc:	cd 01       	movw	r24, r26
    32be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    32c2:	dc 01       	movw	r26, r24
    32c4:	cb 01       	movw	r24, r22
    32c6:	8f a3       	std	Y+39, r24	; 0x27
    32c8:	98 a7       	std	Y+40, r25	; 0x28
    32ca:	a9 a7       	std	Y+41, r26	; 0x29
    32cc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32ce:	6f a1       	ldd	r22, Y+39	; 0x27
    32d0:	78 a5       	ldd	r23, Y+40	; 0x28
    32d2:	89 a5       	ldd	r24, Y+41	; 0x29
    32d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    32d6:	20 e0       	ldi	r18, 0x00	; 0
    32d8:	30 e0       	ldi	r19, 0x00	; 0
    32da:	4a ef       	ldi	r20, 0xFA	; 250
    32dc:	54 e4       	ldi	r21, 0x44	; 68
    32de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32e2:	dc 01       	movw	r26, r24
    32e4:	cb 01       	movw	r24, r22
    32e6:	8b a3       	std	Y+35, r24	; 0x23
    32e8:	9c a3       	std	Y+36, r25	; 0x24
    32ea:	ad a3       	std	Y+37, r26	; 0x25
    32ec:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    32ee:	6b a1       	ldd	r22, Y+35	; 0x23
    32f0:	7c a1       	ldd	r23, Y+36	; 0x24
    32f2:	8d a1       	ldd	r24, Y+37	; 0x25
    32f4:	9e a1       	ldd	r25, Y+38	; 0x26
    32f6:	20 e0       	ldi	r18, 0x00	; 0
    32f8:	30 e0       	ldi	r19, 0x00	; 0
    32fa:	40 e8       	ldi	r20, 0x80	; 128
    32fc:	5f e3       	ldi	r21, 0x3F	; 63
    32fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3302:	88 23       	and	r24, r24
    3304:	2c f4       	brge	.+10     	; 0x3310 <Stepper+0x13b6>
		__ticks = 1;
    3306:	81 e0       	ldi	r24, 0x01	; 1
    3308:	90 e0       	ldi	r25, 0x00	; 0
    330a:	9a a3       	std	Y+34, r25	; 0x22
    330c:	89 a3       	std	Y+33, r24	; 0x21
    330e:	3f c0       	rjmp	.+126    	; 0x338e <Stepper+0x1434>
	else if (__tmp > 65535)
    3310:	6b a1       	ldd	r22, Y+35	; 0x23
    3312:	7c a1       	ldd	r23, Y+36	; 0x24
    3314:	8d a1       	ldd	r24, Y+37	; 0x25
    3316:	9e a1       	ldd	r25, Y+38	; 0x26
    3318:	20 e0       	ldi	r18, 0x00	; 0
    331a:	3f ef       	ldi	r19, 0xFF	; 255
    331c:	4f e7       	ldi	r20, 0x7F	; 127
    331e:	57 e4       	ldi	r21, 0x47	; 71
    3320:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3324:	18 16       	cp	r1, r24
    3326:	4c f5       	brge	.+82     	; 0x337a <Stepper+0x1420>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3328:	6f a1       	ldd	r22, Y+39	; 0x27
    332a:	78 a5       	ldd	r23, Y+40	; 0x28
    332c:	89 a5       	ldd	r24, Y+41	; 0x29
    332e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3330:	20 e0       	ldi	r18, 0x00	; 0
    3332:	30 e0       	ldi	r19, 0x00	; 0
    3334:	40 e2       	ldi	r20, 0x20	; 32
    3336:	51 e4       	ldi	r21, 0x41	; 65
    3338:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    333c:	dc 01       	movw	r26, r24
    333e:	cb 01       	movw	r24, r22
    3340:	bc 01       	movw	r22, r24
    3342:	cd 01       	movw	r24, r26
    3344:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3348:	dc 01       	movw	r26, r24
    334a:	cb 01       	movw	r24, r22
    334c:	9a a3       	std	Y+34, r25	; 0x22
    334e:	89 a3       	std	Y+33, r24	; 0x21
    3350:	0f c0       	rjmp	.+30     	; 0x3370 <Stepper+0x1416>
    3352:	88 ec       	ldi	r24, 0xC8	; 200
    3354:	90 e0       	ldi	r25, 0x00	; 0
    3356:	98 a3       	std	Y+32, r25	; 0x20
    3358:	8f 8f       	std	Y+31, r24	; 0x1f
    335a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    335c:	98 a1       	ldd	r25, Y+32	; 0x20
    335e:	01 97       	sbiw	r24, 0x01	; 1
    3360:	f1 f7       	brne	.-4      	; 0x335e <Stepper+0x1404>
    3362:	98 a3       	std	Y+32, r25	; 0x20
    3364:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3366:	89 a1       	ldd	r24, Y+33	; 0x21
    3368:	9a a1       	ldd	r25, Y+34	; 0x22
    336a:	01 97       	sbiw	r24, 0x01	; 1
    336c:	9a a3       	std	Y+34, r25	; 0x22
    336e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3370:	89 a1       	ldd	r24, Y+33	; 0x21
    3372:	9a a1       	ldd	r25, Y+34	; 0x22
    3374:	00 97       	sbiw	r24, 0x00	; 0
    3376:	69 f7       	brne	.-38     	; 0x3352 <Stepper+0x13f8>
    3378:	14 c0       	rjmp	.+40     	; 0x33a2 <Stepper+0x1448>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    337a:	6b a1       	ldd	r22, Y+35	; 0x23
    337c:	7c a1       	ldd	r23, Y+36	; 0x24
    337e:	8d a1       	ldd	r24, Y+37	; 0x25
    3380:	9e a1       	ldd	r25, Y+38	; 0x26
    3382:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3386:	dc 01       	movw	r26, r24
    3388:	cb 01       	movw	r24, r22
    338a:	9a a3       	std	Y+34, r25	; 0x22
    338c:	89 a3       	std	Y+33, r24	; 0x21
    338e:	89 a1       	ldd	r24, Y+33	; 0x21
    3390:	9a a1       	ldd	r25, Y+34	; 0x22
    3392:	9e 8f       	std	Y+30, r25	; 0x1e
    3394:	8d 8f       	std	Y+29, r24	; 0x1d
    3396:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3398:	9e 8d       	ldd	r25, Y+30	; 0x1e
    339a:	01 97       	sbiw	r24, 0x01	; 1
    339c:	f1 f7       	brne	.-4      	; 0x339a <Stepper+0x1440>
    339e:	9e 8f       	std	Y+30, r25	; 0x1e
    33a0:	8d 8f       	std	Y+29, r24	; 0x1d
		PORTA = 0x08;
    33a2:	eb e3       	ldi	r30, 0x3B	; 59
    33a4:	f0 e0       	ldi	r31, 0x00	; 0
    33a6:	88 e0       	ldi	r24, 0x08	; 8
    33a8:	80 83       	st	Z, r24
		_delay_ms(period);
    33aa:	fe 01       	movw	r30, r28
    33ac:	ee 51       	subi	r30, 0x1E	; 30
    33ae:	ff 4f       	sbci	r31, 0xFF	; 255
    33b0:	80 81       	ld	r24, Z
    33b2:	91 81       	ldd	r25, Z+1	; 0x01
    33b4:	aa 27       	eor	r26, r26
    33b6:	97 fd       	sbrc	r25, 7
    33b8:	a0 95       	com	r26
    33ba:	ba 2f       	mov	r27, r26
    33bc:	bc 01       	movw	r22, r24
    33be:	cd 01       	movw	r24, r26
    33c0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    33c4:	dc 01       	movw	r26, r24
    33c6:	cb 01       	movw	r24, r22
    33c8:	89 8f       	std	Y+25, r24	; 0x19
    33ca:	9a 8f       	std	Y+26, r25	; 0x1a
    33cc:	ab 8f       	std	Y+27, r26	; 0x1b
    33ce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33d0:	69 8d       	ldd	r22, Y+25	; 0x19
    33d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33d8:	20 e0       	ldi	r18, 0x00	; 0
    33da:	30 e0       	ldi	r19, 0x00	; 0
    33dc:	4a ef       	ldi	r20, 0xFA	; 250
    33de:	54 e4       	ldi	r21, 0x44	; 68
    33e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e4:	dc 01       	movw	r26, r24
    33e6:	cb 01       	movw	r24, r22
    33e8:	8d 8b       	std	Y+21, r24	; 0x15
    33ea:	9e 8b       	std	Y+22, r25	; 0x16
    33ec:	af 8b       	std	Y+23, r26	; 0x17
    33ee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    33f0:	6d 89       	ldd	r22, Y+21	; 0x15
    33f2:	7e 89       	ldd	r23, Y+22	; 0x16
    33f4:	8f 89       	ldd	r24, Y+23	; 0x17
    33f6:	98 8d       	ldd	r25, Y+24	; 0x18
    33f8:	20 e0       	ldi	r18, 0x00	; 0
    33fa:	30 e0       	ldi	r19, 0x00	; 0
    33fc:	40 e8       	ldi	r20, 0x80	; 128
    33fe:	5f e3       	ldi	r21, 0x3F	; 63
    3400:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3404:	88 23       	and	r24, r24
    3406:	2c f4       	brge	.+10     	; 0x3412 <Stepper+0x14b8>
		__ticks = 1;
    3408:	81 e0       	ldi	r24, 0x01	; 1
    340a:	90 e0       	ldi	r25, 0x00	; 0
    340c:	9c 8b       	std	Y+20, r25	; 0x14
    340e:	8b 8b       	std	Y+19, r24	; 0x13
    3410:	3f c0       	rjmp	.+126    	; 0x3490 <Stepper+0x1536>
	else if (__tmp > 65535)
    3412:	6d 89       	ldd	r22, Y+21	; 0x15
    3414:	7e 89       	ldd	r23, Y+22	; 0x16
    3416:	8f 89       	ldd	r24, Y+23	; 0x17
    3418:	98 8d       	ldd	r25, Y+24	; 0x18
    341a:	20 e0       	ldi	r18, 0x00	; 0
    341c:	3f ef       	ldi	r19, 0xFF	; 255
    341e:	4f e7       	ldi	r20, 0x7F	; 127
    3420:	57 e4       	ldi	r21, 0x47	; 71
    3422:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3426:	18 16       	cp	r1, r24
    3428:	4c f5       	brge	.+82     	; 0x347c <Stepper+0x1522>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    342a:	69 8d       	ldd	r22, Y+25	; 0x19
    342c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    342e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3430:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3432:	20 e0       	ldi	r18, 0x00	; 0
    3434:	30 e0       	ldi	r19, 0x00	; 0
    3436:	40 e2       	ldi	r20, 0x20	; 32
    3438:	51 e4       	ldi	r21, 0x41	; 65
    343a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    343e:	dc 01       	movw	r26, r24
    3440:	cb 01       	movw	r24, r22
    3442:	bc 01       	movw	r22, r24
    3444:	cd 01       	movw	r24, r26
    3446:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    344a:	dc 01       	movw	r26, r24
    344c:	cb 01       	movw	r24, r22
    344e:	9c 8b       	std	Y+20, r25	; 0x14
    3450:	8b 8b       	std	Y+19, r24	; 0x13
    3452:	0f c0       	rjmp	.+30     	; 0x3472 <Stepper+0x1518>
    3454:	88 ec       	ldi	r24, 0xC8	; 200
    3456:	90 e0       	ldi	r25, 0x00	; 0
    3458:	9a 8b       	std	Y+18, r25	; 0x12
    345a:	89 8b       	std	Y+17, r24	; 0x11
    345c:	89 89       	ldd	r24, Y+17	; 0x11
    345e:	9a 89       	ldd	r25, Y+18	; 0x12
    3460:	01 97       	sbiw	r24, 0x01	; 1
    3462:	f1 f7       	brne	.-4      	; 0x3460 <Stepper+0x1506>
    3464:	9a 8b       	std	Y+18, r25	; 0x12
    3466:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3468:	8b 89       	ldd	r24, Y+19	; 0x13
    346a:	9c 89       	ldd	r25, Y+20	; 0x14
    346c:	01 97       	sbiw	r24, 0x01	; 1
    346e:	9c 8b       	std	Y+20, r25	; 0x14
    3470:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3472:	8b 89       	ldd	r24, Y+19	; 0x13
    3474:	9c 89       	ldd	r25, Y+20	; 0x14
    3476:	00 97       	sbiw	r24, 0x00	; 0
    3478:	69 f7       	brne	.-38     	; 0x3454 <Stepper+0x14fa>
    347a:	14 c0       	rjmp	.+40     	; 0x34a4 <Stepper+0x154a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    347c:	6d 89       	ldd	r22, Y+21	; 0x15
    347e:	7e 89       	ldd	r23, Y+22	; 0x16
    3480:	8f 89       	ldd	r24, Y+23	; 0x17
    3482:	98 8d       	ldd	r25, Y+24	; 0x18
    3484:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3488:	dc 01       	movw	r26, r24
    348a:	cb 01       	movw	r24, r22
    348c:	9c 8b       	std	Y+20, r25	; 0x14
    348e:	8b 8b       	std	Y+19, r24	; 0x13
    3490:	8b 89       	ldd	r24, Y+19	; 0x13
    3492:	9c 89       	ldd	r25, Y+20	; 0x14
    3494:	98 8b       	std	Y+16, r25	; 0x10
    3496:	8f 87       	std	Y+15, r24	; 0x0f
    3498:	8f 85       	ldd	r24, Y+15	; 0x0f
    349a:	98 89       	ldd	r25, Y+16	; 0x10
    349c:	01 97       	sbiw	r24, 0x01	; 1
    349e:	f1 f7       	brne	.-4      	; 0x349c <Stepper+0x1542>
    34a0:	98 8b       	std	Y+16, r25	; 0x10
    34a2:	8f 87       	std	Y+15, r24	; 0x0f
		PORTA = 0x09;
    34a4:	eb e3       	ldi	r30, 0x3B	; 59
    34a6:	f0 e0       	ldi	r31, 0x00	; 0
    34a8:	89 e0       	ldi	r24, 0x09	; 9
    34aa:	80 83       	st	Z, r24
		_delay_ms(period);
    34ac:	fe 01       	movw	r30, r28
    34ae:	ee 51       	subi	r30, 0x1E	; 30
    34b0:	ff 4f       	sbci	r31, 0xFF	; 255
    34b2:	80 81       	ld	r24, Z
    34b4:	91 81       	ldd	r25, Z+1	; 0x01
    34b6:	aa 27       	eor	r26, r26
    34b8:	97 fd       	sbrc	r25, 7
    34ba:	a0 95       	com	r26
    34bc:	ba 2f       	mov	r27, r26
    34be:	bc 01       	movw	r22, r24
    34c0:	cd 01       	movw	r24, r26
    34c2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    34c6:	dc 01       	movw	r26, r24
    34c8:	cb 01       	movw	r24, r22
    34ca:	8b 87       	std	Y+11, r24	; 0x0b
    34cc:	9c 87       	std	Y+12, r25	; 0x0c
    34ce:	ad 87       	std	Y+13, r26	; 0x0d
    34d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    34d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    34d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    34d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    34da:	20 e0       	ldi	r18, 0x00	; 0
    34dc:	30 e0       	ldi	r19, 0x00	; 0
    34de:	4a ef       	ldi	r20, 0xFA	; 250
    34e0:	54 e4       	ldi	r21, 0x44	; 68
    34e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34e6:	dc 01       	movw	r26, r24
    34e8:	cb 01       	movw	r24, r22
    34ea:	8f 83       	std	Y+7, r24	; 0x07
    34ec:	98 87       	std	Y+8, r25	; 0x08
    34ee:	a9 87       	std	Y+9, r26	; 0x09
    34f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34f2:	6f 81       	ldd	r22, Y+7	; 0x07
    34f4:	78 85       	ldd	r23, Y+8	; 0x08
    34f6:	89 85       	ldd	r24, Y+9	; 0x09
    34f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    34fa:	20 e0       	ldi	r18, 0x00	; 0
    34fc:	30 e0       	ldi	r19, 0x00	; 0
    34fe:	40 e8       	ldi	r20, 0x80	; 128
    3500:	5f e3       	ldi	r21, 0x3F	; 63
    3502:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3506:	88 23       	and	r24, r24
    3508:	2c f4       	brge	.+10     	; 0x3514 <Stepper+0x15ba>
		__ticks = 1;
    350a:	81 e0       	ldi	r24, 0x01	; 1
    350c:	90 e0       	ldi	r25, 0x00	; 0
    350e:	9e 83       	std	Y+6, r25	; 0x06
    3510:	8d 83       	std	Y+5, r24	; 0x05
    3512:	3f c0       	rjmp	.+126    	; 0x3592 <Stepper+0x1638>
	else if (__tmp > 65535)
    3514:	6f 81       	ldd	r22, Y+7	; 0x07
    3516:	78 85       	ldd	r23, Y+8	; 0x08
    3518:	89 85       	ldd	r24, Y+9	; 0x09
    351a:	9a 85       	ldd	r25, Y+10	; 0x0a
    351c:	20 e0       	ldi	r18, 0x00	; 0
    351e:	3f ef       	ldi	r19, 0xFF	; 255
    3520:	4f e7       	ldi	r20, 0x7F	; 127
    3522:	57 e4       	ldi	r21, 0x47	; 71
    3524:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3528:	18 16       	cp	r1, r24
    352a:	4c f5       	brge	.+82     	; 0x357e <Stepper+0x1624>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    352c:	6b 85       	ldd	r22, Y+11	; 0x0b
    352e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3530:	8d 85       	ldd	r24, Y+13	; 0x0d
    3532:	9e 85       	ldd	r25, Y+14	; 0x0e
    3534:	20 e0       	ldi	r18, 0x00	; 0
    3536:	30 e0       	ldi	r19, 0x00	; 0
    3538:	40 e2       	ldi	r20, 0x20	; 32
    353a:	51 e4       	ldi	r21, 0x41	; 65
    353c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3540:	dc 01       	movw	r26, r24
    3542:	cb 01       	movw	r24, r22
    3544:	bc 01       	movw	r22, r24
    3546:	cd 01       	movw	r24, r26
    3548:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    354c:	dc 01       	movw	r26, r24
    354e:	cb 01       	movw	r24, r22
    3550:	9e 83       	std	Y+6, r25	; 0x06
    3552:	8d 83       	std	Y+5, r24	; 0x05
    3554:	0f c0       	rjmp	.+30     	; 0x3574 <Stepper+0x161a>
    3556:	88 ec       	ldi	r24, 0xC8	; 200
    3558:	90 e0       	ldi	r25, 0x00	; 0
    355a:	9c 83       	std	Y+4, r25	; 0x04
    355c:	8b 83       	std	Y+3, r24	; 0x03
    355e:	8b 81       	ldd	r24, Y+3	; 0x03
    3560:	9c 81       	ldd	r25, Y+4	; 0x04
    3562:	01 97       	sbiw	r24, 0x01	; 1
    3564:	f1 f7       	brne	.-4      	; 0x3562 <Stepper+0x1608>
    3566:	9c 83       	std	Y+4, r25	; 0x04
    3568:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    356a:	8d 81       	ldd	r24, Y+5	; 0x05
    356c:	9e 81       	ldd	r25, Y+6	; 0x06
    356e:	01 97       	sbiw	r24, 0x01	; 1
    3570:	9e 83       	std	Y+6, r25	; 0x06
    3572:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3574:	8d 81       	ldd	r24, Y+5	; 0x05
    3576:	9e 81       	ldd	r25, Y+6	; 0x06
    3578:	00 97       	sbiw	r24, 0x00	; 0
    357a:	69 f7       	brne	.-38     	; 0x3556 <Stepper+0x15fc>
    357c:	14 c0       	rjmp	.+40     	; 0x35a6 <Stepper+0x164c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    357e:	6f 81       	ldd	r22, Y+7	; 0x07
    3580:	78 85       	ldd	r23, Y+8	; 0x08
    3582:	89 85       	ldd	r24, Y+9	; 0x09
    3584:	9a 85       	ldd	r25, Y+10	; 0x0a
    3586:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    358a:	dc 01       	movw	r26, r24
    358c:	cb 01       	movw	r24, r22
    358e:	9e 83       	std	Y+6, r25	; 0x06
    3590:	8d 83       	std	Y+5, r24	; 0x05
    3592:	8d 81       	ldd	r24, Y+5	; 0x05
    3594:	9e 81       	ldd	r25, Y+6	; 0x06
    3596:	9a 83       	std	Y+2, r25	; 0x02
    3598:	89 83       	std	Y+1, r24	; 0x01
    359a:	89 81       	ldd	r24, Y+1	; 0x01
    359c:	9a 81       	ldd	r25, Y+2	; 0x02
    359e:	01 97       	sbiw	r24, 0x01	; 1
    35a0:	f1 f7       	brne	.-4      	; 0x359e <Stepper+0x1644>
    35a2:	9a 83       	std	Y+2, r25	; 0x02
    35a4:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
}
    35a6:	cb 51       	subi	r28, 0x1B	; 27
    35a8:	df 4f       	sbci	r29, 0xFF	; 255
    35aa:	0f b6       	in	r0, 0x3f	; 63
    35ac:	f8 94       	cli
    35ae:	de bf       	out	0x3e, r29	; 62
    35b0:	0f be       	out	0x3f, r0	; 63
    35b2:	cd bf       	out	0x3d, r28	; 61
    35b4:	cf 91       	pop	r28
    35b6:	df 91       	pop	r29
    35b8:	1f 91       	pop	r17
    35ba:	0f 91       	pop	r16
    35bc:	08 95       	ret

000035be <Servo_Init>:
 *      Author: Elbekoo
 */

#include "Servo.h"

void Servo_Init() {
    35be:	df 93       	push	r29
    35c0:	cf 93       	push	r28
    35c2:	cd b7       	in	r28, 0x3d	; 61
    35c4:	de b7       	in	r29, 0x3e	; 62
	DDRD |= (1 << 7);
    35c6:	a1 e3       	ldi	r26, 0x31	; 49
    35c8:	b0 e0       	ldi	r27, 0x00	; 0
    35ca:	e1 e3       	ldi	r30, 0x31	; 49
    35cc:	f0 e0       	ldi	r31, 0x00	; 0
    35ce:	80 81       	ld	r24, Z
    35d0:	80 68       	ori	r24, 0x80	; 128
    35d2:	8c 93       	st	X, r24
	TCCR2 = (1 << WGM20) | (1 << WGM21) | (1 << COM21) | (1 << CS22);
    35d4:	e5 e4       	ldi	r30, 0x45	; 69
    35d6:	f0 e0       	ldi	r31, 0x00	; 0
    35d8:	8c e6       	ldi	r24, 0x6C	; 108
    35da:	80 83       	st	Z, r24
	OCR2 = 255;
    35dc:	e3 e4       	ldi	r30, 0x43	; 67
    35de:	f0 e0       	ldi	r31, 0x00	; 0
    35e0:	8f ef       	ldi	r24, 0xFF	; 255
    35e2:	80 83       	st	Z, r24
	Servo_Angle(90);
    35e4:	6a e5       	ldi	r22, 0x5A	; 90
    35e6:	70 e0       	ldi	r23, 0x00	; 0
    35e8:	80 e0       	ldi	r24, 0x00	; 0
    35ea:	90 e0       	ldi	r25, 0x00	; 0
    35ec:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <Servo_Angle>
}
    35f0:	cf 91       	pop	r28
    35f2:	df 91       	pop	r29
    35f4:	08 95       	ret

000035f6 <Servo_Angle>:
void Servo_Angle(long angle) {
    35f6:	0f 93       	push	r16
    35f8:	1f 93       	push	r17
    35fa:	df 93       	push	r29
    35fc:	cf 93       	push	r28
    35fe:	00 d0       	rcall	.+0      	; 0x3600 <Servo_Angle+0xa>
    3600:	00 d0       	rcall	.+0      	; 0x3602 <Servo_Angle+0xc>
    3602:	cd b7       	in	r28, 0x3d	; 61
    3604:	de b7       	in	r29, 0x3e	; 62
    3606:	69 83       	std	Y+1, r22	; 0x01
    3608:	7a 83       	std	Y+2, r23	; 0x02
    360a:	8b 83       	std	Y+3, r24	; 0x03
    360c:	9c 83       	std	Y+4, r25	; 0x04
	OCR2 =
    360e:	03 e4       	ldi	r16, 0x43	; 67
    3610:	10 e0       	ldi	r17, 0x00	; 0
    3612:	89 81       	ldd	r24, Y+1	; 0x01
    3614:	9a 81       	ldd	r25, Y+2	; 0x02
    3616:	ab 81       	ldd	r26, Y+3	; 0x03
    3618:	bc 81       	ldd	r27, Y+4	; 0x04
    361a:	2a ef       	ldi	r18, 0xFA	; 250
    361c:	30 e0       	ldi	r19, 0x00	; 0
    361e:	40 e0       	ldi	r20, 0x00	; 0
    3620:	50 e0       	ldi	r21, 0x00	; 0
    3622:	bc 01       	movw	r22, r24
    3624:	cd 01       	movw	r24, r26
    3626:	0e 94 4d 29 	call	0x529a	; 0x529a <__mulsi3>
    362a:	dc 01       	movw	r26, r24
    362c:	cb 01       	movw	r24, r22
    362e:	24 eb       	ldi	r18, 0xB4	; 180
    3630:	30 e0       	ldi	r19, 0x00	; 0
    3632:	40 e0       	ldi	r20, 0x00	; 0
    3634:	50 e0       	ldi	r21, 0x00	; 0
    3636:	bc 01       	movw	r22, r24
    3638:	cd 01       	movw	r24, r26
    363a:	0e 94 6c 29 	call	0x52d8	; 0x52d8 <__divmodsi4>
    363e:	da 01       	movw	r26, r20
    3640:	c9 01       	movw	r24, r18
    3642:	87 50       	subi	r24, 0x07	; 7
    3644:	f8 01       	movw	r30, r16
    3646:	80 83       	st	Z, r24
			(((angle - MinAngle) * (MaxCount - MinCount))
					/ (MaxAngle - MinAngle)) + MinCount - 1;
}
    3648:	0f 90       	pop	r0
    364a:	0f 90       	pop	r0
    364c:	0f 90       	pop	r0
    364e:	0f 90       	pop	r0
    3650:	cf 91       	pop	r28
    3652:	df 91       	pop	r29
    3654:	1f 91       	pop	r17
    3656:	0f 91       	pop	r16
    3658:	08 95       	ret

0000365a <LCD_INIT>:
 *      Author: mahmoud
 */

#include "LCD.h"

void LCD_INIT(void) {
    365a:	df 93       	push	r29
    365c:	cf 93       	push	r28
    365e:	cd b7       	in	r28, 0x3d	; 61
    3660:	de b7       	in	r29, 0x3e	; 62
    3662:	a6 97       	sbiw	r28, 0x26	; 38
    3664:	0f b6       	in	r0, 0x3f	; 63
    3666:	f8 94       	cli
    3668:	de bf       	out	0x3e, r29	; 62
    366a:	0f be       	out	0x3f, r0	; 63
    366c:	cd bf       	out	0x3d, r28	; 61
	Write_Channel(LCD_RW, STD_LOW);
    366e:	8a e0       	ldi	r24, 0x0A	; 10
    3670:	60 e0       	ldi	r22, 0x00	; 0
    3672:	0e 94 41 08 	call	0x1082	; 0x1082 <Write_Channel>
	Write_Channel(LCD_E, STD_HIGH);
    3676:	8b e0       	ldi	r24, 0x0B	; 11
    3678:	61 e0       	ldi	r22, 0x01	; 1
    367a:	0e 94 41 08 	call	0x1082	; 0x1082 <Write_Channel>
    367e:	80 e0       	ldi	r24, 0x00	; 0
    3680:	90 e0       	ldi	r25, 0x00	; 0
    3682:	a0 ea       	ldi	r26, 0xA0	; 160
    3684:	b1 e4       	ldi	r27, 0x41	; 65
    3686:	8b a3       	std	Y+35, r24	; 0x23
    3688:	9c a3       	std	Y+36, r25	; 0x24
    368a:	ad a3       	std	Y+37, r26	; 0x25
    368c:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    368e:	6b a1       	ldd	r22, Y+35	; 0x23
    3690:	7c a1       	ldd	r23, Y+36	; 0x24
    3692:	8d a1       	ldd	r24, Y+37	; 0x25
    3694:	9e a1       	ldd	r25, Y+38	; 0x26
    3696:	20 e0       	ldi	r18, 0x00	; 0
    3698:	30 e0       	ldi	r19, 0x00	; 0
    369a:	4a ef       	ldi	r20, 0xFA	; 250
    369c:	54 e4       	ldi	r21, 0x44	; 68
    369e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36a2:	dc 01       	movw	r26, r24
    36a4:	cb 01       	movw	r24, r22
    36a6:	8f 8f       	std	Y+31, r24	; 0x1f
    36a8:	98 a3       	std	Y+32, r25	; 0x20
    36aa:	a9 a3       	std	Y+33, r26	; 0x21
    36ac:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    36ae:	6f 8d       	ldd	r22, Y+31	; 0x1f
    36b0:	78 a1       	ldd	r23, Y+32	; 0x20
    36b2:	89 a1       	ldd	r24, Y+33	; 0x21
    36b4:	9a a1       	ldd	r25, Y+34	; 0x22
    36b6:	20 e0       	ldi	r18, 0x00	; 0
    36b8:	30 e0       	ldi	r19, 0x00	; 0
    36ba:	40 e8       	ldi	r20, 0x80	; 128
    36bc:	5f e3       	ldi	r21, 0x3F	; 63
    36be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36c2:	88 23       	and	r24, r24
    36c4:	2c f4       	brge	.+10     	; 0x36d0 <LCD_INIT+0x76>
		__ticks = 1;
    36c6:	81 e0       	ldi	r24, 0x01	; 1
    36c8:	90 e0       	ldi	r25, 0x00	; 0
    36ca:	9e 8f       	std	Y+30, r25	; 0x1e
    36cc:	8d 8f       	std	Y+29, r24	; 0x1d
    36ce:	3f c0       	rjmp	.+126    	; 0x374e <LCD_INIT+0xf4>
	else if (__tmp > 65535)
    36d0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    36d2:	78 a1       	ldd	r23, Y+32	; 0x20
    36d4:	89 a1       	ldd	r24, Y+33	; 0x21
    36d6:	9a a1       	ldd	r25, Y+34	; 0x22
    36d8:	20 e0       	ldi	r18, 0x00	; 0
    36da:	3f ef       	ldi	r19, 0xFF	; 255
    36dc:	4f e7       	ldi	r20, 0x7F	; 127
    36de:	57 e4       	ldi	r21, 0x47	; 71
    36e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36e4:	18 16       	cp	r1, r24
    36e6:	4c f5       	brge	.+82     	; 0x373a <LCD_INIT+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36e8:	6b a1       	ldd	r22, Y+35	; 0x23
    36ea:	7c a1       	ldd	r23, Y+36	; 0x24
    36ec:	8d a1       	ldd	r24, Y+37	; 0x25
    36ee:	9e a1       	ldd	r25, Y+38	; 0x26
    36f0:	20 e0       	ldi	r18, 0x00	; 0
    36f2:	30 e0       	ldi	r19, 0x00	; 0
    36f4:	40 e2       	ldi	r20, 0x20	; 32
    36f6:	51 e4       	ldi	r21, 0x41	; 65
    36f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36fc:	dc 01       	movw	r26, r24
    36fe:	cb 01       	movw	r24, r22
    3700:	bc 01       	movw	r22, r24
    3702:	cd 01       	movw	r24, r26
    3704:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3708:	dc 01       	movw	r26, r24
    370a:	cb 01       	movw	r24, r22
    370c:	9e 8f       	std	Y+30, r25	; 0x1e
    370e:	8d 8f       	std	Y+29, r24	; 0x1d
    3710:	0f c0       	rjmp	.+30     	; 0x3730 <LCD_INIT+0xd6>
    3712:	88 ec       	ldi	r24, 0xC8	; 200
    3714:	90 e0       	ldi	r25, 0x00	; 0
    3716:	9c 8f       	std	Y+28, r25	; 0x1c
    3718:	8b 8f       	std	Y+27, r24	; 0x1b
    371a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    371c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    371e:	01 97       	sbiw	r24, 0x01	; 1
    3720:	f1 f7       	brne	.-4      	; 0x371e <LCD_INIT+0xc4>
    3722:	9c 8f       	std	Y+28, r25	; 0x1c
    3724:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3726:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3728:	9e 8d       	ldd	r25, Y+30	; 0x1e
    372a:	01 97       	sbiw	r24, 0x01	; 1
    372c:	9e 8f       	std	Y+30, r25	; 0x1e
    372e:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3730:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3732:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3734:	00 97       	sbiw	r24, 0x00	; 0
    3736:	69 f7       	brne	.-38     	; 0x3712 <LCD_INIT+0xb8>
    3738:	14 c0       	rjmp	.+40     	; 0x3762 <LCD_INIT+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    373a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    373c:	78 a1       	ldd	r23, Y+32	; 0x20
    373e:	89 a1       	ldd	r24, Y+33	; 0x21
    3740:	9a a1       	ldd	r25, Y+34	; 0x22
    3742:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3746:	dc 01       	movw	r26, r24
    3748:	cb 01       	movw	r24, r22
    374a:	9e 8f       	std	Y+30, r25	; 0x1e
    374c:	8d 8f       	std	Y+29, r24	; 0x1d
    374e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3750:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3752:	9a 8f       	std	Y+26, r25	; 0x1a
    3754:	89 8f       	std	Y+25, r24	; 0x19
    3756:	89 8d       	ldd	r24, Y+25	; 0x19
    3758:	9a 8d       	ldd	r25, Y+26	; 0x1a
    375a:	01 97       	sbiw	r24, 0x01	; 1
    375c:	f1 f7       	brne	.-4      	; 0x375a <LCD_INIT+0x100>
    375e:	9a 8f       	std	Y+26, r25	; 0x1a
    3760:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(20);
	LCD_CMD(0x33);
    3762:	83 e3       	ldi	r24, 0x33	; 51
    3764:	0e 94 8a 1c 	call	0x3914	; 0x3914 <LCD_CMD>
    3768:	80 e0       	ldi	r24, 0x00	; 0
    376a:	90 e0       	ldi	r25, 0x00	; 0
    376c:	a8 ec       	ldi	r26, 0xC8	; 200
    376e:	b2 e4       	ldi	r27, 0x42	; 66
    3770:	8d 8b       	std	Y+21, r24	; 0x15
    3772:	9e 8b       	std	Y+22, r25	; 0x16
    3774:	af 8b       	std	Y+23, r26	; 0x17
    3776:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3778:	6d 89       	ldd	r22, Y+21	; 0x15
    377a:	7e 89       	ldd	r23, Y+22	; 0x16
    377c:	8f 89       	ldd	r24, Y+23	; 0x17
    377e:	98 8d       	ldd	r25, Y+24	; 0x18
    3780:	2b ea       	ldi	r18, 0xAB	; 171
    3782:	3a ea       	ldi	r19, 0xAA	; 170
    3784:	4a e2       	ldi	r20, 0x2A	; 42
    3786:	50 e4       	ldi	r21, 0x40	; 64
    3788:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    378c:	dc 01       	movw	r26, r24
    378e:	cb 01       	movw	r24, r22
    3790:	89 8b       	std	Y+17, r24	; 0x11
    3792:	9a 8b       	std	Y+18, r25	; 0x12
    3794:	ab 8b       	std	Y+19, r26	; 0x13
    3796:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3798:	69 89       	ldd	r22, Y+17	; 0x11
    379a:	7a 89       	ldd	r23, Y+18	; 0x12
    379c:	8b 89       	ldd	r24, Y+19	; 0x13
    379e:	9c 89       	ldd	r25, Y+20	; 0x14
    37a0:	20 e0       	ldi	r18, 0x00	; 0
    37a2:	30 e0       	ldi	r19, 0x00	; 0
    37a4:	40 e8       	ldi	r20, 0x80	; 128
    37a6:	5f e3       	ldi	r21, 0x3F	; 63
    37a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37ac:	88 23       	and	r24, r24
    37ae:	1c f4       	brge	.+6      	; 0x37b6 <LCD_INIT+0x15c>
		__ticks = 1;
    37b0:	81 e0       	ldi	r24, 0x01	; 1
    37b2:	88 8b       	std	Y+16, r24	; 0x10
    37b4:	91 c0       	rjmp	.+290    	; 0x38d8 <LCD_INIT+0x27e>
	else if (__tmp > 255)
    37b6:	69 89       	ldd	r22, Y+17	; 0x11
    37b8:	7a 89       	ldd	r23, Y+18	; 0x12
    37ba:	8b 89       	ldd	r24, Y+19	; 0x13
    37bc:	9c 89       	ldd	r25, Y+20	; 0x14
    37be:	20 e0       	ldi	r18, 0x00	; 0
    37c0:	30 e0       	ldi	r19, 0x00	; 0
    37c2:	4f e7       	ldi	r20, 0x7F	; 127
    37c4:	53 e4       	ldi	r21, 0x43	; 67
    37c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37ca:	18 16       	cp	r1, r24
    37cc:	0c f0       	brlt	.+2      	; 0x37d0 <LCD_INIT+0x176>
    37ce:	7b c0       	rjmp	.+246    	; 0x38c6 <LCD_INIT+0x26c>
	{
		_delay_ms(__us / 1000.0);
    37d0:	6d 89       	ldd	r22, Y+21	; 0x15
    37d2:	7e 89       	ldd	r23, Y+22	; 0x16
    37d4:	8f 89       	ldd	r24, Y+23	; 0x17
    37d6:	98 8d       	ldd	r25, Y+24	; 0x18
    37d8:	20 e0       	ldi	r18, 0x00	; 0
    37da:	30 e0       	ldi	r19, 0x00	; 0
    37dc:	4a e7       	ldi	r20, 0x7A	; 122
    37de:	54 e4       	ldi	r21, 0x44	; 68
    37e0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    37e4:	dc 01       	movw	r26, r24
    37e6:	cb 01       	movw	r24, r22
    37e8:	8c 87       	std	Y+12, r24	; 0x0c
    37ea:	9d 87       	std	Y+13, r25	; 0x0d
    37ec:	ae 87       	std	Y+14, r26	; 0x0e
    37ee:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37f0:	6c 85       	ldd	r22, Y+12	; 0x0c
    37f2:	7d 85       	ldd	r23, Y+13	; 0x0d
    37f4:	8e 85       	ldd	r24, Y+14	; 0x0e
    37f6:	9f 85       	ldd	r25, Y+15	; 0x0f
    37f8:	20 e0       	ldi	r18, 0x00	; 0
    37fa:	30 e0       	ldi	r19, 0x00	; 0
    37fc:	4a ef       	ldi	r20, 0xFA	; 250
    37fe:	54 e4       	ldi	r21, 0x44	; 68
    3800:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3804:	dc 01       	movw	r26, r24
    3806:	cb 01       	movw	r24, r22
    3808:	88 87       	std	Y+8, r24	; 0x08
    380a:	99 87       	std	Y+9, r25	; 0x09
    380c:	aa 87       	std	Y+10, r26	; 0x0a
    380e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3810:	68 85       	ldd	r22, Y+8	; 0x08
    3812:	79 85       	ldd	r23, Y+9	; 0x09
    3814:	8a 85       	ldd	r24, Y+10	; 0x0a
    3816:	9b 85       	ldd	r25, Y+11	; 0x0b
    3818:	20 e0       	ldi	r18, 0x00	; 0
    381a:	30 e0       	ldi	r19, 0x00	; 0
    381c:	40 e8       	ldi	r20, 0x80	; 128
    381e:	5f e3       	ldi	r21, 0x3F	; 63
    3820:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3824:	88 23       	and	r24, r24
    3826:	2c f4       	brge	.+10     	; 0x3832 <LCD_INIT+0x1d8>
		__ticks = 1;
    3828:	81 e0       	ldi	r24, 0x01	; 1
    382a:	90 e0       	ldi	r25, 0x00	; 0
    382c:	9f 83       	std	Y+7, r25	; 0x07
    382e:	8e 83       	std	Y+6, r24	; 0x06
    3830:	3f c0       	rjmp	.+126    	; 0x38b0 <LCD_INIT+0x256>
	else if (__tmp > 65535)
    3832:	68 85       	ldd	r22, Y+8	; 0x08
    3834:	79 85       	ldd	r23, Y+9	; 0x09
    3836:	8a 85       	ldd	r24, Y+10	; 0x0a
    3838:	9b 85       	ldd	r25, Y+11	; 0x0b
    383a:	20 e0       	ldi	r18, 0x00	; 0
    383c:	3f ef       	ldi	r19, 0xFF	; 255
    383e:	4f e7       	ldi	r20, 0x7F	; 127
    3840:	57 e4       	ldi	r21, 0x47	; 71
    3842:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3846:	18 16       	cp	r1, r24
    3848:	4c f5       	brge	.+82     	; 0x389c <LCD_INIT+0x242>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    384a:	6c 85       	ldd	r22, Y+12	; 0x0c
    384c:	7d 85       	ldd	r23, Y+13	; 0x0d
    384e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3850:	9f 85       	ldd	r25, Y+15	; 0x0f
    3852:	20 e0       	ldi	r18, 0x00	; 0
    3854:	30 e0       	ldi	r19, 0x00	; 0
    3856:	40 e2       	ldi	r20, 0x20	; 32
    3858:	51 e4       	ldi	r21, 0x41	; 65
    385a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    385e:	dc 01       	movw	r26, r24
    3860:	cb 01       	movw	r24, r22
    3862:	bc 01       	movw	r22, r24
    3864:	cd 01       	movw	r24, r26
    3866:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    386a:	dc 01       	movw	r26, r24
    386c:	cb 01       	movw	r24, r22
    386e:	9f 83       	std	Y+7, r25	; 0x07
    3870:	8e 83       	std	Y+6, r24	; 0x06
    3872:	0f c0       	rjmp	.+30     	; 0x3892 <LCD_INIT+0x238>
    3874:	88 ec       	ldi	r24, 0xC8	; 200
    3876:	90 e0       	ldi	r25, 0x00	; 0
    3878:	9d 83       	std	Y+5, r25	; 0x05
    387a:	8c 83       	std	Y+4, r24	; 0x04
    387c:	8c 81       	ldd	r24, Y+4	; 0x04
    387e:	9d 81       	ldd	r25, Y+5	; 0x05
    3880:	01 97       	sbiw	r24, 0x01	; 1
    3882:	f1 f7       	brne	.-4      	; 0x3880 <LCD_INIT+0x226>
    3884:	9d 83       	std	Y+5, r25	; 0x05
    3886:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3888:	8e 81       	ldd	r24, Y+6	; 0x06
    388a:	9f 81       	ldd	r25, Y+7	; 0x07
    388c:	01 97       	sbiw	r24, 0x01	; 1
    388e:	9f 83       	std	Y+7, r25	; 0x07
    3890:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3892:	8e 81       	ldd	r24, Y+6	; 0x06
    3894:	9f 81       	ldd	r25, Y+7	; 0x07
    3896:	00 97       	sbiw	r24, 0x00	; 0
    3898:	69 f7       	brne	.-38     	; 0x3874 <LCD_INIT+0x21a>
    389a:	24 c0       	rjmp	.+72     	; 0x38e4 <LCD_INIT+0x28a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    389c:	68 85       	ldd	r22, Y+8	; 0x08
    389e:	79 85       	ldd	r23, Y+9	; 0x09
    38a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    38a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    38a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38a8:	dc 01       	movw	r26, r24
    38aa:	cb 01       	movw	r24, r22
    38ac:	9f 83       	std	Y+7, r25	; 0x07
    38ae:	8e 83       	std	Y+6, r24	; 0x06
    38b0:	8e 81       	ldd	r24, Y+6	; 0x06
    38b2:	9f 81       	ldd	r25, Y+7	; 0x07
    38b4:	9b 83       	std	Y+3, r25	; 0x03
    38b6:	8a 83       	std	Y+2, r24	; 0x02
    38b8:	8a 81       	ldd	r24, Y+2	; 0x02
    38ba:	9b 81       	ldd	r25, Y+3	; 0x03
    38bc:	01 97       	sbiw	r24, 0x01	; 1
    38be:	f1 f7       	brne	.-4      	; 0x38bc <LCD_INIT+0x262>
    38c0:	9b 83       	std	Y+3, r25	; 0x03
    38c2:	8a 83       	std	Y+2, r24	; 0x02
    38c4:	0f c0       	rjmp	.+30     	; 0x38e4 <LCD_INIT+0x28a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    38c6:	69 89       	ldd	r22, Y+17	; 0x11
    38c8:	7a 89       	ldd	r23, Y+18	; 0x12
    38ca:	8b 89       	ldd	r24, Y+19	; 0x13
    38cc:	9c 89       	ldd	r25, Y+20	; 0x14
    38ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38d2:	dc 01       	movw	r26, r24
    38d4:	cb 01       	movw	r24, r22
    38d6:	88 8b       	std	Y+16, r24	; 0x10
    38d8:	88 89       	ldd	r24, Y+16	; 0x10
    38da:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    38dc:	89 81       	ldd	r24, Y+1	; 0x01
    38de:	8a 95       	dec	r24
    38e0:	f1 f7       	brne	.-4      	; 0x38de <LCD_INIT+0x284>
    38e2:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	LCD_CMD(0x32);
    38e4:	82 e3       	ldi	r24, 0x32	; 50
    38e6:	0e 94 8a 1c 	call	0x3914	; 0x3914 <LCD_CMD>
	LCD_CMD(0x28); // Set Function 4-bits, 2Lines, 5x8 display
    38ea:	88 e2       	ldi	r24, 0x28	; 40
    38ec:	0e 94 8a 1c 	call	0x3914	; 0x3914 <LCD_CMD>
	LCD_CMD(0x06); // Entry Mode I/D , SHIFT
    38f0:	86 e0       	ldi	r24, 0x06	; 6
    38f2:	0e 94 8a 1c 	call	0x3914	; 0x3914 <LCD_CMD>
	LCD_CMD(0x0C); // Display ON & Cursor off
    38f6:	8c e0       	ldi	r24, 0x0C	; 12
    38f8:	0e 94 8a 1c 	call	0x3914	; 0x3914 <LCD_CMD>
	LCD_CMD(0x01); // clear LCD
    38fc:	81 e0       	ldi	r24, 0x01	; 1
    38fe:	0e 94 8a 1c 	call	0x3914	; 0x3914 <LCD_CMD>
}
    3902:	a6 96       	adiw	r28, 0x26	; 38
    3904:	0f b6       	in	r0, 0x3f	; 63
    3906:	f8 94       	cli
    3908:	de bf       	out	0x3e, r29	; 62
    390a:	0f be       	out	0x3f, r0	; 63
    390c:	cd bf       	out	0x3d, r28	; 61
    390e:	cf 91       	pop	r28
    3910:	df 91       	pop	r29
    3912:	08 95       	ret

00003914 <LCD_CMD>:
void LCD_CMD(u8 CMD) {
    3914:	0f 93       	push	r16
    3916:	1f 93       	push	r17
    3918:	df 93       	push	r29
    391a:	cf 93       	push	r28
    391c:	cd b7       	in	r28, 0x3d	; 61
    391e:	de b7       	in	r29, 0x3e	; 62
    3920:	ce 54       	subi	r28, 0x4E	; 78
    3922:	d0 40       	sbci	r29, 0x00	; 0
    3924:	0f b6       	in	r0, 0x3f	; 63
    3926:	f8 94       	cli
    3928:	de bf       	out	0x3e, r29	; 62
    392a:	0f be       	out	0x3f, r0	; 63
    392c:	cd bf       	out	0x3d, r28	; 61
    392e:	fe 01       	movw	r30, r28
    3930:	e2 5b       	subi	r30, 0xB2	; 178
    3932:	ff 4f       	sbci	r31, 0xFF	; 255
    3934:	80 83       	st	Z, r24
	Write_Channel(LCD_RS, STD_LOW);
    3936:	89 e0       	ldi	r24, 0x09	; 9
    3938:	60 e0       	ldi	r22, 0x00	; 0
    393a:	0e 94 41 08 	call	0x1082	; 0x1082 <Write_Channel>

	u8 PORT_VAL = Read_PORT(LCD_DataPort);
    393e:	81 e0       	ldi	r24, 0x01	; 1
    3940:	0e 94 ef 09 	call	0x13de	; 0x13de <Read_PORT>
    3944:	fe 01       	movw	r30, r28
    3946:	e3 5b       	subi	r30, 0xB3	; 179
    3948:	ff 4f       	sbci	r31, 0xFF	; 255
    394a:	80 83       	st	Z, r24
	PORT_VAL = (PORT_VAL & 0x0F) | (CMD & 0xF0);
    394c:	fe 01       	movw	r30, r28
    394e:	e3 5b       	subi	r30, 0xB3	; 179
    3950:	ff 4f       	sbci	r31, 0xFF	; 255
    3952:	80 81       	ld	r24, Z
    3954:	98 2f       	mov	r25, r24
    3956:	9f 70       	andi	r25, 0x0F	; 15
    3958:	fe 01       	movw	r30, r28
    395a:	e2 5b       	subi	r30, 0xB2	; 178
    395c:	ff 4f       	sbci	r31, 0xFF	; 255
    395e:	80 81       	ld	r24, Z
    3960:	80 7f       	andi	r24, 0xF0	; 240
    3962:	89 2b       	or	r24, r25
    3964:	fe 01       	movw	r30, r28
    3966:	e3 5b       	subi	r30, 0xB3	; 179
    3968:	ff 4f       	sbci	r31, 0xFF	; 255
    396a:	80 83       	st	Z, r24
	Write_PORT(LCD_DataPort, PORT_VAL);
    396c:	fe 01       	movw	r30, r28
    396e:	e3 5b       	subi	r30, 0xB3	; 179
    3970:	ff 4f       	sbci	r31, 0xFF	; 255
    3972:	81 e0       	ldi	r24, 0x01	; 1
    3974:	60 81       	ld	r22, Z
    3976:	0e 94 ae 09 	call	0x135c	; 0x135c <Write_PORT>
	Write_Channel(LCD_E, STD_LOW);
    397a:	8b e0       	ldi	r24, 0x0B	; 11
    397c:	60 e0       	ldi	r22, 0x00	; 0
    397e:	0e 94 41 08 	call	0x1082	; 0x1082 <Write_Channel>
    3982:	fe 01       	movw	r30, r28
    3984:	e7 5b       	subi	r30, 0xB7	; 183
    3986:	ff 4f       	sbci	r31, 0xFF	; 255
    3988:	80 e0       	ldi	r24, 0x00	; 0
    398a:	90 e0       	ldi	r25, 0x00	; 0
    398c:	a8 ec       	ldi	r26, 0xC8	; 200
    398e:	b2 e4       	ldi	r27, 0x42	; 66
    3990:	80 83       	st	Z, r24
    3992:	91 83       	std	Z+1, r25	; 0x01
    3994:	a2 83       	std	Z+2, r26	; 0x02
    3996:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3998:	8e 01       	movw	r16, r28
    399a:	0b 5b       	subi	r16, 0xBB	; 187
    399c:	1f 4f       	sbci	r17, 0xFF	; 255
    399e:	fe 01       	movw	r30, r28
    39a0:	e7 5b       	subi	r30, 0xB7	; 183
    39a2:	ff 4f       	sbci	r31, 0xFF	; 255
    39a4:	60 81       	ld	r22, Z
    39a6:	71 81       	ldd	r23, Z+1	; 0x01
    39a8:	82 81       	ldd	r24, Z+2	; 0x02
    39aa:	93 81       	ldd	r25, Z+3	; 0x03
    39ac:	2b ea       	ldi	r18, 0xAB	; 171
    39ae:	3a ea       	ldi	r19, 0xAA	; 170
    39b0:	4a e2       	ldi	r20, 0x2A	; 42
    39b2:	50 e4       	ldi	r21, 0x40	; 64
    39b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39b8:	dc 01       	movw	r26, r24
    39ba:	cb 01       	movw	r24, r22
    39bc:	f8 01       	movw	r30, r16
    39be:	80 83       	st	Z, r24
    39c0:	91 83       	std	Z+1, r25	; 0x01
    39c2:	a2 83       	std	Z+2, r26	; 0x02
    39c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    39c6:	fe 01       	movw	r30, r28
    39c8:	eb 5b       	subi	r30, 0xBB	; 187
    39ca:	ff 4f       	sbci	r31, 0xFF	; 255
    39cc:	60 81       	ld	r22, Z
    39ce:	71 81       	ldd	r23, Z+1	; 0x01
    39d0:	82 81       	ldd	r24, Z+2	; 0x02
    39d2:	93 81       	ldd	r25, Z+3	; 0x03
    39d4:	20 e0       	ldi	r18, 0x00	; 0
    39d6:	30 e0       	ldi	r19, 0x00	; 0
    39d8:	40 e8       	ldi	r20, 0x80	; 128
    39da:	5f e3       	ldi	r21, 0x3F	; 63
    39dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39e0:	88 23       	and	r24, r24
    39e2:	34 f4       	brge	.+12     	; 0x39f0 <LCD_CMD+0xdc>
		__ticks = 1;
    39e4:	fe 01       	movw	r30, r28
    39e6:	ec 5b       	subi	r30, 0xBC	; 188
    39e8:	ff 4f       	sbci	r31, 0xFF	; 255
    39ea:	81 e0       	ldi	r24, 0x01	; 1
    39ec:	80 83       	st	Z, r24
    39ee:	a7 c0       	rjmp	.+334    	; 0x3b3e <LCD_CMD+0x22a>
	else if (__tmp > 255)
    39f0:	fe 01       	movw	r30, r28
    39f2:	eb 5b       	subi	r30, 0xBB	; 187
    39f4:	ff 4f       	sbci	r31, 0xFF	; 255
    39f6:	60 81       	ld	r22, Z
    39f8:	71 81       	ldd	r23, Z+1	; 0x01
    39fa:	82 81       	ldd	r24, Z+2	; 0x02
    39fc:	93 81       	ldd	r25, Z+3	; 0x03
    39fe:	20 e0       	ldi	r18, 0x00	; 0
    3a00:	30 e0       	ldi	r19, 0x00	; 0
    3a02:	4f e7       	ldi	r20, 0x7F	; 127
    3a04:	53 e4       	ldi	r21, 0x43	; 67
    3a06:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a0a:	18 16       	cp	r1, r24
    3a0c:	0c f0       	brlt	.+2      	; 0x3a10 <LCD_CMD+0xfc>
    3a0e:	87 c0       	rjmp	.+270    	; 0x3b1e <LCD_CMD+0x20a>
	{
		_delay_ms(__us / 1000.0);
    3a10:	fe 01       	movw	r30, r28
    3a12:	e7 5b       	subi	r30, 0xB7	; 183
    3a14:	ff 4f       	sbci	r31, 0xFF	; 255
    3a16:	60 81       	ld	r22, Z
    3a18:	71 81       	ldd	r23, Z+1	; 0x01
    3a1a:	82 81       	ldd	r24, Z+2	; 0x02
    3a1c:	93 81       	ldd	r25, Z+3	; 0x03
    3a1e:	20 e0       	ldi	r18, 0x00	; 0
    3a20:	30 e0       	ldi	r19, 0x00	; 0
    3a22:	4a e7       	ldi	r20, 0x7A	; 122
    3a24:	54 e4       	ldi	r21, 0x44	; 68
    3a26:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3a2a:	dc 01       	movw	r26, r24
    3a2c:	cb 01       	movw	r24, r22
    3a2e:	fe 01       	movw	r30, r28
    3a30:	e0 5c       	subi	r30, 0xC0	; 192
    3a32:	ff 4f       	sbci	r31, 0xFF	; 255
    3a34:	80 83       	st	Z, r24
    3a36:	91 83       	std	Z+1, r25	; 0x01
    3a38:	a2 83       	std	Z+2, r26	; 0x02
    3a3a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a3c:	fe 01       	movw	r30, r28
    3a3e:	e0 5c       	subi	r30, 0xC0	; 192
    3a40:	ff 4f       	sbci	r31, 0xFF	; 255
    3a42:	60 81       	ld	r22, Z
    3a44:	71 81       	ldd	r23, Z+1	; 0x01
    3a46:	82 81       	ldd	r24, Z+2	; 0x02
    3a48:	93 81       	ldd	r25, Z+3	; 0x03
    3a4a:	20 e0       	ldi	r18, 0x00	; 0
    3a4c:	30 e0       	ldi	r19, 0x00	; 0
    3a4e:	4a ef       	ldi	r20, 0xFA	; 250
    3a50:	54 e4       	ldi	r21, 0x44	; 68
    3a52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a56:	dc 01       	movw	r26, r24
    3a58:	cb 01       	movw	r24, r22
    3a5a:	8c af       	std	Y+60, r24	; 0x3c
    3a5c:	9d af       	std	Y+61, r25	; 0x3d
    3a5e:	ae af       	std	Y+62, r26	; 0x3e
    3a60:	bf af       	std	Y+63, r27	; 0x3f
	if (__tmp < 1.0)
    3a62:	6c ad       	ldd	r22, Y+60	; 0x3c
    3a64:	7d ad       	ldd	r23, Y+61	; 0x3d
    3a66:	8e ad       	ldd	r24, Y+62	; 0x3e
    3a68:	9f ad       	ldd	r25, Y+63	; 0x3f
    3a6a:	20 e0       	ldi	r18, 0x00	; 0
    3a6c:	30 e0       	ldi	r19, 0x00	; 0
    3a6e:	40 e8       	ldi	r20, 0x80	; 128
    3a70:	5f e3       	ldi	r21, 0x3F	; 63
    3a72:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a76:	88 23       	and	r24, r24
    3a78:	2c f4       	brge	.+10     	; 0x3a84 <LCD_CMD+0x170>
		__ticks = 1;
    3a7a:	81 e0       	ldi	r24, 0x01	; 1
    3a7c:	90 e0       	ldi	r25, 0x00	; 0
    3a7e:	9b af       	std	Y+59, r25	; 0x3b
    3a80:	8a af       	std	Y+58, r24	; 0x3a
    3a82:	42 c0       	rjmp	.+132    	; 0x3b08 <LCD_CMD+0x1f4>
	else if (__tmp > 65535)
    3a84:	6c ad       	ldd	r22, Y+60	; 0x3c
    3a86:	7d ad       	ldd	r23, Y+61	; 0x3d
    3a88:	8e ad       	ldd	r24, Y+62	; 0x3e
    3a8a:	9f ad       	ldd	r25, Y+63	; 0x3f
    3a8c:	20 e0       	ldi	r18, 0x00	; 0
    3a8e:	3f ef       	ldi	r19, 0xFF	; 255
    3a90:	4f e7       	ldi	r20, 0x7F	; 127
    3a92:	57 e4       	ldi	r21, 0x47	; 71
    3a94:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a98:	18 16       	cp	r1, r24
    3a9a:	64 f5       	brge	.+88     	; 0x3af4 <LCD_CMD+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a9c:	fe 01       	movw	r30, r28
    3a9e:	e0 5c       	subi	r30, 0xC0	; 192
    3aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa2:	60 81       	ld	r22, Z
    3aa4:	71 81       	ldd	r23, Z+1	; 0x01
    3aa6:	82 81       	ldd	r24, Z+2	; 0x02
    3aa8:	93 81       	ldd	r25, Z+3	; 0x03
    3aaa:	20 e0       	ldi	r18, 0x00	; 0
    3aac:	30 e0       	ldi	r19, 0x00	; 0
    3aae:	40 e2       	ldi	r20, 0x20	; 32
    3ab0:	51 e4       	ldi	r21, 0x41	; 65
    3ab2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ab6:	dc 01       	movw	r26, r24
    3ab8:	cb 01       	movw	r24, r22
    3aba:	bc 01       	movw	r22, r24
    3abc:	cd 01       	movw	r24, r26
    3abe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ac2:	dc 01       	movw	r26, r24
    3ac4:	cb 01       	movw	r24, r22
    3ac6:	9b af       	std	Y+59, r25	; 0x3b
    3ac8:	8a af       	std	Y+58, r24	; 0x3a
    3aca:	0f c0       	rjmp	.+30     	; 0x3aea <LCD_CMD+0x1d6>
    3acc:	88 ec       	ldi	r24, 0xC8	; 200
    3ace:	90 e0       	ldi	r25, 0x00	; 0
    3ad0:	99 af       	std	Y+57, r25	; 0x39
    3ad2:	88 af       	std	Y+56, r24	; 0x38
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3ad4:	88 ad       	ldd	r24, Y+56	; 0x38
    3ad6:	99 ad       	ldd	r25, Y+57	; 0x39
    3ad8:	01 97       	sbiw	r24, 0x01	; 1
    3ada:	f1 f7       	brne	.-4      	; 0x3ad8 <LCD_CMD+0x1c4>
    3adc:	99 af       	std	Y+57, r25	; 0x39
    3ade:	88 af       	std	Y+56, r24	; 0x38
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ae0:	8a ad       	ldd	r24, Y+58	; 0x3a
    3ae2:	9b ad       	ldd	r25, Y+59	; 0x3b
    3ae4:	01 97       	sbiw	r24, 0x01	; 1
    3ae6:	9b af       	std	Y+59, r25	; 0x3b
    3ae8:	8a af       	std	Y+58, r24	; 0x3a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3aea:	8a ad       	ldd	r24, Y+58	; 0x3a
    3aec:	9b ad       	ldd	r25, Y+59	; 0x3b
    3aee:	00 97       	sbiw	r24, 0x00	; 0
    3af0:	69 f7       	brne	.-38     	; 0x3acc <LCD_CMD+0x1b8>
    3af2:	2e c0       	rjmp	.+92     	; 0x3b50 <LCD_CMD+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3af4:	6c ad       	ldd	r22, Y+60	; 0x3c
    3af6:	7d ad       	ldd	r23, Y+61	; 0x3d
    3af8:	8e ad       	ldd	r24, Y+62	; 0x3e
    3afa:	9f ad       	ldd	r25, Y+63	; 0x3f
    3afc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b00:	dc 01       	movw	r26, r24
    3b02:	cb 01       	movw	r24, r22
    3b04:	9b af       	std	Y+59, r25	; 0x3b
    3b06:	8a af       	std	Y+58, r24	; 0x3a
    3b08:	8a ad       	ldd	r24, Y+58	; 0x3a
    3b0a:	9b ad       	ldd	r25, Y+59	; 0x3b
    3b0c:	9f ab       	std	Y+55, r25	; 0x37
    3b0e:	8e ab       	std	Y+54, r24	; 0x36
    3b10:	8e a9       	ldd	r24, Y+54	; 0x36
    3b12:	9f a9       	ldd	r25, Y+55	; 0x37
    3b14:	01 97       	sbiw	r24, 0x01	; 1
    3b16:	f1 f7       	brne	.-4      	; 0x3b14 <LCD_CMD+0x200>
    3b18:	9f ab       	std	Y+55, r25	; 0x37
    3b1a:	8e ab       	std	Y+54, r24	; 0x36
    3b1c:	19 c0       	rjmp	.+50     	; 0x3b50 <LCD_CMD+0x23c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3b1e:	8e 01       	movw	r16, r28
    3b20:	0c 5b       	subi	r16, 0xBC	; 188
    3b22:	1f 4f       	sbci	r17, 0xFF	; 255
    3b24:	fe 01       	movw	r30, r28
    3b26:	eb 5b       	subi	r30, 0xBB	; 187
    3b28:	ff 4f       	sbci	r31, 0xFF	; 255
    3b2a:	60 81       	ld	r22, Z
    3b2c:	71 81       	ldd	r23, Z+1	; 0x01
    3b2e:	82 81       	ldd	r24, Z+2	; 0x02
    3b30:	93 81       	ldd	r25, Z+3	; 0x03
    3b32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b36:	dc 01       	movw	r26, r24
    3b38:	cb 01       	movw	r24, r22
    3b3a:	f8 01       	movw	r30, r16
    3b3c:	80 83       	st	Z, r24
    3b3e:	fe 01       	movw	r30, r28
    3b40:	ec 5b       	subi	r30, 0xBC	; 188
    3b42:	ff 4f       	sbci	r31, 0xFF	; 255
    3b44:	80 81       	ld	r24, Z
    3b46:	8d ab       	std	Y+53, r24	; 0x35
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3b48:	8d a9       	ldd	r24, Y+53	; 0x35
    3b4a:	8a 95       	dec	r24
    3b4c:	f1 f7       	brne	.-4      	; 0x3b4a <LCD_CMD+0x236>
    3b4e:	8d ab       	std	Y+53, r24	; 0x35
	_delay_us(100);
	Write_Channel(LCD_E, STD_HIGH);
    3b50:	8b e0       	ldi	r24, 0x0B	; 11
    3b52:	61 e0       	ldi	r22, 0x01	; 1
    3b54:	0e 94 41 08 	call	0x1082	; 0x1082 <Write_Channel>
    3b58:	80 e0       	ldi	r24, 0x00	; 0
    3b5a:	90 e0       	ldi	r25, 0x00	; 0
    3b5c:	a0 ea       	ldi	r26, 0xA0	; 160
    3b5e:	b0 e4       	ldi	r27, 0x40	; 64
    3b60:	89 ab       	std	Y+49, r24	; 0x31
    3b62:	9a ab       	std	Y+50, r25	; 0x32
    3b64:	ab ab       	std	Y+51, r26	; 0x33
    3b66:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b68:	69 a9       	ldd	r22, Y+49	; 0x31
    3b6a:	7a a9       	ldd	r23, Y+50	; 0x32
    3b6c:	8b a9       	ldd	r24, Y+51	; 0x33
    3b6e:	9c a9       	ldd	r25, Y+52	; 0x34
    3b70:	20 e0       	ldi	r18, 0x00	; 0
    3b72:	30 e0       	ldi	r19, 0x00	; 0
    3b74:	4a ef       	ldi	r20, 0xFA	; 250
    3b76:	54 e4       	ldi	r21, 0x44	; 68
    3b78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b7c:	dc 01       	movw	r26, r24
    3b7e:	cb 01       	movw	r24, r22
    3b80:	8d a7       	std	Y+45, r24	; 0x2d
    3b82:	9e a7       	std	Y+46, r25	; 0x2e
    3b84:	af a7       	std	Y+47, r26	; 0x2f
    3b86:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    3b88:	6d a5       	ldd	r22, Y+45	; 0x2d
    3b8a:	7e a5       	ldd	r23, Y+46	; 0x2e
    3b8c:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b8e:	98 a9       	ldd	r25, Y+48	; 0x30
    3b90:	20 e0       	ldi	r18, 0x00	; 0
    3b92:	30 e0       	ldi	r19, 0x00	; 0
    3b94:	40 e8       	ldi	r20, 0x80	; 128
    3b96:	5f e3       	ldi	r21, 0x3F	; 63
    3b98:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b9c:	88 23       	and	r24, r24
    3b9e:	2c f4       	brge	.+10     	; 0x3baa <LCD_CMD+0x296>
		__ticks = 1;
    3ba0:	81 e0       	ldi	r24, 0x01	; 1
    3ba2:	90 e0       	ldi	r25, 0x00	; 0
    3ba4:	9c a7       	std	Y+44, r25	; 0x2c
    3ba6:	8b a7       	std	Y+43, r24	; 0x2b
    3ba8:	3f c0       	rjmp	.+126    	; 0x3c28 <LCD_CMD+0x314>
	else if (__tmp > 65535)
    3baa:	6d a5       	ldd	r22, Y+45	; 0x2d
    3bac:	7e a5       	ldd	r23, Y+46	; 0x2e
    3bae:	8f a5       	ldd	r24, Y+47	; 0x2f
    3bb0:	98 a9       	ldd	r25, Y+48	; 0x30
    3bb2:	20 e0       	ldi	r18, 0x00	; 0
    3bb4:	3f ef       	ldi	r19, 0xFF	; 255
    3bb6:	4f e7       	ldi	r20, 0x7F	; 127
    3bb8:	57 e4       	ldi	r21, 0x47	; 71
    3bba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bbe:	18 16       	cp	r1, r24
    3bc0:	4c f5       	brge	.+82     	; 0x3c14 <LCD_CMD+0x300>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bc2:	69 a9       	ldd	r22, Y+49	; 0x31
    3bc4:	7a a9       	ldd	r23, Y+50	; 0x32
    3bc6:	8b a9       	ldd	r24, Y+51	; 0x33
    3bc8:	9c a9       	ldd	r25, Y+52	; 0x34
    3bca:	20 e0       	ldi	r18, 0x00	; 0
    3bcc:	30 e0       	ldi	r19, 0x00	; 0
    3bce:	40 e2       	ldi	r20, 0x20	; 32
    3bd0:	51 e4       	ldi	r21, 0x41	; 65
    3bd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bd6:	dc 01       	movw	r26, r24
    3bd8:	cb 01       	movw	r24, r22
    3bda:	bc 01       	movw	r22, r24
    3bdc:	cd 01       	movw	r24, r26
    3bde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3be2:	dc 01       	movw	r26, r24
    3be4:	cb 01       	movw	r24, r22
    3be6:	9c a7       	std	Y+44, r25	; 0x2c
    3be8:	8b a7       	std	Y+43, r24	; 0x2b
    3bea:	0f c0       	rjmp	.+30     	; 0x3c0a <LCD_CMD+0x2f6>
    3bec:	88 ec       	ldi	r24, 0xC8	; 200
    3bee:	90 e0       	ldi	r25, 0x00	; 0
    3bf0:	9a a7       	std	Y+42, r25	; 0x2a
    3bf2:	89 a7       	std	Y+41, r24	; 0x29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3bf4:	89 a5       	ldd	r24, Y+41	; 0x29
    3bf6:	9a a5       	ldd	r25, Y+42	; 0x2a
    3bf8:	01 97       	sbiw	r24, 0x01	; 1
    3bfa:	f1 f7       	brne	.-4      	; 0x3bf8 <LCD_CMD+0x2e4>
    3bfc:	9a a7       	std	Y+42, r25	; 0x2a
    3bfe:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c00:	8b a5       	ldd	r24, Y+43	; 0x2b
    3c02:	9c a5       	ldd	r25, Y+44	; 0x2c
    3c04:	01 97       	sbiw	r24, 0x01	; 1
    3c06:	9c a7       	std	Y+44, r25	; 0x2c
    3c08:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c0a:	8b a5       	ldd	r24, Y+43	; 0x2b
    3c0c:	9c a5       	ldd	r25, Y+44	; 0x2c
    3c0e:	00 97       	sbiw	r24, 0x00	; 0
    3c10:	69 f7       	brne	.-38     	; 0x3bec <LCD_CMD+0x2d8>
    3c12:	14 c0       	rjmp	.+40     	; 0x3c3c <LCD_CMD+0x328>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c14:	6d a5       	ldd	r22, Y+45	; 0x2d
    3c16:	7e a5       	ldd	r23, Y+46	; 0x2e
    3c18:	8f a5       	ldd	r24, Y+47	; 0x2f
    3c1a:	98 a9       	ldd	r25, Y+48	; 0x30
    3c1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c20:	dc 01       	movw	r26, r24
    3c22:	cb 01       	movw	r24, r22
    3c24:	9c a7       	std	Y+44, r25	; 0x2c
    3c26:	8b a7       	std	Y+43, r24	; 0x2b
    3c28:	8b a5       	ldd	r24, Y+43	; 0x2b
    3c2a:	9c a5       	ldd	r25, Y+44	; 0x2c
    3c2c:	98 a7       	std	Y+40, r25	; 0x28
    3c2e:	8f a3       	std	Y+39, r24	; 0x27
    3c30:	8f a1       	ldd	r24, Y+39	; 0x27
    3c32:	98 a5       	ldd	r25, Y+40	; 0x28
    3c34:	01 97       	sbiw	r24, 0x01	; 1
    3c36:	f1 f7       	brne	.-4      	; 0x3c34 <LCD_CMD+0x320>
    3c38:	98 a7       	std	Y+40, r25	; 0x28
    3c3a:	8f a3       	std	Y+39, r24	; 0x27

	_delay_ms(5);

	PORT_VAL = Read_PORT(LCD_DataPort);
    3c3c:	81 e0       	ldi	r24, 0x01	; 1
    3c3e:	0e 94 ef 09 	call	0x13de	; 0x13de <Read_PORT>
    3c42:	fe 01       	movw	r30, r28
    3c44:	e3 5b       	subi	r30, 0xB3	; 179
    3c46:	ff 4f       	sbci	r31, 0xFF	; 255
    3c48:	80 83       	st	Z, r24
	PORT_VAL = (PORT_VAL & 0x0F) | (CMD << 4);
    3c4a:	fe 01       	movw	r30, r28
    3c4c:	e3 5b       	subi	r30, 0xB3	; 179
    3c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c50:	80 81       	ld	r24, Z
    3c52:	28 2f       	mov	r18, r24
    3c54:	2f 70       	andi	r18, 0x0F	; 15
    3c56:	fe 01       	movw	r30, r28
    3c58:	e2 5b       	subi	r30, 0xB2	; 178
    3c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c5c:	80 81       	ld	r24, Z
    3c5e:	88 2f       	mov	r24, r24
    3c60:	90 e0       	ldi	r25, 0x00	; 0
    3c62:	82 95       	swap	r24
    3c64:	92 95       	swap	r25
    3c66:	90 7f       	andi	r25, 0xF0	; 240
    3c68:	98 27       	eor	r25, r24
    3c6a:	80 7f       	andi	r24, 0xF0	; 240
    3c6c:	98 27       	eor	r25, r24
    3c6e:	82 2b       	or	r24, r18
    3c70:	fe 01       	movw	r30, r28
    3c72:	e3 5b       	subi	r30, 0xB3	; 179
    3c74:	ff 4f       	sbci	r31, 0xFF	; 255
    3c76:	80 83       	st	Z, r24
	Write_PORT(LCD_DataPort, PORT_VAL);
    3c78:	fe 01       	movw	r30, r28
    3c7a:	e3 5b       	subi	r30, 0xB3	; 179
    3c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c7e:	81 e0       	ldi	r24, 0x01	; 1
    3c80:	60 81       	ld	r22, Z
    3c82:	0e 94 ae 09 	call	0x135c	; 0x135c <Write_PORT>
	Write_Channel(LCD_E, STD_LOW);
    3c86:	8b e0       	ldi	r24, 0x0B	; 11
    3c88:	60 e0       	ldi	r22, 0x00	; 0
    3c8a:	0e 94 41 08 	call	0x1082	; 0x1082 <Write_Channel>
    3c8e:	80 e0       	ldi	r24, 0x00	; 0
    3c90:	90 e0       	ldi	r25, 0x00	; 0
    3c92:	a8 ec       	ldi	r26, 0xC8	; 200
    3c94:	b2 e4       	ldi	r27, 0x42	; 66
    3c96:	8b a3       	std	Y+35, r24	; 0x23
    3c98:	9c a3       	std	Y+36, r25	; 0x24
    3c9a:	ad a3       	std	Y+37, r26	; 0x25
    3c9c:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3c9e:	6b a1       	ldd	r22, Y+35	; 0x23
    3ca0:	7c a1       	ldd	r23, Y+36	; 0x24
    3ca2:	8d a1       	ldd	r24, Y+37	; 0x25
    3ca4:	9e a1       	ldd	r25, Y+38	; 0x26
    3ca6:	2b ea       	ldi	r18, 0xAB	; 171
    3ca8:	3a ea       	ldi	r19, 0xAA	; 170
    3caa:	4a e2       	ldi	r20, 0x2A	; 42
    3cac:	50 e4       	ldi	r21, 0x40	; 64
    3cae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cb2:	dc 01       	movw	r26, r24
    3cb4:	cb 01       	movw	r24, r22
    3cb6:	8f 8f       	std	Y+31, r24	; 0x1f
    3cb8:	98 a3       	std	Y+32, r25	; 0x20
    3cba:	a9 a3       	std	Y+33, r26	; 0x21
    3cbc:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    3cbe:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3cc0:	78 a1       	ldd	r23, Y+32	; 0x20
    3cc2:	89 a1       	ldd	r24, Y+33	; 0x21
    3cc4:	9a a1       	ldd	r25, Y+34	; 0x22
    3cc6:	20 e0       	ldi	r18, 0x00	; 0
    3cc8:	30 e0       	ldi	r19, 0x00	; 0
    3cca:	40 e8       	ldi	r20, 0x80	; 128
    3ccc:	5f e3       	ldi	r21, 0x3F	; 63
    3cce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3cd2:	88 23       	and	r24, r24
    3cd4:	1c f4       	brge	.+6      	; 0x3cdc <LCD_CMD+0x3c8>
		__ticks = 1;
    3cd6:	81 e0       	ldi	r24, 0x01	; 1
    3cd8:	8e 8f       	std	Y+30, r24	; 0x1e
    3cda:	91 c0       	rjmp	.+290    	; 0x3dfe <LCD_CMD+0x4ea>
	else if (__tmp > 255)
    3cdc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3cde:	78 a1       	ldd	r23, Y+32	; 0x20
    3ce0:	89 a1       	ldd	r24, Y+33	; 0x21
    3ce2:	9a a1       	ldd	r25, Y+34	; 0x22
    3ce4:	20 e0       	ldi	r18, 0x00	; 0
    3ce6:	30 e0       	ldi	r19, 0x00	; 0
    3ce8:	4f e7       	ldi	r20, 0x7F	; 127
    3cea:	53 e4       	ldi	r21, 0x43	; 67
    3cec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3cf0:	18 16       	cp	r1, r24
    3cf2:	0c f0       	brlt	.+2      	; 0x3cf6 <LCD_CMD+0x3e2>
    3cf4:	7b c0       	rjmp	.+246    	; 0x3dec <LCD_CMD+0x4d8>
	{
		_delay_ms(__us / 1000.0);
    3cf6:	6b a1       	ldd	r22, Y+35	; 0x23
    3cf8:	7c a1       	ldd	r23, Y+36	; 0x24
    3cfa:	8d a1       	ldd	r24, Y+37	; 0x25
    3cfc:	9e a1       	ldd	r25, Y+38	; 0x26
    3cfe:	20 e0       	ldi	r18, 0x00	; 0
    3d00:	30 e0       	ldi	r19, 0x00	; 0
    3d02:	4a e7       	ldi	r20, 0x7A	; 122
    3d04:	54 e4       	ldi	r21, 0x44	; 68
    3d06:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3d0a:	dc 01       	movw	r26, r24
    3d0c:	cb 01       	movw	r24, r22
    3d0e:	8a 8f       	std	Y+26, r24	; 0x1a
    3d10:	9b 8f       	std	Y+27, r25	; 0x1b
    3d12:	ac 8f       	std	Y+28, r26	; 0x1c
    3d14:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d16:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3d18:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3d1a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3d1c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3d1e:	20 e0       	ldi	r18, 0x00	; 0
    3d20:	30 e0       	ldi	r19, 0x00	; 0
    3d22:	4a ef       	ldi	r20, 0xFA	; 250
    3d24:	54 e4       	ldi	r21, 0x44	; 68
    3d26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d2a:	dc 01       	movw	r26, r24
    3d2c:	cb 01       	movw	r24, r22
    3d2e:	8e 8b       	std	Y+22, r24	; 0x16
    3d30:	9f 8b       	std	Y+23, r25	; 0x17
    3d32:	a8 8f       	std	Y+24, r26	; 0x18
    3d34:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    3d36:	6e 89       	ldd	r22, Y+22	; 0x16
    3d38:	7f 89       	ldd	r23, Y+23	; 0x17
    3d3a:	88 8d       	ldd	r24, Y+24	; 0x18
    3d3c:	99 8d       	ldd	r25, Y+25	; 0x19
    3d3e:	20 e0       	ldi	r18, 0x00	; 0
    3d40:	30 e0       	ldi	r19, 0x00	; 0
    3d42:	40 e8       	ldi	r20, 0x80	; 128
    3d44:	5f e3       	ldi	r21, 0x3F	; 63
    3d46:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d4a:	88 23       	and	r24, r24
    3d4c:	2c f4       	brge	.+10     	; 0x3d58 <LCD_CMD+0x444>
		__ticks = 1;
    3d4e:	81 e0       	ldi	r24, 0x01	; 1
    3d50:	90 e0       	ldi	r25, 0x00	; 0
    3d52:	9d 8b       	std	Y+21, r25	; 0x15
    3d54:	8c 8b       	std	Y+20, r24	; 0x14
    3d56:	3f c0       	rjmp	.+126    	; 0x3dd6 <LCD_CMD+0x4c2>
	else if (__tmp > 65535)
    3d58:	6e 89       	ldd	r22, Y+22	; 0x16
    3d5a:	7f 89       	ldd	r23, Y+23	; 0x17
    3d5c:	88 8d       	ldd	r24, Y+24	; 0x18
    3d5e:	99 8d       	ldd	r25, Y+25	; 0x19
    3d60:	20 e0       	ldi	r18, 0x00	; 0
    3d62:	3f ef       	ldi	r19, 0xFF	; 255
    3d64:	4f e7       	ldi	r20, 0x7F	; 127
    3d66:	57 e4       	ldi	r21, 0x47	; 71
    3d68:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d6c:	18 16       	cp	r1, r24
    3d6e:	4c f5       	brge	.+82     	; 0x3dc2 <LCD_CMD+0x4ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d70:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3d72:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3d74:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3d76:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3d78:	20 e0       	ldi	r18, 0x00	; 0
    3d7a:	30 e0       	ldi	r19, 0x00	; 0
    3d7c:	40 e2       	ldi	r20, 0x20	; 32
    3d7e:	51 e4       	ldi	r21, 0x41	; 65
    3d80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d84:	dc 01       	movw	r26, r24
    3d86:	cb 01       	movw	r24, r22
    3d88:	bc 01       	movw	r22, r24
    3d8a:	cd 01       	movw	r24, r26
    3d8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d90:	dc 01       	movw	r26, r24
    3d92:	cb 01       	movw	r24, r22
    3d94:	9d 8b       	std	Y+21, r25	; 0x15
    3d96:	8c 8b       	std	Y+20, r24	; 0x14
    3d98:	0f c0       	rjmp	.+30     	; 0x3db8 <LCD_CMD+0x4a4>
    3d9a:	88 ec       	ldi	r24, 0xC8	; 200
    3d9c:	90 e0       	ldi	r25, 0x00	; 0
    3d9e:	9b 8b       	std	Y+19, r25	; 0x13
    3da0:	8a 8b       	std	Y+18, r24	; 0x12
    3da2:	8a 89       	ldd	r24, Y+18	; 0x12
    3da4:	9b 89       	ldd	r25, Y+19	; 0x13
    3da6:	01 97       	sbiw	r24, 0x01	; 1
    3da8:	f1 f7       	brne	.-4      	; 0x3da6 <LCD_CMD+0x492>
    3daa:	9b 8b       	std	Y+19, r25	; 0x13
    3dac:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dae:	8c 89       	ldd	r24, Y+20	; 0x14
    3db0:	9d 89       	ldd	r25, Y+21	; 0x15
    3db2:	01 97       	sbiw	r24, 0x01	; 1
    3db4:	9d 8b       	std	Y+21, r25	; 0x15
    3db6:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3db8:	8c 89       	ldd	r24, Y+20	; 0x14
    3dba:	9d 89       	ldd	r25, Y+21	; 0x15
    3dbc:	00 97       	sbiw	r24, 0x00	; 0
    3dbe:	69 f7       	brne	.-38     	; 0x3d9a <LCD_CMD+0x486>
    3dc0:	24 c0       	rjmp	.+72     	; 0x3e0a <LCD_CMD+0x4f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dc2:	6e 89       	ldd	r22, Y+22	; 0x16
    3dc4:	7f 89       	ldd	r23, Y+23	; 0x17
    3dc6:	88 8d       	ldd	r24, Y+24	; 0x18
    3dc8:	99 8d       	ldd	r25, Y+25	; 0x19
    3dca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dce:	dc 01       	movw	r26, r24
    3dd0:	cb 01       	movw	r24, r22
    3dd2:	9d 8b       	std	Y+21, r25	; 0x15
    3dd4:	8c 8b       	std	Y+20, r24	; 0x14
    3dd6:	8c 89       	ldd	r24, Y+20	; 0x14
    3dd8:	9d 89       	ldd	r25, Y+21	; 0x15
    3dda:	99 8b       	std	Y+17, r25	; 0x11
    3ddc:	88 8b       	std	Y+16, r24	; 0x10
    3dde:	88 89       	ldd	r24, Y+16	; 0x10
    3de0:	99 89       	ldd	r25, Y+17	; 0x11
    3de2:	01 97       	sbiw	r24, 0x01	; 1
    3de4:	f1 f7       	brne	.-4      	; 0x3de2 <LCD_CMD+0x4ce>
    3de6:	99 8b       	std	Y+17, r25	; 0x11
    3de8:	88 8b       	std	Y+16, r24	; 0x10
    3dea:	0f c0       	rjmp	.+30     	; 0x3e0a <LCD_CMD+0x4f6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3dec:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3dee:	78 a1       	ldd	r23, Y+32	; 0x20
    3df0:	89 a1       	ldd	r24, Y+33	; 0x21
    3df2:	9a a1       	ldd	r25, Y+34	; 0x22
    3df4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3df8:	dc 01       	movw	r26, r24
    3dfa:	cb 01       	movw	r24, r22
    3dfc:	8e 8f       	std	Y+30, r24	; 0x1e
    3dfe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3e00:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3e02:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e04:	8a 95       	dec	r24
    3e06:	f1 f7       	brne	.-4      	; 0x3e04 <LCD_CMD+0x4f0>
    3e08:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(100);
	Write_Channel(LCD_E, STD_HIGH);
    3e0a:	8b e0       	ldi	r24, 0x0B	; 11
    3e0c:	61 e0       	ldi	r22, 0x01	; 1
    3e0e:	0e 94 41 08 	call	0x1082	; 0x1082 <Write_Channel>
    3e12:	80 e0       	ldi	r24, 0x00	; 0
    3e14:	90 e0       	ldi	r25, 0x00	; 0
    3e16:	a0 e0       	ldi	r26, 0x00	; 0
    3e18:	b0 e4       	ldi	r27, 0x40	; 64
    3e1a:	8b 87       	std	Y+11, r24	; 0x0b
    3e1c:	9c 87       	std	Y+12, r25	; 0x0c
    3e1e:	ad 87       	std	Y+13, r26	; 0x0d
    3e20:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e22:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e24:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e26:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e28:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e2a:	20 e0       	ldi	r18, 0x00	; 0
    3e2c:	30 e0       	ldi	r19, 0x00	; 0
    3e2e:	4a ef       	ldi	r20, 0xFA	; 250
    3e30:	54 e4       	ldi	r21, 0x44	; 68
    3e32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e36:	dc 01       	movw	r26, r24
    3e38:	cb 01       	movw	r24, r22
    3e3a:	8f 83       	std	Y+7, r24	; 0x07
    3e3c:	98 87       	std	Y+8, r25	; 0x08
    3e3e:	a9 87       	std	Y+9, r26	; 0x09
    3e40:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e42:	6f 81       	ldd	r22, Y+7	; 0x07
    3e44:	78 85       	ldd	r23, Y+8	; 0x08
    3e46:	89 85       	ldd	r24, Y+9	; 0x09
    3e48:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e4a:	20 e0       	ldi	r18, 0x00	; 0
    3e4c:	30 e0       	ldi	r19, 0x00	; 0
    3e4e:	40 e8       	ldi	r20, 0x80	; 128
    3e50:	5f e3       	ldi	r21, 0x3F	; 63
    3e52:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e56:	88 23       	and	r24, r24
    3e58:	2c f4       	brge	.+10     	; 0x3e64 <LCD_CMD+0x550>
		__ticks = 1;
    3e5a:	81 e0       	ldi	r24, 0x01	; 1
    3e5c:	90 e0       	ldi	r25, 0x00	; 0
    3e5e:	9e 83       	std	Y+6, r25	; 0x06
    3e60:	8d 83       	std	Y+5, r24	; 0x05
    3e62:	3f c0       	rjmp	.+126    	; 0x3ee2 <LCD_CMD+0x5ce>
	else if (__tmp > 65535)
    3e64:	6f 81       	ldd	r22, Y+7	; 0x07
    3e66:	78 85       	ldd	r23, Y+8	; 0x08
    3e68:	89 85       	ldd	r24, Y+9	; 0x09
    3e6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e6c:	20 e0       	ldi	r18, 0x00	; 0
    3e6e:	3f ef       	ldi	r19, 0xFF	; 255
    3e70:	4f e7       	ldi	r20, 0x7F	; 127
    3e72:	57 e4       	ldi	r21, 0x47	; 71
    3e74:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e78:	18 16       	cp	r1, r24
    3e7a:	4c f5       	brge	.+82     	; 0x3ece <LCD_CMD+0x5ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e80:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e82:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e84:	20 e0       	ldi	r18, 0x00	; 0
    3e86:	30 e0       	ldi	r19, 0x00	; 0
    3e88:	40 e2       	ldi	r20, 0x20	; 32
    3e8a:	51 e4       	ldi	r21, 0x41	; 65
    3e8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e90:	dc 01       	movw	r26, r24
    3e92:	cb 01       	movw	r24, r22
    3e94:	bc 01       	movw	r22, r24
    3e96:	cd 01       	movw	r24, r26
    3e98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e9c:	dc 01       	movw	r26, r24
    3e9e:	cb 01       	movw	r24, r22
    3ea0:	9e 83       	std	Y+6, r25	; 0x06
    3ea2:	8d 83       	std	Y+5, r24	; 0x05
    3ea4:	0f c0       	rjmp	.+30     	; 0x3ec4 <LCD_CMD+0x5b0>
    3ea6:	88 ec       	ldi	r24, 0xC8	; 200
    3ea8:	90 e0       	ldi	r25, 0x00	; 0
    3eaa:	9c 83       	std	Y+4, r25	; 0x04
    3eac:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3eae:	8b 81       	ldd	r24, Y+3	; 0x03
    3eb0:	9c 81       	ldd	r25, Y+4	; 0x04
    3eb2:	01 97       	sbiw	r24, 0x01	; 1
    3eb4:	f1 f7       	brne	.-4      	; 0x3eb2 <LCD_CMD+0x59e>
    3eb6:	9c 83       	std	Y+4, r25	; 0x04
    3eb8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3eba:	8d 81       	ldd	r24, Y+5	; 0x05
    3ebc:	9e 81       	ldd	r25, Y+6	; 0x06
    3ebe:	01 97       	sbiw	r24, 0x01	; 1
    3ec0:	9e 83       	std	Y+6, r25	; 0x06
    3ec2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ec4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ec6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ec8:	00 97       	sbiw	r24, 0x00	; 0
    3eca:	69 f7       	brne	.-38     	; 0x3ea6 <LCD_CMD+0x592>
    3ecc:	14 c0       	rjmp	.+40     	; 0x3ef6 <LCD_CMD+0x5e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ece:	6f 81       	ldd	r22, Y+7	; 0x07
    3ed0:	78 85       	ldd	r23, Y+8	; 0x08
    3ed2:	89 85       	ldd	r24, Y+9	; 0x09
    3ed4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ed6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eda:	dc 01       	movw	r26, r24
    3edc:	cb 01       	movw	r24, r22
    3ede:	9e 83       	std	Y+6, r25	; 0x06
    3ee0:	8d 83       	std	Y+5, r24	; 0x05
    3ee2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ee4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ee6:	9a 83       	std	Y+2, r25	; 0x02
    3ee8:	89 83       	std	Y+1, r24	; 0x01
    3eea:	89 81       	ldd	r24, Y+1	; 0x01
    3eec:	9a 81       	ldd	r25, Y+2	; 0x02
    3eee:	01 97       	sbiw	r24, 0x01	; 1
    3ef0:	f1 f7       	brne	.-4      	; 0x3eee <LCD_CMD+0x5da>
    3ef2:	9a 83       	std	Y+2, r25	; 0x02
    3ef4:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);
}
    3ef6:	c2 5b       	subi	r28, 0xB2	; 178
    3ef8:	df 4f       	sbci	r29, 0xFF	; 255
    3efa:	0f b6       	in	r0, 0x3f	; 63
    3efc:	f8 94       	cli
    3efe:	de bf       	out	0x3e, r29	; 62
    3f00:	0f be       	out	0x3f, r0	; 63
    3f02:	cd bf       	out	0x3d, r28	; 61
    3f04:	cf 91       	pop	r28
    3f06:	df 91       	pop	r29
    3f08:	1f 91       	pop	r17
    3f0a:	0f 91       	pop	r16
    3f0c:	08 95       	ret

00003f0e <LCD_CHAR>:
void LCD_CHAR(s8 DATA) {
    3f0e:	0f 93       	push	r16
    3f10:	1f 93       	push	r17
    3f12:	df 93       	push	r29
    3f14:	cf 93       	push	r28
    3f16:	cd b7       	in	r28, 0x3d	; 61
    3f18:	de b7       	in	r29, 0x3e	; 62
    3f1a:	ce 54       	subi	r28, 0x4E	; 78
    3f1c:	d0 40       	sbci	r29, 0x00	; 0
    3f1e:	0f b6       	in	r0, 0x3f	; 63
    3f20:	f8 94       	cli
    3f22:	de bf       	out	0x3e, r29	; 62
    3f24:	0f be       	out	0x3f, r0	; 63
    3f26:	cd bf       	out	0x3d, r28	; 61
    3f28:	fe 01       	movw	r30, r28
    3f2a:	e2 5b       	subi	r30, 0xB2	; 178
    3f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f2e:	80 83       	st	Z, r24
	Write_Channel(LCD_RS, STD_HIGH);
    3f30:	89 e0       	ldi	r24, 0x09	; 9
    3f32:	61 e0       	ldi	r22, 0x01	; 1
    3f34:	0e 94 41 08 	call	0x1082	; 0x1082 <Write_Channel>

	u8 PORT_VAL = Read_PORT(LCD_DataPort);
    3f38:	81 e0       	ldi	r24, 0x01	; 1
    3f3a:	0e 94 ef 09 	call	0x13de	; 0x13de <Read_PORT>
    3f3e:	fe 01       	movw	r30, r28
    3f40:	e3 5b       	subi	r30, 0xB3	; 179
    3f42:	ff 4f       	sbci	r31, 0xFF	; 255
    3f44:	80 83       	st	Z, r24
	PORT_VAL = (PORT_VAL & 0x0F) | (DATA & 0xF0);
    3f46:	fe 01       	movw	r30, r28
    3f48:	e3 5b       	subi	r30, 0xB3	; 179
    3f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f4c:	80 81       	ld	r24, Z
    3f4e:	98 2f       	mov	r25, r24
    3f50:	9f 70       	andi	r25, 0x0F	; 15
    3f52:	fe 01       	movw	r30, r28
    3f54:	e2 5b       	subi	r30, 0xB2	; 178
    3f56:	ff 4f       	sbci	r31, 0xFF	; 255
    3f58:	80 81       	ld	r24, Z
    3f5a:	80 7f       	andi	r24, 0xF0	; 240
    3f5c:	89 2b       	or	r24, r25
    3f5e:	fe 01       	movw	r30, r28
    3f60:	e3 5b       	subi	r30, 0xB3	; 179
    3f62:	ff 4f       	sbci	r31, 0xFF	; 255
    3f64:	80 83       	st	Z, r24
	Write_PORT(LCD_DataPort, PORT_VAL);
    3f66:	fe 01       	movw	r30, r28
    3f68:	e3 5b       	subi	r30, 0xB3	; 179
    3f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f6c:	81 e0       	ldi	r24, 0x01	; 1
    3f6e:	60 81       	ld	r22, Z
    3f70:	0e 94 ae 09 	call	0x135c	; 0x135c <Write_PORT>
	Write_Channel(LCD_E, STD_LOW);
    3f74:	8b e0       	ldi	r24, 0x0B	; 11
    3f76:	60 e0       	ldi	r22, 0x00	; 0
    3f78:	0e 94 41 08 	call	0x1082	; 0x1082 <Write_Channel>
    3f7c:	fe 01       	movw	r30, r28
    3f7e:	e7 5b       	subi	r30, 0xB7	; 183
    3f80:	ff 4f       	sbci	r31, 0xFF	; 255
    3f82:	80 e0       	ldi	r24, 0x00	; 0
    3f84:	90 e0       	ldi	r25, 0x00	; 0
    3f86:	a8 ec       	ldi	r26, 0xC8	; 200
    3f88:	b2 e4       	ldi	r27, 0x42	; 66
    3f8a:	80 83       	st	Z, r24
    3f8c:	91 83       	std	Z+1, r25	; 0x01
    3f8e:	a2 83       	std	Z+2, r26	; 0x02
    3f90:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3f92:	8e 01       	movw	r16, r28
    3f94:	0b 5b       	subi	r16, 0xBB	; 187
    3f96:	1f 4f       	sbci	r17, 0xFF	; 255
    3f98:	fe 01       	movw	r30, r28
    3f9a:	e7 5b       	subi	r30, 0xB7	; 183
    3f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f9e:	60 81       	ld	r22, Z
    3fa0:	71 81       	ldd	r23, Z+1	; 0x01
    3fa2:	82 81       	ldd	r24, Z+2	; 0x02
    3fa4:	93 81       	ldd	r25, Z+3	; 0x03
    3fa6:	2b ea       	ldi	r18, 0xAB	; 171
    3fa8:	3a ea       	ldi	r19, 0xAA	; 170
    3faa:	4a e2       	ldi	r20, 0x2A	; 42
    3fac:	50 e4       	ldi	r21, 0x40	; 64
    3fae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fb2:	dc 01       	movw	r26, r24
    3fb4:	cb 01       	movw	r24, r22
    3fb6:	f8 01       	movw	r30, r16
    3fb8:	80 83       	st	Z, r24
    3fba:	91 83       	std	Z+1, r25	; 0x01
    3fbc:	a2 83       	std	Z+2, r26	; 0x02
    3fbe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3fc0:	fe 01       	movw	r30, r28
    3fc2:	eb 5b       	subi	r30, 0xBB	; 187
    3fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc6:	60 81       	ld	r22, Z
    3fc8:	71 81       	ldd	r23, Z+1	; 0x01
    3fca:	82 81       	ldd	r24, Z+2	; 0x02
    3fcc:	93 81       	ldd	r25, Z+3	; 0x03
    3fce:	20 e0       	ldi	r18, 0x00	; 0
    3fd0:	30 e0       	ldi	r19, 0x00	; 0
    3fd2:	40 e8       	ldi	r20, 0x80	; 128
    3fd4:	5f e3       	ldi	r21, 0x3F	; 63
    3fd6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3fda:	88 23       	and	r24, r24
    3fdc:	34 f4       	brge	.+12     	; 0x3fea <LCD_CHAR+0xdc>
		__ticks = 1;
    3fde:	fe 01       	movw	r30, r28
    3fe0:	ec 5b       	subi	r30, 0xBC	; 188
    3fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe4:	81 e0       	ldi	r24, 0x01	; 1
    3fe6:	80 83       	st	Z, r24
    3fe8:	a7 c0       	rjmp	.+334    	; 0x4138 <LCD_CHAR+0x22a>
	else if (__tmp > 255)
    3fea:	fe 01       	movw	r30, r28
    3fec:	eb 5b       	subi	r30, 0xBB	; 187
    3fee:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff0:	60 81       	ld	r22, Z
    3ff2:	71 81       	ldd	r23, Z+1	; 0x01
    3ff4:	82 81       	ldd	r24, Z+2	; 0x02
    3ff6:	93 81       	ldd	r25, Z+3	; 0x03
    3ff8:	20 e0       	ldi	r18, 0x00	; 0
    3ffa:	30 e0       	ldi	r19, 0x00	; 0
    3ffc:	4f e7       	ldi	r20, 0x7F	; 127
    3ffe:	53 e4       	ldi	r21, 0x43	; 67
    4000:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4004:	18 16       	cp	r1, r24
    4006:	0c f0       	brlt	.+2      	; 0x400a <LCD_CHAR+0xfc>
    4008:	87 c0       	rjmp	.+270    	; 0x4118 <LCD_CHAR+0x20a>
	{
		_delay_ms(__us / 1000.0);
    400a:	fe 01       	movw	r30, r28
    400c:	e7 5b       	subi	r30, 0xB7	; 183
    400e:	ff 4f       	sbci	r31, 0xFF	; 255
    4010:	60 81       	ld	r22, Z
    4012:	71 81       	ldd	r23, Z+1	; 0x01
    4014:	82 81       	ldd	r24, Z+2	; 0x02
    4016:	93 81       	ldd	r25, Z+3	; 0x03
    4018:	20 e0       	ldi	r18, 0x00	; 0
    401a:	30 e0       	ldi	r19, 0x00	; 0
    401c:	4a e7       	ldi	r20, 0x7A	; 122
    401e:	54 e4       	ldi	r21, 0x44	; 68
    4020:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4024:	dc 01       	movw	r26, r24
    4026:	cb 01       	movw	r24, r22
    4028:	fe 01       	movw	r30, r28
    402a:	e0 5c       	subi	r30, 0xC0	; 192
    402c:	ff 4f       	sbci	r31, 0xFF	; 255
    402e:	80 83       	st	Z, r24
    4030:	91 83       	std	Z+1, r25	; 0x01
    4032:	a2 83       	std	Z+2, r26	; 0x02
    4034:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4036:	fe 01       	movw	r30, r28
    4038:	e0 5c       	subi	r30, 0xC0	; 192
    403a:	ff 4f       	sbci	r31, 0xFF	; 255
    403c:	60 81       	ld	r22, Z
    403e:	71 81       	ldd	r23, Z+1	; 0x01
    4040:	82 81       	ldd	r24, Z+2	; 0x02
    4042:	93 81       	ldd	r25, Z+3	; 0x03
    4044:	20 e0       	ldi	r18, 0x00	; 0
    4046:	30 e0       	ldi	r19, 0x00	; 0
    4048:	4a ef       	ldi	r20, 0xFA	; 250
    404a:	54 e4       	ldi	r21, 0x44	; 68
    404c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4050:	dc 01       	movw	r26, r24
    4052:	cb 01       	movw	r24, r22
    4054:	8c af       	std	Y+60, r24	; 0x3c
    4056:	9d af       	std	Y+61, r25	; 0x3d
    4058:	ae af       	std	Y+62, r26	; 0x3e
    405a:	bf af       	std	Y+63, r27	; 0x3f
	if (__tmp < 1.0)
    405c:	6c ad       	ldd	r22, Y+60	; 0x3c
    405e:	7d ad       	ldd	r23, Y+61	; 0x3d
    4060:	8e ad       	ldd	r24, Y+62	; 0x3e
    4062:	9f ad       	ldd	r25, Y+63	; 0x3f
    4064:	20 e0       	ldi	r18, 0x00	; 0
    4066:	30 e0       	ldi	r19, 0x00	; 0
    4068:	40 e8       	ldi	r20, 0x80	; 128
    406a:	5f e3       	ldi	r21, 0x3F	; 63
    406c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4070:	88 23       	and	r24, r24
    4072:	2c f4       	brge	.+10     	; 0x407e <LCD_CHAR+0x170>
		__ticks = 1;
    4074:	81 e0       	ldi	r24, 0x01	; 1
    4076:	90 e0       	ldi	r25, 0x00	; 0
    4078:	9b af       	std	Y+59, r25	; 0x3b
    407a:	8a af       	std	Y+58, r24	; 0x3a
    407c:	42 c0       	rjmp	.+132    	; 0x4102 <LCD_CHAR+0x1f4>
	else if (__tmp > 65535)
    407e:	6c ad       	ldd	r22, Y+60	; 0x3c
    4080:	7d ad       	ldd	r23, Y+61	; 0x3d
    4082:	8e ad       	ldd	r24, Y+62	; 0x3e
    4084:	9f ad       	ldd	r25, Y+63	; 0x3f
    4086:	20 e0       	ldi	r18, 0x00	; 0
    4088:	3f ef       	ldi	r19, 0xFF	; 255
    408a:	4f e7       	ldi	r20, 0x7F	; 127
    408c:	57 e4       	ldi	r21, 0x47	; 71
    408e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4092:	18 16       	cp	r1, r24
    4094:	64 f5       	brge	.+88     	; 0x40ee <LCD_CHAR+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4096:	fe 01       	movw	r30, r28
    4098:	e0 5c       	subi	r30, 0xC0	; 192
    409a:	ff 4f       	sbci	r31, 0xFF	; 255
    409c:	60 81       	ld	r22, Z
    409e:	71 81       	ldd	r23, Z+1	; 0x01
    40a0:	82 81       	ldd	r24, Z+2	; 0x02
    40a2:	93 81       	ldd	r25, Z+3	; 0x03
    40a4:	20 e0       	ldi	r18, 0x00	; 0
    40a6:	30 e0       	ldi	r19, 0x00	; 0
    40a8:	40 e2       	ldi	r20, 0x20	; 32
    40aa:	51 e4       	ldi	r21, 0x41	; 65
    40ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40b0:	dc 01       	movw	r26, r24
    40b2:	cb 01       	movw	r24, r22
    40b4:	bc 01       	movw	r22, r24
    40b6:	cd 01       	movw	r24, r26
    40b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40bc:	dc 01       	movw	r26, r24
    40be:	cb 01       	movw	r24, r22
    40c0:	9b af       	std	Y+59, r25	; 0x3b
    40c2:	8a af       	std	Y+58, r24	; 0x3a
    40c4:	0f c0       	rjmp	.+30     	; 0x40e4 <LCD_CHAR+0x1d6>
    40c6:	88 ec       	ldi	r24, 0xC8	; 200
    40c8:	90 e0       	ldi	r25, 0x00	; 0
    40ca:	99 af       	std	Y+57, r25	; 0x39
    40cc:	88 af       	std	Y+56, r24	; 0x38
    40ce:	88 ad       	ldd	r24, Y+56	; 0x38
    40d0:	99 ad       	ldd	r25, Y+57	; 0x39
    40d2:	01 97       	sbiw	r24, 0x01	; 1
    40d4:	f1 f7       	brne	.-4      	; 0x40d2 <LCD_CHAR+0x1c4>
    40d6:	99 af       	std	Y+57, r25	; 0x39
    40d8:	88 af       	std	Y+56, r24	; 0x38
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40da:	8a ad       	ldd	r24, Y+58	; 0x3a
    40dc:	9b ad       	ldd	r25, Y+59	; 0x3b
    40de:	01 97       	sbiw	r24, 0x01	; 1
    40e0:	9b af       	std	Y+59, r25	; 0x3b
    40e2:	8a af       	std	Y+58, r24	; 0x3a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40e4:	8a ad       	ldd	r24, Y+58	; 0x3a
    40e6:	9b ad       	ldd	r25, Y+59	; 0x3b
    40e8:	00 97       	sbiw	r24, 0x00	; 0
    40ea:	69 f7       	brne	.-38     	; 0x40c6 <LCD_CHAR+0x1b8>
    40ec:	2e c0       	rjmp	.+92     	; 0x414a <LCD_CHAR+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40ee:	6c ad       	ldd	r22, Y+60	; 0x3c
    40f0:	7d ad       	ldd	r23, Y+61	; 0x3d
    40f2:	8e ad       	ldd	r24, Y+62	; 0x3e
    40f4:	9f ad       	ldd	r25, Y+63	; 0x3f
    40f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40fa:	dc 01       	movw	r26, r24
    40fc:	cb 01       	movw	r24, r22
    40fe:	9b af       	std	Y+59, r25	; 0x3b
    4100:	8a af       	std	Y+58, r24	; 0x3a
    4102:	8a ad       	ldd	r24, Y+58	; 0x3a
    4104:	9b ad       	ldd	r25, Y+59	; 0x3b
    4106:	9f ab       	std	Y+55, r25	; 0x37
    4108:	8e ab       	std	Y+54, r24	; 0x36
    410a:	8e a9       	ldd	r24, Y+54	; 0x36
    410c:	9f a9       	ldd	r25, Y+55	; 0x37
    410e:	01 97       	sbiw	r24, 0x01	; 1
    4110:	f1 f7       	brne	.-4      	; 0x410e <LCD_CHAR+0x200>
    4112:	9f ab       	std	Y+55, r25	; 0x37
    4114:	8e ab       	std	Y+54, r24	; 0x36
    4116:	19 c0       	rjmp	.+50     	; 0x414a <LCD_CHAR+0x23c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4118:	8e 01       	movw	r16, r28
    411a:	0c 5b       	subi	r16, 0xBC	; 188
    411c:	1f 4f       	sbci	r17, 0xFF	; 255
    411e:	fe 01       	movw	r30, r28
    4120:	eb 5b       	subi	r30, 0xBB	; 187
    4122:	ff 4f       	sbci	r31, 0xFF	; 255
    4124:	60 81       	ld	r22, Z
    4126:	71 81       	ldd	r23, Z+1	; 0x01
    4128:	82 81       	ldd	r24, Z+2	; 0x02
    412a:	93 81       	ldd	r25, Z+3	; 0x03
    412c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4130:	dc 01       	movw	r26, r24
    4132:	cb 01       	movw	r24, r22
    4134:	f8 01       	movw	r30, r16
    4136:	80 83       	st	Z, r24
    4138:	fe 01       	movw	r30, r28
    413a:	ec 5b       	subi	r30, 0xBC	; 188
    413c:	ff 4f       	sbci	r31, 0xFF	; 255
    413e:	80 81       	ld	r24, Z
    4140:	8d ab       	std	Y+53, r24	; 0x35
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4142:	8d a9       	ldd	r24, Y+53	; 0x35
    4144:	8a 95       	dec	r24
    4146:	f1 f7       	brne	.-4      	; 0x4144 <LCD_CHAR+0x236>
    4148:	8d ab       	std	Y+53, r24	; 0x35
	_delay_us(100);
	Write_Channel(LCD_E, STD_HIGH);
    414a:	8b e0       	ldi	r24, 0x0B	; 11
    414c:	61 e0       	ldi	r22, 0x01	; 1
    414e:	0e 94 41 08 	call	0x1082	; 0x1082 <Write_Channel>
    4152:	80 e0       	ldi	r24, 0x00	; 0
    4154:	90 e0       	ldi	r25, 0x00	; 0
    4156:	a0 ea       	ldi	r26, 0xA0	; 160
    4158:	b0 e4       	ldi	r27, 0x40	; 64
    415a:	89 ab       	std	Y+49, r24	; 0x31
    415c:	9a ab       	std	Y+50, r25	; 0x32
    415e:	ab ab       	std	Y+51, r26	; 0x33
    4160:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4162:	69 a9       	ldd	r22, Y+49	; 0x31
    4164:	7a a9       	ldd	r23, Y+50	; 0x32
    4166:	8b a9       	ldd	r24, Y+51	; 0x33
    4168:	9c a9       	ldd	r25, Y+52	; 0x34
    416a:	20 e0       	ldi	r18, 0x00	; 0
    416c:	30 e0       	ldi	r19, 0x00	; 0
    416e:	4a ef       	ldi	r20, 0xFA	; 250
    4170:	54 e4       	ldi	r21, 0x44	; 68
    4172:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4176:	dc 01       	movw	r26, r24
    4178:	cb 01       	movw	r24, r22
    417a:	8d a7       	std	Y+45, r24	; 0x2d
    417c:	9e a7       	std	Y+46, r25	; 0x2e
    417e:	af a7       	std	Y+47, r26	; 0x2f
    4180:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    4182:	6d a5       	ldd	r22, Y+45	; 0x2d
    4184:	7e a5       	ldd	r23, Y+46	; 0x2e
    4186:	8f a5       	ldd	r24, Y+47	; 0x2f
    4188:	98 a9       	ldd	r25, Y+48	; 0x30
    418a:	20 e0       	ldi	r18, 0x00	; 0
    418c:	30 e0       	ldi	r19, 0x00	; 0
    418e:	40 e8       	ldi	r20, 0x80	; 128
    4190:	5f e3       	ldi	r21, 0x3F	; 63
    4192:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4196:	88 23       	and	r24, r24
    4198:	2c f4       	brge	.+10     	; 0x41a4 <LCD_CHAR+0x296>
		__ticks = 1;
    419a:	81 e0       	ldi	r24, 0x01	; 1
    419c:	90 e0       	ldi	r25, 0x00	; 0
    419e:	9c a7       	std	Y+44, r25	; 0x2c
    41a0:	8b a7       	std	Y+43, r24	; 0x2b
    41a2:	3f c0       	rjmp	.+126    	; 0x4222 <LCD_CHAR+0x314>
	else if (__tmp > 65535)
    41a4:	6d a5       	ldd	r22, Y+45	; 0x2d
    41a6:	7e a5       	ldd	r23, Y+46	; 0x2e
    41a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    41aa:	98 a9       	ldd	r25, Y+48	; 0x30
    41ac:	20 e0       	ldi	r18, 0x00	; 0
    41ae:	3f ef       	ldi	r19, 0xFF	; 255
    41b0:	4f e7       	ldi	r20, 0x7F	; 127
    41b2:	57 e4       	ldi	r21, 0x47	; 71
    41b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41b8:	18 16       	cp	r1, r24
    41ba:	4c f5       	brge	.+82     	; 0x420e <LCD_CHAR+0x300>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41bc:	69 a9       	ldd	r22, Y+49	; 0x31
    41be:	7a a9       	ldd	r23, Y+50	; 0x32
    41c0:	8b a9       	ldd	r24, Y+51	; 0x33
    41c2:	9c a9       	ldd	r25, Y+52	; 0x34
    41c4:	20 e0       	ldi	r18, 0x00	; 0
    41c6:	30 e0       	ldi	r19, 0x00	; 0
    41c8:	40 e2       	ldi	r20, 0x20	; 32
    41ca:	51 e4       	ldi	r21, 0x41	; 65
    41cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41d0:	dc 01       	movw	r26, r24
    41d2:	cb 01       	movw	r24, r22
    41d4:	bc 01       	movw	r22, r24
    41d6:	cd 01       	movw	r24, r26
    41d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41dc:	dc 01       	movw	r26, r24
    41de:	cb 01       	movw	r24, r22
    41e0:	9c a7       	std	Y+44, r25	; 0x2c
    41e2:	8b a7       	std	Y+43, r24	; 0x2b
    41e4:	0f c0       	rjmp	.+30     	; 0x4204 <LCD_CHAR+0x2f6>
    41e6:	88 ec       	ldi	r24, 0xC8	; 200
    41e8:	90 e0       	ldi	r25, 0x00	; 0
    41ea:	9a a7       	std	Y+42, r25	; 0x2a
    41ec:	89 a7       	std	Y+41, r24	; 0x29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    41ee:	89 a5       	ldd	r24, Y+41	; 0x29
    41f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    41f2:	01 97       	sbiw	r24, 0x01	; 1
    41f4:	f1 f7       	brne	.-4      	; 0x41f2 <LCD_CHAR+0x2e4>
    41f6:	9a a7       	std	Y+42, r25	; 0x2a
    41f8:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    41fc:	9c a5       	ldd	r25, Y+44	; 0x2c
    41fe:	01 97       	sbiw	r24, 0x01	; 1
    4200:	9c a7       	std	Y+44, r25	; 0x2c
    4202:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4204:	8b a5       	ldd	r24, Y+43	; 0x2b
    4206:	9c a5       	ldd	r25, Y+44	; 0x2c
    4208:	00 97       	sbiw	r24, 0x00	; 0
    420a:	69 f7       	brne	.-38     	; 0x41e6 <LCD_CHAR+0x2d8>
    420c:	14 c0       	rjmp	.+40     	; 0x4236 <LCD_CHAR+0x328>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    420e:	6d a5       	ldd	r22, Y+45	; 0x2d
    4210:	7e a5       	ldd	r23, Y+46	; 0x2e
    4212:	8f a5       	ldd	r24, Y+47	; 0x2f
    4214:	98 a9       	ldd	r25, Y+48	; 0x30
    4216:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    421a:	dc 01       	movw	r26, r24
    421c:	cb 01       	movw	r24, r22
    421e:	9c a7       	std	Y+44, r25	; 0x2c
    4220:	8b a7       	std	Y+43, r24	; 0x2b
    4222:	8b a5       	ldd	r24, Y+43	; 0x2b
    4224:	9c a5       	ldd	r25, Y+44	; 0x2c
    4226:	98 a7       	std	Y+40, r25	; 0x28
    4228:	8f a3       	std	Y+39, r24	; 0x27
    422a:	8f a1       	ldd	r24, Y+39	; 0x27
    422c:	98 a5       	ldd	r25, Y+40	; 0x28
    422e:	01 97       	sbiw	r24, 0x01	; 1
    4230:	f1 f7       	brne	.-4      	; 0x422e <LCD_CHAR+0x320>
    4232:	98 a7       	std	Y+40, r25	; 0x28
    4234:	8f a3       	std	Y+39, r24	; 0x27

	_delay_ms(5);

	PORT_VAL = Read_PORT(LCD_DataPort);
    4236:	81 e0       	ldi	r24, 0x01	; 1
    4238:	0e 94 ef 09 	call	0x13de	; 0x13de <Read_PORT>
    423c:	fe 01       	movw	r30, r28
    423e:	e3 5b       	subi	r30, 0xB3	; 179
    4240:	ff 4f       	sbci	r31, 0xFF	; 255
    4242:	80 83       	st	Z, r24
	PORT_VAL = (PORT_VAL & 0x0F) | (DATA << 4);
    4244:	fe 01       	movw	r30, r28
    4246:	e3 5b       	subi	r30, 0xB3	; 179
    4248:	ff 4f       	sbci	r31, 0xFF	; 255
    424a:	80 81       	ld	r24, Z
    424c:	28 2f       	mov	r18, r24
    424e:	2f 70       	andi	r18, 0x0F	; 15
    4250:	fe 01       	movw	r30, r28
    4252:	e2 5b       	subi	r30, 0xB2	; 178
    4254:	ff 4f       	sbci	r31, 0xFF	; 255
    4256:	80 81       	ld	r24, Z
    4258:	99 27       	eor	r25, r25
    425a:	87 fd       	sbrc	r24, 7
    425c:	90 95       	com	r25
    425e:	82 95       	swap	r24
    4260:	92 95       	swap	r25
    4262:	90 7f       	andi	r25, 0xF0	; 240
    4264:	98 27       	eor	r25, r24
    4266:	80 7f       	andi	r24, 0xF0	; 240
    4268:	98 27       	eor	r25, r24
    426a:	82 2b       	or	r24, r18
    426c:	fe 01       	movw	r30, r28
    426e:	e3 5b       	subi	r30, 0xB3	; 179
    4270:	ff 4f       	sbci	r31, 0xFF	; 255
    4272:	80 83       	st	Z, r24
	Write_PORT(LCD_DataPort, PORT_VAL);
    4274:	fe 01       	movw	r30, r28
    4276:	e3 5b       	subi	r30, 0xB3	; 179
    4278:	ff 4f       	sbci	r31, 0xFF	; 255
    427a:	81 e0       	ldi	r24, 0x01	; 1
    427c:	60 81       	ld	r22, Z
    427e:	0e 94 ae 09 	call	0x135c	; 0x135c <Write_PORT>
	Write_Channel(LCD_E, STD_LOW);
    4282:	8b e0       	ldi	r24, 0x0B	; 11
    4284:	60 e0       	ldi	r22, 0x00	; 0
    4286:	0e 94 41 08 	call	0x1082	; 0x1082 <Write_Channel>
    428a:	80 e0       	ldi	r24, 0x00	; 0
    428c:	90 e0       	ldi	r25, 0x00	; 0
    428e:	a8 ec       	ldi	r26, 0xC8	; 200
    4290:	b2 e4       	ldi	r27, 0x42	; 66
    4292:	8b a3       	std	Y+35, r24	; 0x23
    4294:	9c a3       	std	Y+36, r25	; 0x24
    4296:	ad a3       	std	Y+37, r26	; 0x25
    4298:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    429a:	6b a1       	ldd	r22, Y+35	; 0x23
    429c:	7c a1       	ldd	r23, Y+36	; 0x24
    429e:	8d a1       	ldd	r24, Y+37	; 0x25
    42a0:	9e a1       	ldd	r25, Y+38	; 0x26
    42a2:	2b ea       	ldi	r18, 0xAB	; 171
    42a4:	3a ea       	ldi	r19, 0xAA	; 170
    42a6:	4a e2       	ldi	r20, 0x2A	; 42
    42a8:	50 e4       	ldi	r21, 0x40	; 64
    42aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42ae:	dc 01       	movw	r26, r24
    42b0:	cb 01       	movw	r24, r22
    42b2:	8f 8f       	std	Y+31, r24	; 0x1f
    42b4:	98 a3       	std	Y+32, r25	; 0x20
    42b6:	a9 a3       	std	Y+33, r26	; 0x21
    42b8:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    42ba:	6f 8d       	ldd	r22, Y+31	; 0x1f
    42bc:	78 a1       	ldd	r23, Y+32	; 0x20
    42be:	89 a1       	ldd	r24, Y+33	; 0x21
    42c0:	9a a1       	ldd	r25, Y+34	; 0x22
    42c2:	20 e0       	ldi	r18, 0x00	; 0
    42c4:	30 e0       	ldi	r19, 0x00	; 0
    42c6:	40 e8       	ldi	r20, 0x80	; 128
    42c8:	5f e3       	ldi	r21, 0x3F	; 63
    42ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    42ce:	88 23       	and	r24, r24
    42d0:	1c f4       	brge	.+6      	; 0x42d8 <LCD_CHAR+0x3ca>
		__ticks = 1;
    42d2:	81 e0       	ldi	r24, 0x01	; 1
    42d4:	8e 8f       	std	Y+30, r24	; 0x1e
    42d6:	91 c0       	rjmp	.+290    	; 0x43fa <LCD_CHAR+0x4ec>
	else if (__tmp > 255)
    42d8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    42da:	78 a1       	ldd	r23, Y+32	; 0x20
    42dc:	89 a1       	ldd	r24, Y+33	; 0x21
    42de:	9a a1       	ldd	r25, Y+34	; 0x22
    42e0:	20 e0       	ldi	r18, 0x00	; 0
    42e2:	30 e0       	ldi	r19, 0x00	; 0
    42e4:	4f e7       	ldi	r20, 0x7F	; 127
    42e6:	53 e4       	ldi	r21, 0x43	; 67
    42e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    42ec:	18 16       	cp	r1, r24
    42ee:	0c f0       	brlt	.+2      	; 0x42f2 <LCD_CHAR+0x3e4>
    42f0:	7b c0       	rjmp	.+246    	; 0x43e8 <LCD_CHAR+0x4da>
	{
		_delay_ms(__us / 1000.0);
    42f2:	6b a1       	ldd	r22, Y+35	; 0x23
    42f4:	7c a1       	ldd	r23, Y+36	; 0x24
    42f6:	8d a1       	ldd	r24, Y+37	; 0x25
    42f8:	9e a1       	ldd	r25, Y+38	; 0x26
    42fa:	20 e0       	ldi	r18, 0x00	; 0
    42fc:	30 e0       	ldi	r19, 0x00	; 0
    42fe:	4a e7       	ldi	r20, 0x7A	; 122
    4300:	54 e4       	ldi	r21, 0x44	; 68
    4302:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4306:	dc 01       	movw	r26, r24
    4308:	cb 01       	movw	r24, r22
    430a:	8a 8f       	std	Y+26, r24	; 0x1a
    430c:	9b 8f       	std	Y+27, r25	; 0x1b
    430e:	ac 8f       	std	Y+28, r26	; 0x1c
    4310:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4312:	6a 8d       	ldd	r22, Y+26	; 0x1a
    4314:	7b 8d       	ldd	r23, Y+27	; 0x1b
    4316:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4318:	9d 8d       	ldd	r25, Y+29	; 0x1d
    431a:	20 e0       	ldi	r18, 0x00	; 0
    431c:	30 e0       	ldi	r19, 0x00	; 0
    431e:	4a ef       	ldi	r20, 0xFA	; 250
    4320:	54 e4       	ldi	r21, 0x44	; 68
    4322:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4326:	dc 01       	movw	r26, r24
    4328:	cb 01       	movw	r24, r22
    432a:	8e 8b       	std	Y+22, r24	; 0x16
    432c:	9f 8b       	std	Y+23, r25	; 0x17
    432e:	a8 8f       	std	Y+24, r26	; 0x18
    4330:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    4332:	6e 89       	ldd	r22, Y+22	; 0x16
    4334:	7f 89       	ldd	r23, Y+23	; 0x17
    4336:	88 8d       	ldd	r24, Y+24	; 0x18
    4338:	99 8d       	ldd	r25, Y+25	; 0x19
    433a:	20 e0       	ldi	r18, 0x00	; 0
    433c:	30 e0       	ldi	r19, 0x00	; 0
    433e:	40 e8       	ldi	r20, 0x80	; 128
    4340:	5f e3       	ldi	r21, 0x3F	; 63
    4342:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4346:	88 23       	and	r24, r24
    4348:	2c f4       	brge	.+10     	; 0x4354 <LCD_CHAR+0x446>
		__ticks = 1;
    434a:	81 e0       	ldi	r24, 0x01	; 1
    434c:	90 e0       	ldi	r25, 0x00	; 0
    434e:	9d 8b       	std	Y+21, r25	; 0x15
    4350:	8c 8b       	std	Y+20, r24	; 0x14
    4352:	3f c0       	rjmp	.+126    	; 0x43d2 <LCD_CHAR+0x4c4>
	else if (__tmp > 65535)
    4354:	6e 89       	ldd	r22, Y+22	; 0x16
    4356:	7f 89       	ldd	r23, Y+23	; 0x17
    4358:	88 8d       	ldd	r24, Y+24	; 0x18
    435a:	99 8d       	ldd	r25, Y+25	; 0x19
    435c:	20 e0       	ldi	r18, 0x00	; 0
    435e:	3f ef       	ldi	r19, 0xFF	; 255
    4360:	4f e7       	ldi	r20, 0x7F	; 127
    4362:	57 e4       	ldi	r21, 0x47	; 71
    4364:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4368:	18 16       	cp	r1, r24
    436a:	4c f5       	brge	.+82     	; 0x43be <LCD_CHAR+0x4b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    436c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    436e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    4370:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4372:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4374:	20 e0       	ldi	r18, 0x00	; 0
    4376:	30 e0       	ldi	r19, 0x00	; 0
    4378:	40 e2       	ldi	r20, 0x20	; 32
    437a:	51 e4       	ldi	r21, 0x41	; 65
    437c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4380:	dc 01       	movw	r26, r24
    4382:	cb 01       	movw	r24, r22
    4384:	bc 01       	movw	r22, r24
    4386:	cd 01       	movw	r24, r26
    4388:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    438c:	dc 01       	movw	r26, r24
    438e:	cb 01       	movw	r24, r22
    4390:	9d 8b       	std	Y+21, r25	; 0x15
    4392:	8c 8b       	std	Y+20, r24	; 0x14
    4394:	0f c0       	rjmp	.+30     	; 0x43b4 <LCD_CHAR+0x4a6>
    4396:	88 ec       	ldi	r24, 0xC8	; 200
    4398:	90 e0       	ldi	r25, 0x00	; 0
    439a:	9b 8b       	std	Y+19, r25	; 0x13
    439c:	8a 8b       	std	Y+18, r24	; 0x12
    439e:	8a 89       	ldd	r24, Y+18	; 0x12
    43a0:	9b 89       	ldd	r25, Y+19	; 0x13
    43a2:	01 97       	sbiw	r24, 0x01	; 1
    43a4:	f1 f7       	brne	.-4      	; 0x43a2 <LCD_CHAR+0x494>
    43a6:	9b 8b       	std	Y+19, r25	; 0x13
    43a8:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43aa:	8c 89       	ldd	r24, Y+20	; 0x14
    43ac:	9d 89       	ldd	r25, Y+21	; 0x15
    43ae:	01 97       	sbiw	r24, 0x01	; 1
    43b0:	9d 8b       	std	Y+21, r25	; 0x15
    43b2:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43b4:	8c 89       	ldd	r24, Y+20	; 0x14
    43b6:	9d 89       	ldd	r25, Y+21	; 0x15
    43b8:	00 97       	sbiw	r24, 0x00	; 0
    43ba:	69 f7       	brne	.-38     	; 0x4396 <LCD_CHAR+0x488>
    43bc:	24 c0       	rjmp	.+72     	; 0x4406 <LCD_CHAR+0x4f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43be:	6e 89       	ldd	r22, Y+22	; 0x16
    43c0:	7f 89       	ldd	r23, Y+23	; 0x17
    43c2:	88 8d       	ldd	r24, Y+24	; 0x18
    43c4:	99 8d       	ldd	r25, Y+25	; 0x19
    43c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43ca:	dc 01       	movw	r26, r24
    43cc:	cb 01       	movw	r24, r22
    43ce:	9d 8b       	std	Y+21, r25	; 0x15
    43d0:	8c 8b       	std	Y+20, r24	; 0x14
    43d2:	8c 89       	ldd	r24, Y+20	; 0x14
    43d4:	9d 89       	ldd	r25, Y+21	; 0x15
    43d6:	99 8b       	std	Y+17, r25	; 0x11
    43d8:	88 8b       	std	Y+16, r24	; 0x10
    43da:	88 89       	ldd	r24, Y+16	; 0x10
    43dc:	99 89       	ldd	r25, Y+17	; 0x11
    43de:	01 97       	sbiw	r24, 0x01	; 1
    43e0:	f1 f7       	brne	.-4      	; 0x43de <LCD_CHAR+0x4d0>
    43e2:	99 8b       	std	Y+17, r25	; 0x11
    43e4:	88 8b       	std	Y+16, r24	; 0x10
    43e6:	0f c0       	rjmp	.+30     	; 0x4406 <LCD_CHAR+0x4f8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    43e8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    43ea:	78 a1       	ldd	r23, Y+32	; 0x20
    43ec:	89 a1       	ldd	r24, Y+33	; 0x21
    43ee:	9a a1       	ldd	r25, Y+34	; 0x22
    43f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43f4:	dc 01       	movw	r26, r24
    43f6:	cb 01       	movw	r24, r22
    43f8:	8e 8f       	std	Y+30, r24	; 0x1e
    43fa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    43fc:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    43fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    4400:	8a 95       	dec	r24
    4402:	f1 f7       	brne	.-4      	; 0x4400 <LCD_CHAR+0x4f2>
    4404:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(100);
	Write_Channel(LCD_E, STD_HIGH);
    4406:	8b e0       	ldi	r24, 0x0B	; 11
    4408:	61 e0       	ldi	r22, 0x01	; 1
    440a:	0e 94 41 08 	call	0x1082	; 0x1082 <Write_Channel>
    440e:	80 e0       	ldi	r24, 0x00	; 0
    4410:	90 e0       	ldi	r25, 0x00	; 0
    4412:	a0 e0       	ldi	r26, 0x00	; 0
    4414:	b0 e4       	ldi	r27, 0x40	; 64
    4416:	8b 87       	std	Y+11, r24	; 0x0b
    4418:	9c 87       	std	Y+12, r25	; 0x0c
    441a:	ad 87       	std	Y+13, r26	; 0x0d
    441c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    441e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4420:	7c 85       	ldd	r23, Y+12	; 0x0c
    4422:	8d 85       	ldd	r24, Y+13	; 0x0d
    4424:	9e 85       	ldd	r25, Y+14	; 0x0e
    4426:	20 e0       	ldi	r18, 0x00	; 0
    4428:	30 e0       	ldi	r19, 0x00	; 0
    442a:	4a ef       	ldi	r20, 0xFA	; 250
    442c:	54 e4       	ldi	r21, 0x44	; 68
    442e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4432:	dc 01       	movw	r26, r24
    4434:	cb 01       	movw	r24, r22
    4436:	8f 83       	std	Y+7, r24	; 0x07
    4438:	98 87       	std	Y+8, r25	; 0x08
    443a:	a9 87       	std	Y+9, r26	; 0x09
    443c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    443e:	6f 81       	ldd	r22, Y+7	; 0x07
    4440:	78 85       	ldd	r23, Y+8	; 0x08
    4442:	89 85       	ldd	r24, Y+9	; 0x09
    4444:	9a 85       	ldd	r25, Y+10	; 0x0a
    4446:	20 e0       	ldi	r18, 0x00	; 0
    4448:	30 e0       	ldi	r19, 0x00	; 0
    444a:	40 e8       	ldi	r20, 0x80	; 128
    444c:	5f e3       	ldi	r21, 0x3F	; 63
    444e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4452:	88 23       	and	r24, r24
    4454:	2c f4       	brge	.+10     	; 0x4460 <LCD_CHAR+0x552>
		__ticks = 1;
    4456:	81 e0       	ldi	r24, 0x01	; 1
    4458:	90 e0       	ldi	r25, 0x00	; 0
    445a:	9e 83       	std	Y+6, r25	; 0x06
    445c:	8d 83       	std	Y+5, r24	; 0x05
    445e:	3f c0       	rjmp	.+126    	; 0x44de <LCD_CHAR+0x5d0>
	else if (__tmp > 65535)
    4460:	6f 81       	ldd	r22, Y+7	; 0x07
    4462:	78 85       	ldd	r23, Y+8	; 0x08
    4464:	89 85       	ldd	r24, Y+9	; 0x09
    4466:	9a 85       	ldd	r25, Y+10	; 0x0a
    4468:	20 e0       	ldi	r18, 0x00	; 0
    446a:	3f ef       	ldi	r19, 0xFF	; 255
    446c:	4f e7       	ldi	r20, 0x7F	; 127
    446e:	57 e4       	ldi	r21, 0x47	; 71
    4470:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4474:	18 16       	cp	r1, r24
    4476:	4c f5       	brge	.+82     	; 0x44ca <LCD_CHAR+0x5bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4478:	6b 85       	ldd	r22, Y+11	; 0x0b
    447a:	7c 85       	ldd	r23, Y+12	; 0x0c
    447c:	8d 85       	ldd	r24, Y+13	; 0x0d
    447e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4480:	20 e0       	ldi	r18, 0x00	; 0
    4482:	30 e0       	ldi	r19, 0x00	; 0
    4484:	40 e2       	ldi	r20, 0x20	; 32
    4486:	51 e4       	ldi	r21, 0x41	; 65
    4488:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    448c:	dc 01       	movw	r26, r24
    448e:	cb 01       	movw	r24, r22
    4490:	bc 01       	movw	r22, r24
    4492:	cd 01       	movw	r24, r26
    4494:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4498:	dc 01       	movw	r26, r24
    449a:	cb 01       	movw	r24, r22
    449c:	9e 83       	std	Y+6, r25	; 0x06
    449e:	8d 83       	std	Y+5, r24	; 0x05
    44a0:	0f c0       	rjmp	.+30     	; 0x44c0 <LCD_CHAR+0x5b2>
    44a2:	88 ec       	ldi	r24, 0xC8	; 200
    44a4:	90 e0       	ldi	r25, 0x00	; 0
    44a6:	9c 83       	std	Y+4, r25	; 0x04
    44a8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    44aa:	8b 81       	ldd	r24, Y+3	; 0x03
    44ac:	9c 81       	ldd	r25, Y+4	; 0x04
    44ae:	01 97       	sbiw	r24, 0x01	; 1
    44b0:	f1 f7       	brne	.-4      	; 0x44ae <LCD_CHAR+0x5a0>
    44b2:	9c 83       	std	Y+4, r25	; 0x04
    44b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44b6:	8d 81       	ldd	r24, Y+5	; 0x05
    44b8:	9e 81       	ldd	r25, Y+6	; 0x06
    44ba:	01 97       	sbiw	r24, 0x01	; 1
    44bc:	9e 83       	std	Y+6, r25	; 0x06
    44be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44c0:	8d 81       	ldd	r24, Y+5	; 0x05
    44c2:	9e 81       	ldd	r25, Y+6	; 0x06
    44c4:	00 97       	sbiw	r24, 0x00	; 0
    44c6:	69 f7       	brne	.-38     	; 0x44a2 <LCD_CHAR+0x594>
    44c8:	14 c0       	rjmp	.+40     	; 0x44f2 <LCD_CHAR+0x5e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44ca:	6f 81       	ldd	r22, Y+7	; 0x07
    44cc:	78 85       	ldd	r23, Y+8	; 0x08
    44ce:	89 85       	ldd	r24, Y+9	; 0x09
    44d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    44d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44d6:	dc 01       	movw	r26, r24
    44d8:	cb 01       	movw	r24, r22
    44da:	9e 83       	std	Y+6, r25	; 0x06
    44dc:	8d 83       	std	Y+5, r24	; 0x05
    44de:	8d 81       	ldd	r24, Y+5	; 0x05
    44e0:	9e 81       	ldd	r25, Y+6	; 0x06
    44e2:	9a 83       	std	Y+2, r25	; 0x02
    44e4:	89 83       	std	Y+1, r24	; 0x01
    44e6:	89 81       	ldd	r24, Y+1	; 0x01
    44e8:	9a 81       	ldd	r25, Y+2	; 0x02
    44ea:	01 97       	sbiw	r24, 0x01	; 1
    44ec:	f1 f7       	brne	.-4      	; 0x44ea <LCD_CHAR+0x5dc>
    44ee:	9a 83       	std	Y+2, r25	; 0x02
    44f0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    44f2:	c2 5b       	subi	r28, 0xB2	; 178
    44f4:	df 4f       	sbci	r29, 0xFF	; 255
    44f6:	0f b6       	in	r0, 0x3f	; 63
    44f8:	f8 94       	cli
    44fa:	de bf       	out	0x3e, r29	; 62
    44fc:	0f be       	out	0x3f, r0	; 63
    44fe:	cd bf       	out	0x3d, r28	; 61
    4500:	cf 91       	pop	r28
    4502:	df 91       	pop	r29
    4504:	1f 91       	pop	r17
    4506:	0f 91       	pop	r16
    4508:	08 95       	ret

0000450a <LCD_STRING>:
void LCD_STRING(s8 * DATA) {
    450a:	df 93       	push	r29
    450c:	cf 93       	push	r28
    450e:	00 d0       	rcall	.+0      	; 0x4510 <LCD_STRING+0x6>
    4510:	0f 92       	push	r0
    4512:	cd b7       	in	r28, 0x3d	; 61
    4514:	de b7       	in	r29, 0x3e	; 62
    4516:	9b 83       	std	Y+3, r25	; 0x03
    4518:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    451a:	19 82       	std	Y+1, r1	; 0x01
    451c:	0e c0       	rjmp	.+28     	; 0x453a <LCD_STRING+0x30>
	while (DATA[i] != '\0') {
		LCD_CHAR(DATA[i]);
    451e:	89 81       	ldd	r24, Y+1	; 0x01
    4520:	28 2f       	mov	r18, r24
    4522:	30 e0       	ldi	r19, 0x00	; 0
    4524:	8a 81       	ldd	r24, Y+2	; 0x02
    4526:	9b 81       	ldd	r25, Y+3	; 0x03
    4528:	fc 01       	movw	r30, r24
    452a:	e2 0f       	add	r30, r18
    452c:	f3 1f       	adc	r31, r19
    452e:	80 81       	ld	r24, Z
    4530:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <LCD_CHAR>
		i++;
    4534:	89 81       	ldd	r24, Y+1	; 0x01
    4536:	8f 5f       	subi	r24, 0xFF	; 255
    4538:	89 83       	std	Y+1, r24	; 0x01
	Write_Channel(LCD_E, STD_HIGH);
	_delay_ms(2);
}
void LCD_STRING(s8 * DATA) {
	u8 i = 0;
	while (DATA[i] != '\0') {
    453a:	89 81       	ldd	r24, Y+1	; 0x01
    453c:	28 2f       	mov	r18, r24
    453e:	30 e0       	ldi	r19, 0x00	; 0
    4540:	8a 81       	ldd	r24, Y+2	; 0x02
    4542:	9b 81       	ldd	r25, Y+3	; 0x03
    4544:	fc 01       	movw	r30, r24
    4546:	e2 0f       	add	r30, r18
    4548:	f3 1f       	adc	r31, r19
    454a:	80 81       	ld	r24, Z
    454c:	88 23       	and	r24, r24
    454e:	39 f7       	brne	.-50     	; 0x451e <LCD_STRING+0x14>
		LCD_CHAR(DATA[i]);
		i++;
	}
}
    4550:	0f 90       	pop	r0
    4552:	0f 90       	pop	r0
    4554:	0f 90       	pop	r0
    4556:	cf 91       	pop	r28
    4558:	df 91       	pop	r29
    455a:	08 95       	ret

0000455c <LCD_SETPOS>:
void LCD_SETPOS(u8 LINE, u8 POS) {
    455c:	df 93       	push	r29
    455e:	cf 93       	push	r28
    4560:	00 d0       	rcall	.+0      	; 0x4562 <LCD_SETPOS+0x6>
    4562:	00 d0       	rcall	.+0      	; 0x4564 <LCD_SETPOS+0x8>
    4564:	cd b7       	in	r28, 0x3d	; 61
    4566:	de b7       	in	r29, 0x3e	; 62
    4568:	89 83       	std	Y+1, r24	; 0x01
    456a:	6a 83       	std	Y+2, r22	; 0x02
	switch (LINE) {
    456c:	89 81       	ldd	r24, Y+1	; 0x01
    456e:	28 2f       	mov	r18, r24
    4570:	30 e0       	ldi	r19, 0x00	; 0
    4572:	3c 83       	std	Y+4, r19	; 0x04
    4574:	2b 83       	std	Y+3, r18	; 0x03
    4576:	8b 81       	ldd	r24, Y+3	; 0x03
    4578:	9c 81       	ldd	r25, Y+4	; 0x04
    457a:	81 30       	cpi	r24, 0x01	; 1
    457c:	91 05       	cpc	r25, r1
    457e:	31 f0       	breq	.+12     	; 0x458c <LCD_SETPOS+0x30>
    4580:	2b 81       	ldd	r18, Y+3	; 0x03
    4582:	3c 81       	ldd	r19, Y+4	; 0x04
    4584:	22 30       	cpi	r18, 0x02	; 2
    4586:	31 05       	cpc	r19, r1
    4588:	39 f0       	breq	.+14     	; 0x4598 <LCD_SETPOS+0x3c>
    458a:	0b c0       	rjmp	.+22     	; 0x45a2 <LCD_SETPOS+0x46>
	case 1:
		LCD_CMD(0x80 | (POS & 0x0F));
    458c:	8a 81       	ldd	r24, Y+2	; 0x02
    458e:	8f 70       	andi	r24, 0x0F	; 15
    4590:	80 68       	ori	r24, 0x80	; 128
    4592:	0e 94 8a 1c 	call	0x3914	; 0x3914 <LCD_CMD>
    4596:	05 c0       	rjmp	.+10     	; 0x45a2 <LCD_SETPOS+0x46>
		break;
	case 2:
		LCD_CMD(0xC0 | (POS & 0x0F));
    4598:	8a 81       	ldd	r24, Y+2	; 0x02
    459a:	8f 70       	andi	r24, 0x0F	; 15
    459c:	80 6c       	ori	r24, 0xC0	; 192
    459e:	0e 94 8a 1c 	call	0x3914	; 0x3914 <LCD_CMD>
		break;
	}
}
    45a2:	0f 90       	pop	r0
    45a4:	0f 90       	pop	r0
    45a6:	0f 90       	pop	r0
    45a8:	0f 90       	pop	r0
    45aa:	cf 91       	pop	r28
    45ac:	df 91       	pop	r29
    45ae:	08 95       	ret

000045b0 <LCD_Custome_Char>:
void LCD_Custome_Char(u8 loc, s8 * msg){
    45b0:	df 93       	push	r29
    45b2:	cf 93       	push	r28
    45b4:	00 d0       	rcall	.+0      	; 0x45b6 <LCD_Custome_Char+0x6>
    45b6:	00 d0       	rcall	.+0      	; 0x45b8 <LCD_Custome_Char+0x8>
    45b8:	cd b7       	in	r28, 0x3d	; 61
    45ba:	de b7       	in	r29, 0x3e	; 62
    45bc:	8a 83       	std	Y+2, r24	; 0x02
    45be:	7c 83       	std	Y+4, r23	; 0x04
    45c0:	6b 83       	std	Y+3, r22	; 0x03
	u8 i = 0;
    45c2:	19 82       	std	Y+1, r1	; 0x01
	if(loc < 8){
    45c4:	8a 81       	ldd	r24, Y+2	; 0x02
    45c6:	88 30       	cpi	r24, 0x08	; 8
    45c8:	f8 f4       	brcc	.+62     	; 0x4608 <LCD_Custome_Char+0x58>
		LCD_CMD(0x40 + (loc * 8));
    45ca:	8a 81       	ldd	r24, Y+2	; 0x02
    45cc:	88 2f       	mov	r24, r24
    45ce:	90 e0       	ldi	r25, 0x00	; 0
    45d0:	08 96       	adiw	r24, 0x08	; 8
    45d2:	88 0f       	add	r24, r24
    45d4:	99 1f       	adc	r25, r25
    45d6:	88 0f       	add	r24, r24
    45d8:	99 1f       	adc	r25, r25
    45da:	88 0f       	add	r24, r24
    45dc:	99 1f       	adc	r25, r25
    45de:	0e 94 8a 1c 	call	0x3914	; 0x3914 <LCD_CMD>
		for(i = 0;i<8;i++){
    45e2:	19 82       	std	Y+1, r1	; 0x01
    45e4:	0e c0       	rjmp	.+28     	; 0x4602 <LCD_Custome_Char+0x52>
			LCD_CHAR(msg[i]);
    45e6:	89 81       	ldd	r24, Y+1	; 0x01
    45e8:	28 2f       	mov	r18, r24
    45ea:	30 e0       	ldi	r19, 0x00	; 0
    45ec:	8b 81       	ldd	r24, Y+3	; 0x03
    45ee:	9c 81       	ldd	r25, Y+4	; 0x04
    45f0:	fc 01       	movw	r30, r24
    45f2:	e2 0f       	add	r30, r18
    45f4:	f3 1f       	adc	r31, r19
    45f6:	80 81       	ld	r24, Z
    45f8:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <LCD_CHAR>
}
void LCD_Custome_Char(u8 loc, s8 * msg){
	u8 i = 0;
	if(loc < 8){
		LCD_CMD(0x40 + (loc * 8));
		for(i = 0;i<8;i++){
    45fc:	89 81       	ldd	r24, Y+1	; 0x01
    45fe:	8f 5f       	subi	r24, 0xFF	; 255
    4600:	89 83       	std	Y+1, r24	; 0x01
    4602:	89 81       	ldd	r24, Y+1	; 0x01
    4604:	88 30       	cpi	r24, 0x08	; 8
    4606:	78 f3       	brcs	.-34     	; 0x45e6 <LCD_Custome_Char+0x36>
			LCD_CHAR(msg[i]);
		}
	}
}
    4608:	0f 90       	pop	r0
    460a:	0f 90       	pop	r0
    460c:	0f 90       	pop	r0
    460e:	0f 90       	pop	r0
    4610:	cf 91       	pop	r28
    4612:	df 91       	pop	r29
    4614:	08 95       	ret

00004616 <GetKey>:
u8 KeyPadCol[ColSize] = { c0, c1, c2, c3 };

u8 KeyPad[RowSize][ColSize] = { { '1', '2', '3', 'A' }, { '4', '5', '6', 'B' },
		{ '7', '8', '9', 'C' }, { '*', '0', '#', 'D' } };

u8 GetKey(void) {
    4616:	df 93       	push	r29
    4618:	cf 93       	push	r28
    461a:	00 d0       	rcall	.+0      	; 0x461c <GetKey+0x6>
    461c:	00 d0       	rcall	.+0      	; 0x461e <GetKey+0x8>
    461e:	cd b7       	in	r28, 0x3d	; 61
    4620:	de b7       	in	r29, 0x3e	; 62
	//Put one to all Portx 0xffff
	for (u8 w = 0; w < RowSize; w++) {
    4622:	1b 82       	std	Y+3, r1	; 0x03
    4624:	17 c0       	rjmp	.+46     	; 0x4654 <GetKey+0x3e>
		Write_Channel(KeyPadRow[w], STD_HIGH);
    4626:	8b 81       	ldd	r24, Y+3	; 0x03
    4628:	88 2f       	mov	r24, r24
    462a:	90 e0       	ldi	r25, 0x00	; 0
    462c:	fc 01       	movw	r30, r24
    462e:	e4 51       	subi	r30, 0x14	; 20
    4630:	fe 4f       	sbci	r31, 0xFE	; 254
    4632:	80 81       	ld	r24, Z
    4634:	61 e0       	ldi	r22, 0x01	; 1
    4636:	0e 94 41 08 	call	0x1082	; 0x1082 <Write_Channel>
		Write_Channel(KeyPadCol[w], STD_HIGH);
    463a:	8b 81       	ldd	r24, Y+3	; 0x03
    463c:	88 2f       	mov	r24, r24
    463e:	90 e0       	ldi	r25, 0x00	; 0
    4640:	fc 01       	movw	r30, r24
    4642:	e0 51       	subi	r30, 0x10	; 16
    4644:	fe 4f       	sbci	r31, 0xFE	; 254
    4646:	80 81       	ld	r24, Z
    4648:	61 e0       	ldi	r22, 0x01	; 1
    464a:	0e 94 41 08 	call	0x1082	; 0x1082 <Write_Channel>
u8 KeyPad[RowSize][ColSize] = { { '1', '2', '3', 'A' }, { '4', '5', '6', 'B' },
		{ '7', '8', '9', 'C' }, { '*', '0', '#', 'D' } };

u8 GetKey(void) {
	//Put one to all Portx 0xffff
	for (u8 w = 0; w < RowSize; w++) {
    464e:	8b 81       	ldd	r24, Y+3	; 0x03
    4650:	8f 5f       	subi	r24, 0xFF	; 255
    4652:	8b 83       	std	Y+3, r24	; 0x03
    4654:	8b 81       	ldd	r24, Y+3	; 0x03
    4656:	84 30       	cpi	r24, 0x04	; 4
    4658:	30 f3       	brcs	.-52     	; 0x4626 <GetKey+0x10>
		Write_Channel(KeyPadRow[w], STD_HIGH);
		Write_Channel(KeyPadCol[w], STD_HIGH);
	}
	for (u8 i = 0; i < RowSize; i++) {
    465a:	1a 82       	std	Y+2, r1	; 0x02
    465c:	48 c0       	rjmp	.+144    	; 0x46ee <GetKey+0xd8>
		Write_Channel(KeyPadRow[i], STD_LOW);
    465e:	8a 81       	ldd	r24, Y+2	; 0x02
    4660:	88 2f       	mov	r24, r24
    4662:	90 e0       	ldi	r25, 0x00	; 0
    4664:	fc 01       	movw	r30, r24
    4666:	e4 51       	subi	r30, 0x14	; 20
    4668:	fe 4f       	sbci	r31, 0xFE	; 254
    466a:	80 81       	ld	r24, Z
    466c:	60 e0       	ldi	r22, 0x00	; 0
    466e:	0e 94 41 08 	call	0x1082	; 0x1082 <Write_Channel>
		for (u8 j = 0; j < ColSize; j++) {
    4672:	19 82       	std	Y+1, r1	; 0x01
    4674:	2c c0       	rjmp	.+88     	; 0x46ce <GetKey+0xb8>
			if (Read_Channel(KeyPadCol[j]) == STD_LOW) {
    4676:	89 81       	ldd	r24, Y+1	; 0x01
    4678:	88 2f       	mov	r24, r24
    467a:	90 e0       	ldi	r25, 0x00	; 0
    467c:	fc 01       	movw	r30, r24
    467e:	e0 51       	subi	r30, 0x10	; 16
    4680:	fe 4f       	sbci	r31, 0xFE	; 254
    4682:	80 81       	ld	r24, Z
    4684:	0e 94 2c 09 	call	0x1258	; 0x1258 <Read_Channel>
    4688:	88 23       	and	r24, r24
    468a:	f1 f4       	brne	.+60     	; 0x46c8 <GetKey+0xb2>
				while (Read_Channel(KeyPadCol[j]) == STD_LOW);
    468c:	89 81       	ldd	r24, Y+1	; 0x01
    468e:	88 2f       	mov	r24, r24
    4690:	90 e0       	ldi	r25, 0x00	; 0
    4692:	fc 01       	movw	r30, r24
    4694:	e0 51       	subi	r30, 0x10	; 16
    4696:	fe 4f       	sbci	r31, 0xFE	; 254
    4698:	80 81       	ld	r24, Z
    469a:	0e 94 2c 09 	call	0x1258	; 0x1258 <Read_Channel>
    469e:	88 23       	and	r24, r24
    46a0:	a9 f3       	breq	.-22     	; 0x468c <GetKey+0x76>
				return KeyPad[i][j];
    46a2:	8a 81       	ldd	r24, Y+2	; 0x02
    46a4:	48 2f       	mov	r20, r24
    46a6:	50 e0       	ldi	r21, 0x00	; 0
    46a8:	89 81       	ldd	r24, Y+1	; 0x01
    46aa:	28 2f       	mov	r18, r24
    46ac:	30 e0       	ldi	r19, 0x00	; 0
    46ae:	ca 01       	movw	r24, r20
    46b0:	88 0f       	add	r24, r24
    46b2:	99 1f       	adc	r25, r25
    46b4:	88 0f       	add	r24, r24
    46b6:	99 1f       	adc	r25, r25
    46b8:	82 0f       	add	r24, r18
    46ba:	93 1f       	adc	r25, r19
    46bc:	fc 01       	movw	r30, r24
    46be:	ec 50       	subi	r30, 0x0C	; 12
    46c0:	fe 4f       	sbci	r31, 0xFE	; 254
    46c2:	80 81       	ld	r24, Z
    46c4:	8c 83       	std	Y+4, r24	; 0x04
    46c6:	19 c0       	rjmp	.+50     	; 0x46fa <GetKey+0xe4>
		Write_Channel(KeyPadRow[w], STD_HIGH);
		Write_Channel(KeyPadCol[w], STD_HIGH);
	}
	for (u8 i = 0; i < RowSize; i++) {
		Write_Channel(KeyPadRow[i], STD_LOW);
		for (u8 j = 0; j < ColSize; j++) {
    46c8:	89 81       	ldd	r24, Y+1	; 0x01
    46ca:	8f 5f       	subi	r24, 0xFF	; 255
    46cc:	89 83       	std	Y+1, r24	; 0x01
    46ce:	89 81       	ldd	r24, Y+1	; 0x01
    46d0:	84 30       	cpi	r24, 0x04	; 4
    46d2:	88 f2       	brcs	.-94     	; 0x4676 <GetKey+0x60>
			if (Read_Channel(KeyPadCol[j]) == STD_LOW) {
				while (Read_Channel(KeyPadCol[j]) == STD_LOW);
				return KeyPad[i][j];
			}
		}
		Write_Channel(KeyPadRow[i], STD_HIGH);
    46d4:	8a 81       	ldd	r24, Y+2	; 0x02
    46d6:	88 2f       	mov	r24, r24
    46d8:	90 e0       	ldi	r25, 0x00	; 0
    46da:	fc 01       	movw	r30, r24
    46dc:	e4 51       	subi	r30, 0x14	; 20
    46de:	fe 4f       	sbci	r31, 0xFE	; 254
    46e0:	80 81       	ld	r24, Z
    46e2:	61 e0       	ldi	r22, 0x01	; 1
    46e4:	0e 94 41 08 	call	0x1082	; 0x1082 <Write_Channel>
	//Put one to all Portx 0xffff
	for (u8 w = 0; w < RowSize; w++) {
		Write_Channel(KeyPadRow[w], STD_HIGH);
		Write_Channel(KeyPadCol[w], STD_HIGH);
	}
	for (u8 i = 0; i < RowSize; i++) {
    46e8:	8a 81       	ldd	r24, Y+2	; 0x02
    46ea:	8f 5f       	subi	r24, 0xFF	; 255
    46ec:	8a 83       	std	Y+2, r24	; 0x02
    46ee:	8a 81       	ldd	r24, Y+2	; 0x02
    46f0:	84 30       	cpi	r24, 0x04	; 4
    46f2:	08 f4       	brcc	.+2      	; 0x46f6 <GetKey+0xe0>
    46f4:	b4 cf       	rjmp	.-152    	; 0x465e <GetKey+0x48>
				return KeyPad[i][j];
			}
		}
		Write_Channel(KeyPadRow[i], STD_HIGH);
	}
	return 9;
    46f6:	89 e0       	ldi	r24, 0x09	; 9
    46f8:	8c 83       	std	Y+4, r24	; 0x04
    46fa:	8c 81       	ldd	r24, Y+4	; 0x04
}
    46fc:	0f 90       	pop	r0
    46fe:	0f 90       	pop	r0
    4700:	0f 90       	pop	r0
    4702:	0f 90       	pop	r0
    4704:	cf 91       	pop	r28
    4706:	df 91       	pop	r29
    4708:	08 95       	ret

0000470a <FAN_Init>:
 *      Author: Elbekoo
 */

#include "FAN.h"

void FAN_Init() {
    470a:	df 93       	push	r29
    470c:	cf 93       	push	r28
    470e:	cd b7       	in	r28, 0x3d	; 61
    4710:	de b7       	in	r29, 0x3e	; 62
	DDRD |= (1 << 4);
    4712:	a1 e3       	ldi	r26, 0x31	; 49
    4714:	b0 e0       	ldi	r27, 0x00	; 0
    4716:	e1 e3       	ldi	r30, 0x31	; 49
    4718:	f0 e0       	ldi	r31, 0x00	; 0
    471a:	80 81       	ld	r24, Z
    471c:	80 61       	ori	r24, 0x10	; 16
    471e:	8c 93       	st	X, r24
	DDRC |= (1 << 6) | (1 << 7);
    4720:	a4 e3       	ldi	r26, 0x34	; 52
    4722:	b0 e0       	ldi	r27, 0x00	; 0
    4724:	e4 e3       	ldi	r30, 0x34	; 52
    4726:	f0 e0       	ldi	r31, 0x00	; 0
    4728:	80 81       	ld	r24, Z
    472a:	80 6c       	ori	r24, 0xC0	; 192
    472c:	8c 93       	st	X, r24
	TCCR1A = (1 << WGM11) | (1 << COM1B1); //mode 14 FPWM, Non Inverting
    472e:	ef e4       	ldi	r30, 0x4F	; 79
    4730:	f0 e0       	ldi	r31, 0x00	; 0
    4732:	82 e2       	ldi	r24, 0x22	; 34
    4734:	80 83       	st	Z, r24
	TCCR1B = (1 << WGM12) | (1 << WGM13) | (1 << CS10) | (1 << CS11); //N = 64
    4736:	ee e4       	ldi	r30, 0x4E	; 78
    4738:	f0 e0       	ldi	r31, 0x00	; 0
    473a:	8b e1       	ldi	r24, 0x1B	; 27
    473c:	80 83       	st	Z, r24
	OCR1B = 1000;
    473e:	e8 e4       	ldi	r30, 0x48	; 72
    4740:	f0 e0       	ldi	r31, 0x00	; 0
    4742:	88 ee       	ldi	r24, 0xE8	; 232
    4744:	93 e0       	ldi	r25, 0x03	; 3
    4746:	91 83       	std	Z+1, r25	; 0x01
    4748:	80 83       	st	Z, r24
	PORTC |= (1 << 6);
    474a:	a5 e3       	ldi	r26, 0x35	; 53
    474c:	b0 e0       	ldi	r27, 0x00	; 0
    474e:	e5 e3       	ldi	r30, 0x35	; 53
    4750:	f0 e0       	ldi	r31, 0x00	; 0
    4752:	80 81       	ld	r24, Z
    4754:	80 64       	ori	r24, 0x40	; 64
    4756:	8c 93       	st	X, r24
	PORTC &= ~(1 << 7);
    4758:	a5 e3       	ldi	r26, 0x35	; 53
    475a:	b0 e0       	ldi	r27, 0x00	; 0
    475c:	e5 e3       	ldi	r30, 0x35	; 53
    475e:	f0 e0       	ldi	r31, 0x00	; 0
    4760:	80 81       	ld	r24, Z
    4762:	8f 77       	andi	r24, 0x7F	; 127
    4764:	8c 93       	st	X, r24
	ICR1 = 500;
    4766:	e6 e4       	ldi	r30, 0x46	; 70
    4768:	f0 e0       	ldi	r31, 0x00	; 0
    476a:	84 ef       	ldi	r24, 0xF4	; 244
    476c:	91 e0       	ldi	r25, 0x01	; 1
    476e:	91 83       	std	Z+1, r25	; 0x01
    4770:	80 83       	st	Z, r24
}
    4772:	cf 91       	pop	r28
    4774:	df 91       	pop	r29
    4776:	08 95       	ret

00004778 <FAN_Speed>:
void FAN_Speed(int speed) {
    4778:	df 93       	push	r29
    477a:	cf 93       	push	r28
    477c:	00 d0       	rcall	.+0      	; 0x477e <FAN_Speed+0x6>
    477e:	cd b7       	in	r28, 0x3d	; 61
    4780:	de b7       	in	r29, 0x3e	; 62
    4782:	9a 83       	std	Y+2, r25	; 0x02
    4784:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = speed;
    4786:	e8 e4       	ldi	r30, 0x48	; 72
    4788:	f0 e0       	ldi	r31, 0x00	; 0
    478a:	89 81       	ldd	r24, Y+1	; 0x01
    478c:	9a 81       	ldd	r25, Y+2	; 0x02
    478e:	91 83       	std	Z+1, r25	; 0x01
    4790:	80 83       	st	Z, r24
}
    4792:	0f 90       	pop	r0
    4794:	0f 90       	pop	r0
    4796:	cf 91       	pop	r28
    4798:	df 91       	pop	r29
    479a:	08 95       	ret

0000479c <EEPROM_Write>:
 *      Author: mahmoud
 */

#include "E2PROM.h"

void EEPROM_Write(char data, char address) {
    479c:	df 93       	push	r29
    479e:	cf 93       	push	r28
    47a0:	00 d0       	rcall	.+0      	; 0x47a2 <EEPROM_Write+0x6>
    47a2:	cd b7       	in	r28, 0x3d	; 61
    47a4:	de b7       	in	r29, 0x3e	; 62
    47a6:	89 83       	std	Y+1, r24	; 0x01
    47a8:	6a 83       	std	Y+2, r22	; 0x02
	TWI_Start();
    47aa:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <TWI_Start>
	TWI_Write(0xA8); //slave address is 1010.100 and a 0 in the 8th bit to indicate Writting.
    47ae:	88 ea       	ldi	r24, 0xA8	; 168
    47b0:	0e 94 03 08 	call	0x1006	; 0x1006 <TWI_Write>
	TWI_Write(address);
    47b4:	8a 81       	ldd	r24, Y+2	; 0x02
    47b6:	0e 94 03 08 	call	0x1006	; 0x1006 <TWI_Write>
	TWI_Write(data);
    47ba:	89 81       	ldd	r24, Y+1	; 0x01
    47bc:	0e 94 03 08 	call	0x1006	; 0x1006 <TWI_Write>
	TWI_Stop();
    47c0:	0e 94 f8 07 	call	0xff0	; 0xff0 <TWI_Stop>
}
    47c4:	0f 90       	pop	r0
    47c6:	0f 90       	pop	r0
    47c8:	cf 91       	pop	r28
    47ca:	df 91       	pop	r29
    47cc:	08 95       	ret

000047ce <EEPROM_Read>:
void EEPROM_Read(char address, char* ptr) // the function arguments are an address in the EEPROM to read from and a pointer to a memory place in the MCU to store the read data in
{
    47ce:	df 93       	push	r29
    47d0:	cf 93       	push	r28
    47d2:	00 d0       	rcall	.+0      	; 0x47d4 <EEPROM_Read+0x6>
    47d4:	0f 92       	push	r0
    47d6:	cd b7       	in	r28, 0x3d	; 61
    47d8:	de b7       	in	r29, 0x3e	; 62
    47da:	89 83       	std	Y+1, r24	; 0x01
    47dc:	7b 83       	std	Y+3, r23	; 0x03
    47de:	6a 83       	std	Y+2, r22	; 0x02
	TWI_Start();
    47e0:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <TWI_Start>
	TWI_Write(0xA8); // 0b1010 1000 as address write
    47e4:	88 ea       	ldi	r24, 0xA8	; 168
    47e6:	0e 94 03 08 	call	0x1006	; 0x1006 <TWI_Write>
	TWI_Write(address);
    47ea:	89 81       	ldd	r24, Y+1	; 0x01
    47ec:	0e 94 03 08 	call	0x1006	; 0x1006 <TWI_Write>
	TWI_Start();
    47f0:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <TWI_Start>
	TWI_Write(0xA9); // 0b1010 1001 as address read
    47f4:	89 ea       	ldi	r24, 0xA9	; 169
    47f6:	0e 94 03 08 	call	0x1006	; 0x1006 <TWI_Write>
	TWI_Read_Nack(ptr);
    47fa:	8a 81       	ldd	r24, Y+2	; 0x02
    47fc:	9b 81       	ldd	r25, Y+3	; 0x03
    47fe:	0e 94 20 08 	call	0x1040	; 0x1040 <TWI_Read_Nack>
	TWI_Stop();
    4802:	0e 94 f8 07 	call	0xff0	; 0xff0 <TWI_Stop>
}
    4806:	0f 90       	pop	r0
    4808:	0f 90       	pop	r0
    480a:	0f 90       	pop	r0
    480c:	cf 91       	pop	r28
    480e:	df 91       	pop	r29
    4810:	08 95       	ret

00004812 <main>:
void check_gate();

float celsius;
char string[50];

int main() {
    4812:	0f 93       	push	r16
    4814:	1f 93       	push	r17
    4816:	df 93       	push	r29
    4818:	cf 93       	push	r28
    481a:	cd b7       	in	r28, 0x3d	; 61
    481c:	de b7       	in	r29, 0x3e	; 62
    481e:	cb 55       	subi	r28, 0x5B	; 91
    4820:	d0 40       	sbci	r29, 0x00	; 0
    4822:	0f b6       	in	r0, 0x3f	; 63
    4824:	f8 94       	cli
    4826:	de bf       	out	0x3e, r29	; 62
    4828:	0f be       	out	0x3f, r0	; 63
    482a:	cd bf       	out	0x3d, r28	; 61
	// Initializations
	DIO_INIT();
    482c:	0e 94 31 0a 	call	0x1462	; 0x1462 <DIO_INIT>
	LCD_INIT();
    4830:	0e 94 2d 1b 	call	0x365a	; 0x365a <LCD_INIT>
	TWI_Init();
    4834:	0e 94 cd 07 	call	0xf9a	; 0xf9a <TWI_Init>
	Servo_Init();
    4838:	0e 94 df 1a 	call	0x35be	; 0x35be <Servo_Init>
	ADC_INIT();
    483c:	0e 94 42 0b 	call	0x1684	; 0x1684 <ADC_INIT>

	// EEPROM + I2C Variables
	u8 password_addresses[4] = { 0x00, 0x01, 0x02, 0x03 };
    4840:	fe 01       	movw	r30, r28
    4842:	e4 5b       	subi	r30, 0xB4	; 180
    4844:	ff 4f       	sbci	r31, 0xFF	; 255
    4846:	10 82       	st	Z, r1
    4848:	fe 01       	movw	r30, r28
    484a:	e4 5b       	subi	r30, 0xB4	; 180
    484c:	ff 4f       	sbci	r31, 0xFF	; 255
    484e:	81 e0       	ldi	r24, 0x01	; 1
    4850:	81 83       	std	Z+1, r24	; 0x01
    4852:	fe 01       	movw	r30, r28
    4854:	e4 5b       	subi	r30, 0xB4	; 180
    4856:	ff 4f       	sbci	r31, 0xFF	; 255
    4858:	82 e0       	ldi	r24, 0x02	; 2
    485a:	82 83       	std	Z+2, r24	; 0x02
    485c:	fe 01       	movw	r30, r28
    485e:	e4 5b       	subi	r30, 0xB4	; 180
    4860:	ff 4f       	sbci	r31, 0xFF	; 255
    4862:	83 e0       	ldi	r24, 0x03	; 3
    4864:	83 83       	std	Z+3, r24	; 0x03
	u8 pasword_Bytes[4] = { 0x01, 0x00, 0x00, 0x05 };
    4866:	fe 01       	movw	r30, r28
    4868:	e0 5b       	subi	r30, 0xB0	; 176
    486a:	ff 4f       	sbci	r31, 0xFF	; 255
    486c:	81 e0       	ldi	r24, 0x01	; 1
    486e:	80 83       	st	Z, r24
    4870:	fe 01       	movw	r30, r28
    4872:	e0 5b       	subi	r30, 0xB0	; 176
    4874:	ff 4f       	sbci	r31, 0xFF	; 255
    4876:	11 82       	std	Z+1, r1	; 0x01
    4878:	fe 01       	movw	r30, r28
    487a:	e0 5b       	subi	r30, 0xB0	; 176
    487c:	ff 4f       	sbci	r31, 0xFF	; 255
    487e:	12 82       	std	Z+2, r1	; 0x02
    4880:	fe 01       	movw	r30, r28
    4882:	e0 5b       	subi	r30, 0xB0	; 176
    4884:	ff 4f       	sbci	r31, 0xFF	; 255
    4886:	85 e0       	ldi	r24, 0x05	; 5
    4888:	83 83       	std	Z+3, r24	; 0x03
	char R;

	// keypad variables
	char password_entered[4];

	u8 pass = 0;
    488a:	fe 01       	movw	r30, r28
    488c:	e5 5b       	subi	r30, 0xB5	; 181
    488e:	ff 4f       	sbci	r31, 0xFF	; 255
    4890:	10 82       	st	Z, r1
	u8 wrong_pass = 0;
    4892:	fe 01       	movw	r30, r28
    4894:	e6 5b       	subi	r30, 0xB6	; 182
    4896:	ff 4f       	sbci	r31, 0xFF	; 255
    4898:	10 82       	st	Z, r1
    489a:	3b c3       	rjmp	.+1654   	; 0x4f12 <main+0x700>

	while (1) {
		while (!pass) {
			LCD_CMD(0x01);
    489c:	81 e0       	ldi	r24, 0x01	; 1
    489e:	0e 94 8a 1c 	call	0x3914	; 0x3914 <LCD_CMD>
			LCD_STRING("Enter Password!!");
    48a2:	80 e6       	ldi	r24, 0x60	; 96
    48a4:	90 e0       	ldi	r25, 0x00	; 0
    48a6:	0e 94 85 22 	call	0x450a	; 0x450a <LCD_STRING>
    48aa:	fe 01       	movw	r30, r28
    48ac:	ed 5b       	subi	r30, 0xBD	; 189
    48ae:	ff 4f       	sbci	r31, 0xFF	; 255
    48b0:	80 e0       	ldi	r24, 0x00	; 0
    48b2:	90 e0       	ldi	r25, 0x00	; 0
    48b4:	aa e7       	ldi	r26, 0x7A	; 122
    48b6:	b4 e4       	ldi	r27, 0x44	; 68
    48b8:	80 83       	st	Z, r24
    48ba:	91 83       	std	Z+1, r25	; 0x01
    48bc:	a2 83       	std	Z+2, r26	; 0x02
    48be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48c0:	8e 01       	movw	r16, r28
    48c2:	01 5c       	subi	r16, 0xC1	; 193
    48c4:	1f 4f       	sbci	r17, 0xFF	; 255
    48c6:	fe 01       	movw	r30, r28
    48c8:	ed 5b       	subi	r30, 0xBD	; 189
    48ca:	ff 4f       	sbci	r31, 0xFF	; 255
    48cc:	60 81       	ld	r22, Z
    48ce:	71 81       	ldd	r23, Z+1	; 0x01
    48d0:	82 81       	ldd	r24, Z+2	; 0x02
    48d2:	93 81       	ldd	r25, Z+3	; 0x03
    48d4:	20 e0       	ldi	r18, 0x00	; 0
    48d6:	30 e0       	ldi	r19, 0x00	; 0
    48d8:	4a ef       	ldi	r20, 0xFA	; 250
    48da:	54 e4       	ldi	r21, 0x44	; 68
    48dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48e0:	dc 01       	movw	r26, r24
    48e2:	cb 01       	movw	r24, r22
    48e4:	f8 01       	movw	r30, r16
    48e6:	80 83       	st	Z, r24
    48e8:	91 83       	std	Z+1, r25	; 0x01
    48ea:	a2 83       	std	Z+2, r26	; 0x02
    48ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    48ee:	fe 01       	movw	r30, r28
    48f0:	ff 96       	adiw	r30, 0x3f	; 63
    48f2:	60 81       	ld	r22, Z
    48f4:	71 81       	ldd	r23, Z+1	; 0x01
    48f6:	82 81       	ldd	r24, Z+2	; 0x02
    48f8:	93 81       	ldd	r25, Z+3	; 0x03
    48fa:	20 e0       	ldi	r18, 0x00	; 0
    48fc:	30 e0       	ldi	r19, 0x00	; 0
    48fe:	40 e8       	ldi	r20, 0x80	; 128
    4900:	5f e3       	ldi	r21, 0x3F	; 63
    4902:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4906:	88 23       	and	r24, r24
    4908:	2c f4       	brge	.+10     	; 0x4914 <main+0x102>
		__ticks = 1;
    490a:	81 e0       	ldi	r24, 0x01	; 1
    490c:	90 e0       	ldi	r25, 0x00	; 0
    490e:	9e af       	std	Y+62, r25	; 0x3e
    4910:	8d af       	std	Y+61, r24	; 0x3d
    4912:	46 c0       	rjmp	.+140    	; 0x49a0 <main+0x18e>
	else if (__tmp > 65535)
    4914:	fe 01       	movw	r30, r28
    4916:	ff 96       	adiw	r30, 0x3f	; 63
    4918:	60 81       	ld	r22, Z
    491a:	71 81       	ldd	r23, Z+1	; 0x01
    491c:	82 81       	ldd	r24, Z+2	; 0x02
    491e:	93 81       	ldd	r25, Z+3	; 0x03
    4920:	20 e0       	ldi	r18, 0x00	; 0
    4922:	3f ef       	ldi	r19, 0xFF	; 255
    4924:	4f e7       	ldi	r20, 0x7F	; 127
    4926:	57 e4       	ldi	r21, 0x47	; 71
    4928:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    492c:	18 16       	cp	r1, r24
    492e:	64 f5       	brge	.+88     	; 0x4988 <main+0x176>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4930:	fe 01       	movw	r30, r28
    4932:	ed 5b       	subi	r30, 0xBD	; 189
    4934:	ff 4f       	sbci	r31, 0xFF	; 255
    4936:	60 81       	ld	r22, Z
    4938:	71 81       	ldd	r23, Z+1	; 0x01
    493a:	82 81       	ldd	r24, Z+2	; 0x02
    493c:	93 81       	ldd	r25, Z+3	; 0x03
    493e:	20 e0       	ldi	r18, 0x00	; 0
    4940:	30 e0       	ldi	r19, 0x00	; 0
    4942:	40 e2       	ldi	r20, 0x20	; 32
    4944:	51 e4       	ldi	r21, 0x41	; 65
    4946:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    494a:	dc 01       	movw	r26, r24
    494c:	cb 01       	movw	r24, r22
    494e:	bc 01       	movw	r22, r24
    4950:	cd 01       	movw	r24, r26
    4952:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4956:	dc 01       	movw	r26, r24
    4958:	cb 01       	movw	r24, r22
    495a:	9e af       	std	Y+62, r25	; 0x3e
    495c:	8d af       	std	Y+61, r24	; 0x3d
    495e:	0f c0       	rjmp	.+30     	; 0x497e <main+0x16c>
    4960:	88 ec       	ldi	r24, 0xC8	; 200
    4962:	90 e0       	ldi	r25, 0x00	; 0
    4964:	9c af       	std	Y+60, r25	; 0x3c
    4966:	8b af       	std	Y+59, r24	; 0x3b
    4968:	8b ad       	ldd	r24, Y+59	; 0x3b
    496a:	9c ad       	ldd	r25, Y+60	; 0x3c
    496c:	01 97       	sbiw	r24, 0x01	; 1
    496e:	f1 f7       	brne	.-4      	; 0x496c <main+0x15a>
    4970:	9c af       	std	Y+60, r25	; 0x3c
    4972:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4974:	8d ad       	ldd	r24, Y+61	; 0x3d
    4976:	9e ad       	ldd	r25, Y+62	; 0x3e
    4978:	01 97       	sbiw	r24, 0x01	; 1
    497a:	9e af       	std	Y+62, r25	; 0x3e
    497c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    497e:	8d ad       	ldd	r24, Y+61	; 0x3d
    4980:	9e ad       	ldd	r25, Y+62	; 0x3e
    4982:	00 97       	sbiw	r24, 0x00	; 0
    4984:	69 f7       	brne	.-38     	; 0x4960 <main+0x14e>
    4986:	16 c0       	rjmp	.+44     	; 0x49b4 <main+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4988:	fe 01       	movw	r30, r28
    498a:	ff 96       	adiw	r30, 0x3f	; 63
    498c:	60 81       	ld	r22, Z
    498e:	71 81       	ldd	r23, Z+1	; 0x01
    4990:	82 81       	ldd	r24, Z+2	; 0x02
    4992:	93 81       	ldd	r25, Z+3	; 0x03
    4994:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4998:	dc 01       	movw	r26, r24
    499a:	cb 01       	movw	r24, r22
    499c:	9e af       	std	Y+62, r25	; 0x3e
    499e:	8d af       	std	Y+61, r24	; 0x3d
    49a0:	8d ad       	ldd	r24, Y+61	; 0x3d
    49a2:	9e ad       	ldd	r25, Y+62	; 0x3e
    49a4:	9a af       	std	Y+58, r25	; 0x3a
    49a6:	89 af       	std	Y+57, r24	; 0x39
    49a8:	89 ad       	ldd	r24, Y+57	; 0x39
    49aa:	9a ad       	ldd	r25, Y+58	; 0x3a
    49ac:	01 97       	sbiw	r24, 0x01	; 1
    49ae:	f1 f7       	brne	.-4      	; 0x49ac <main+0x19a>
    49b0:	9a af       	std	Y+58, r25	; 0x3a
    49b2:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(1000);
			// Entering the password
			u8 entries_counter = 0;
    49b4:	fe 01       	movw	r30, r28
    49b6:	e7 5b       	subi	r30, 0xB7	; 183
    49b8:	ff 4f       	sbci	r31, 0xFF	; 255
    49ba:	10 82       	st	Z, r1
			u8 typed = 0;
    49bc:	fe 01       	movw	r30, r28
    49be:	e8 5b       	subi	r30, 0xB8	; 184
    49c0:	ff 4f       	sbci	r31, 0xFF	; 255
    49c2:	10 82       	st	Z, r1
    49c4:	37 c0       	rjmp	.+110    	; 0x4a34 <main+0x222>
			while (entries_counter != 4) {
				char x = GetKey();
    49c6:	0e 94 0b 23 	call	0x4616	; 0x4616 <GetKey>
    49ca:	fe 01       	movw	r30, r28
    49cc:	e9 5b       	subi	r30, 0xB9	; 185
    49ce:	ff 4f       	sbci	r31, 0xFF	; 255
    49d0:	80 83       	st	Z, r24
				if (x != 9) {
    49d2:	fe 01       	movw	r30, r28
    49d4:	e9 5b       	subi	r30, 0xB9	; 185
    49d6:	ff 4f       	sbci	r31, 0xFF	; 255
    49d8:	80 81       	ld	r24, Z
    49da:	89 30       	cpi	r24, 0x09	; 9
    49dc:	59 f1       	breq	.+86     	; 0x4a34 <main+0x222>
					if (!typed) {
    49de:	fe 01       	movw	r30, r28
    49e0:	e8 5b       	subi	r30, 0xB8	; 184
    49e2:	ff 4f       	sbci	r31, 0xFF	; 255
    49e4:	80 81       	ld	r24, Z
    49e6:	88 23       	and	r24, r24
    49e8:	41 f4       	brne	.+16     	; 0x49fa <main+0x1e8>
						LCD_CMD(0x01);
    49ea:	81 e0       	ldi	r24, 0x01	; 1
    49ec:	0e 94 8a 1c 	call	0x3914	; 0x3914 <LCD_CMD>
						typed = 1;
    49f0:	fe 01       	movw	r30, r28
    49f2:	e8 5b       	subi	r30, 0xB8	; 184
    49f4:	ff 4f       	sbci	r31, 0xFF	; 255
    49f6:	81 e0       	ldi	r24, 0x01	; 1
    49f8:	80 83       	st	Z, r24
					}
					password_entered[entries_counter] = x;
    49fa:	fe 01       	movw	r30, r28
    49fc:	e7 5b       	subi	r30, 0xB7	; 183
    49fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4a00:	80 81       	ld	r24, Z
    4a02:	28 2f       	mov	r18, r24
    4a04:	30 e0       	ldi	r19, 0x00	; 0
    4a06:	ce 01       	movw	r24, r28
    4a08:	8b 5a       	subi	r24, 0xAB	; 171
    4a0a:	9f 4f       	sbci	r25, 0xFF	; 255
    4a0c:	dc 01       	movw	r26, r24
    4a0e:	a2 0f       	add	r26, r18
    4a10:	b3 1f       	adc	r27, r19
    4a12:	fe 01       	movw	r30, r28
    4a14:	e9 5b       	subi	r30, 0xB9	; 185
    4a16:	ff 4f       	sbci	r31, 0xFF	; 255
    4a18:	80 81       	ld	r24, Z
    4a1a:	8c 93       	st	X, r24
					LCD_CHAR('*');
    4a1c:	8a e2       	ldi	r24, 0x2A	; 42
    4a1e:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <LCD_CHAR>
					entries_counter++;
    4a22:	de 01       	movw	r26, r28
    4a24:	a7 5b       	subi	r26, 0xB7	; 183
    4a26:	bf 4f       	sbci	r27, 0xFF	; 255
    4a28:	fe 01       	movw	r30, r28
    4a2a:	e7 5b       	subi	r30, 0xB7	; 183
    4a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a2e:	80 81       	ld	r24, Z
    4a30:	8f 5f       	subi	r24, 0xFF	; 255
    4a32:	8c 93       	st	X, r24
			LCD_STRING("Enter Password!!");
			_delay_ms(1000);
			// Entering the password
			u8 entries_counter = 0;
			u8 typed = 0;
			while (entries_counter != 4) {
    4a34:	fe 01       	movw	r30, r28
    4a36:	e7 5b       	subi	r30, 0xB7	; 183
    4a38:	ff 4f       	sbci	r31, 0xFF	; 255
    4a3a:	80 81       	ld	r24, Z
    4a3c:	84 30       	cpi	r24, 0x04	; 4
    4a3e:	19 f6       	brne	.-122    	; 0x49c6 <main+0x1b4>
					LCD_CHAR('*');
					entries_counter++;
				}
			}
			// checking the password
			LCD_CMD(0x01);
    4a40:	81 e0       	ldi	r24, 0x01	; 1
    4a42:	0e 94 8a 1c 	call	0x3914	; 0x3914 <LCD_CMD>
			LCD_STRING("Waiting...");
    4a46:	81 e7       	ldi	r24, 0x71	; 113
    4a48:	90 e0       	ldi	r25, 0x00	; 0
    4a4a:	0e 94 85 22 	call	0x450a	; 0x450a <LCD_STRING>
    4a4e:	80 e0       	ldi	r24, 0x00	; 0
    4a50:	90 e0       	ldi	r25, 0x00	; 0
    4a52:	aa e7       	ldi	r26, 0x7A	; 122
    4a54:	b4 e4       	ldi	r27, 0x44	; 68
    4a56:	8d ab       	std	Y+53, r24	; 0x35
    4a58:	9e ab       	std	Y+54, r25	; 0x36
    4a5a:	af ab       	std	Y+55, r26	; 0x37
    4a5c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a5e:	6d a9       	ldd	r22, Y+53	; 0x35
    4a60:	7e a9       	ldd	r23, Y+54	; 0x36
    4a62:	8f a9       	ldd	r24, Y+55	; 0x37
    4a64:	98 ad       	ldd	r25, Y+56	; 0x38
    4a66:	20 e0       	ldi	r18, 0x00	; 0
    4a68:	30 e0       	ldi	r19, 0x00	; 0
    4a6a:	4a ef       	ldi	r20, 0xFA	; 250
    4a6c:	54 e4       	ldi	r21, 0x44	; 68
    4a6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a72:	dc 01       	movw	r26, r24
    4a74:	cb 01       	movw	r24, r22
    4a76:	89 ab       	std	Y+49, r24	; 0x31
    4a78:	9a ab       	std	Y+50, r25	; 0x32
    4a7a:	ab ab       	std	Y+51, r26	; 0x33
    4a7c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4a7e:	69 a9       	ldd	r22, Y+49	; 0x31
    4a80:	7a a9       	ldd	r23, Y+50	; 0x32
    4a82:	8b a9       	ldd	r24, Y+51	; 0x33
    4a84:	9c a9       	ldd	r25, Y+52	; 0x34
    4a86:	20 e0       	ldi	r18, 0x00	; 0
    4a88:	30 e0       	ldi	r19, 0x00	; 0
    4a8a:	40 e8       	ldi	r20, 0x80	; 128
    4a8c:	5f e3       	ldi	r21, 0x3F	; 63
    4a8e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a92:	88 23       	and	r24, r24
    4a94:	2c f4       	brge	.+10     	; 0x4aa0 <main+0x28e>
		__ticks = 1;
    4a96:	81 e0       	ldi	r24, 0x01	; 1
    4a98:	90 e0       	ldi	r25, 0x00	; 0
    4a9a:	98 ab       	std	Y+48, r25	; 0x30
    4a9c:	8f a7       	std	Y+47, r24	; 0x2f
    4a9e:	3f c0       	rjmp	.+126    	; 0x4b1e <main+0x30c>
	else if (__tmp > 65535)
    4aa0:	69 a9       	ldd	r22, Y+49	; 0x31
    4aa2:	7a a9       	ldd	r23, Y+50	; 0x32
    4aa4:	8b a9       	ldd	r24, Y+51	; 0x33
    4aa6:	9c a9       	ldd	r25, Y+52	; 0x34
    4aa8:	20 e0       	ldi	r18, 0x00	; 0
    4aaa:	3f ef       	ldi	r19, 0xFF	; 255
    4aac:	4f e7       	ldi	r20, 0x7F	; 127
    4aae:	57 e4       	ldi	r21, 0x47	; 71
    4ab0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4ab4:	18 16       	cp	r1, r24
    4ab6:	4c f5       	brge	.+82     	; 0x4b0a <main+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ab8:	6d a9       	ldd	r22, Y+53	; 0x35
    4aba:	7e a9       	ldd	r23, Y+54	; 0x36
    4abc:	8f a9       	ldd	r24, Y+55	; 0x37
    4abe:	98 ad       	ldd	r25, Y+56	; 0x38
    4ac0:	20 e0       	ldi	r18, 0x00	; 0
    4ac2:	30 e0       	ldi	r19, 0x00	; 0
    4ac4:	40 e2       	ldi	r20, 0x20	; 32
    4ac6:	51 e4       	ldi	r21, 0x41	; 65
    4ac8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4acc:	dc 01       	movw	r26, r24
    4ace:	cb 01       	movw	r24, r22
    4ad0:	bc 01       	movw	r22, r24
    4ad2:	cd 01       	movw	r24, r26
    4ad4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ad8:	dc 01       	movw	r26, r24
    4ada:	cb 01       	movw	r24, r22
    4adc:	98 ab       	std	Y+48, r25	; 0x30
    4ade:	8f a7       	std	Y+47, r24	; 0x2f
    4ae0:	0f c0       	rjmp	.+30     	; 0x4b00 <main+0x2ee>
    4ae2:	88 ec       	ldi	r24, 0xC8	; 200
    4ae4:	90 e0       	ldi	r25, 0x00	; 0
    4ae6:	9e a7       	std	Y+46, r25	; 0x2e
    4ae8:	8d a7       	std	Y+45, r24	; 0x2d
    4aea:	8d a5       	ldd	r24, Y+45	; 0x2d
    4aec:	9e a5       	ldd	r25, Y+46	; 0x2e
    4aee:	01 97       	sbiw	r24, 0x01	; 1
    4af0:	f1 f7       	brne	.-4      	; 0x4aee <main+0x2dc>
    4af2:	9e a7       	std	Y+46, r25	; 0x2e
    4af4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4af6:	8f a5       	ldd	r24, Y+47	; 0x2f
    4af8:	98 a9       	ldd	r25, Y+48	; 0x30
    4afa:	01 97       	sbiw	r24, 0x01	; 1
    4afc:	98 ab       	std	Y+48, r25	; 0x30
    4afe:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b00:	8f a5       	ldd	r24, Y+47	; 0x2f
    4b02:	98 a9       	ldd	r25, Y+48	; 0x30
    4b04:	00 97       	sbiw	r24, 0x00	; 0
    4b06:	69 f7       	brne	.-38     	; 0x4ae2 <main+0x2d0>
    4b08:	14 c0       	rjmp	.+40     	; 0x4b32 <main+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b0a:	69 a9       	ldd	r22, Y+49	; 0x31
    4b0c:	7a a9       	ldd	r23, Y+50	; 0x32
    4b0e:	8b a9       	ldd	r24, Y+51	; 0x33
    4b10:	9c a9       	ldd	r25, Y+52	; 0x34
    4b12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b16:	dc 01       	movw	r26, r24
    4b18:	cb 01       	movw	r24, r22
    4b1a:	98 ab       	std	Y+48, r25	; 0x30
    4b1c:	8f a7       	std	Y+47, r24	; 0x2f
    4b1e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4b20:	98 a9       	ldd	r25, Y+48	; 0x30
    4b22:	9c a7       	std	Y+44, r25	; 0x2c
    4b24:	8b a7       	std	Y+43, r24	; 0x2b
    4b26:	8b a5       	ldd	r24, Y+43	; 0x2b
    4b28:	9c a5       	ldd	r25, Y+44	; 0x2c
    4b2a:	01 97       	sbiw	r24, 0x01	; 1
    4b2c:	f1 f7       	brne	.-4      	; 0x4b2a <main+0x318>
    4b2e:	9c a7       	std	Y+44, r25	; 0x2c
    4b30:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1000);
			entries_counter = 0;
    4b32:	fe 01       	movw	r30, r28
    4b34:	e7 5b       	subi	r30, 0xB7	; 183
    4b36:	ff 4f       	sbci	r31, 0xFF	; 255
    4b38:	10 82       	st	Z, r1
    4b3a:	5b c1       	rjmp	.+694    	; 0x4df2 <main+0x5e0>
			while (entries_counter != 4) {
				EEPROM_Read(password_addresses[entries_counter], &R);
    4b3c:	fe 01       	movw	r30, r28
    4b3e:	e7 5b       	subi	r30, 0xB7	; 183
    4b40:	ff 4f       	sbci	r31, 0xFF	; 255
    4b42:	80 81       	ld	r24, Z
    4b44:	28 2f       	mov	r18, r24
    4b46:	30 e0       	ldi	r19, 0x00	; 0
    4b48:	ce 01       	movw	r24, r28
    4b4a:	84 5b       	subi	r24, 0xB4	; 180
    4b4c:	9f 4f       	sbci	r25, 0xFF	; 255
    4b4e:	fc 01       	movw	r30, r24
    4b50:	e2 0f       	add	r30, r18
    4b52:	f3 1f       	adc	r31, r19
    4b54:	80 81       	ld	r24, Z
    4b56:	9e 01       	movw	r18, r28
    4b58:	2c 5a       	subi	r18, 0xAC	; 172
    4b5a:	3f 4f       	sbci	r19, 0xFF	; 255
    4b5c:	b9 01       	movw	r22, r18
    4b5e:	0e 94 e7 23 	call	0x47ce	; 0x47ce <EEPROM_Read>
				char buffer[1];
				itoa(R, buffer, 10);
    4b62:	fe 01       	movw	r30, r28
    4b64:	ec 5a       	subi	r30, 0xAC	; 172
    4b66:	ff 4f       	sbci	r31, 0xFF	; 255
    4b68:	80 81       	ld	r24, Z
    4b6a:	88 2f       	mov	r24, r24
    4b6c:	90 e0       	ldi	r25, 0x00	; 0
    4b6e:	9e 01       	movw	r18, r28
    4b70:	27 5a       	subi	r18, 0xA7	; 167
    4b72:	3f 4f       	sbci	r19, 0xFF	; 255
    4b74:	b9 01       	movw	r22, r18
    4b76:	4a e0       	ldi	r20, 0x0A	; 10
    4b78:	50 e0       	ldi	r21, 0x00	; 0
    4b7a:	0e 94 e0 29 	call	0x53c0	; 0x53c0 <itoa>
    4b7e:	80 e0       	ldi	r24, 0x00	; 0
    4b80:	90 e0       	ldi	r25, 0x00	; 0
    4b82:	aa e7       	ldi	r26, 0x7A	; 122
    4b84:	b4 e4       	ldi	r27, 0x44	; 68
    4b86:	8f a3       	std	Y+39, r24	; 0x27
    4b88:	98 a7       	std	Y+40, r25	; 0x28
    4b8a:	a9 a7       	std	Y+41, r26	; 0x29
    4b8c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b8e:	6f a1       	ldd	r22, Y+39	; 0x27
    4b90:	78 a5       	ldd	r23, Y+40	; 0x28
    4b92:	89 a5       	ldd	r24, Y+41	; 0x29
    4b94:	9a a5       	ldd	r25, Y+42	; 0x2a
    4b96:	20 e0       	ldi	r18, 0x00	; 0
    4b98:	30 e0       	ldi	r19, 0x00	; 0
    4b9a:	4a ef       	ldi	r20, 0xFA	; 250
    4b9c:	54 e4       	ldi	r21, 0x44	; 68
    4b9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ba2:	dc 01       	movw	r26, r24
    4ba4:	cb 01       	movw	r24, r22
    4ba6:	8b a3       	std	Y+35, r24	; 0x23
    4ba8:	9c a3       	std	Y+36, r25	; 0x24
    4baa:	ad a3       	std	Y+37, r26	; 0x25
    4bac:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4bae:	6b a1       	ldd	r22, Y+35	; 0x23
    4bb0:	7c a1       	ldd	r23, Y+36	; 0x24
    4bb2:	8d a1       	ldd	r24, Y+37	; 0x25
    4bb4:	9e a1       	ldd	r25, Y+38	; 0x26
    4bb6:	20 e0       	ldi	r18, 0x00	; 0
    4bb8:	30 e0       	ldi	r19, 0x00	; 0
    4bba:	40 e8       	ldi	r20, 0x80	; 128
    4bbc:	5f e3       	ldi	r21, 0x3F	; 63
    4bbe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4bc2:	88 23       	and	r24, r24
    4bc4:	2c f4       	brge	.+10     	; 0x4bd0 <main+0x3be>
		__ticks = 1;
    4bc6:	81 e0       	ldi	r24, 0x01	; 1
    4bc8:	90 e0       	ldi	r25, 0x00	; 0
    4bca:	9a a3       	std	Y+34, r25	; 0x22
    4bcc:	89 a3       	std	Y+33, r24	; 0x21
    4bce:	3f c0       	rjmp	.+126    	; 0x4c4e <main+0x43c>
	else if (__tmp > 65535)
    4bd0:	6b a1       	ldd	r22, Y+35	; 0x23
    4bd2:	7c a1       	ldd	r23, Y+36	; 0x24
    4bd4:	8d a1       	ldd	r24, Y+37	; 0x25
    4bd6:	9e a1       	ldd	r25, Y+38	; 0x26
    4bd8:	20 e0       	ldi	r18, 0x00	; 0
    4bda:	3f ef       	ldi	r19, 0xFF	; 255
    4bdc:	4f e7       	ldi	r20, 0x7F	; 127
    4bde:	57 e4       	ldi	r21, 0x47	; 71
    4be0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4be4:	18 16       	cp	r1, r24
    4be6:	4c f5       	brge	.+82     	; 0x4c3a <main+0x428>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4be8:	6f a1       	ldd	r22, Y+39	; 0x27
    4bea:	78 a5       	ldd	r23, Y+40	; 0x28
    4bec:	89 a5       	ldd	r24, Y+41	; 0x29
    4bee:	9a a5       	ldd	r25, Y+42	; 0x2a
    4bf0:	20 e0       	ldi	r18, 0x00	; 0
    4bf2:	30 e0       	ldi	r19, 0x00	; 0
    4bf4:	40 e2       	ldi	r20, 0x20	; 32
    4bf6:	51 e4       	ldi	r21, 0x41	; 65
    4bf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bfc:	dc 01       	movw	r26, r24
    4bfe:	cb 01       	movw	r24, r22
    4c00:	bc 01       	movw	r22, r24
    4c02:	cd 01       	movw	r24, r26
    4c04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c08:	dc 01       	movw	r26, r24
    4c0a:	cb 01       	movw	r24, r22
    4c0c:	9a a3       	std	Y+34, r25	; 0x22
    4c0e:	89 a3       	std	Y+33, r24	; 0x21
    4c10:	0f c0       	rjmp	.+30     	; 0x4c30 <main+0x41e>
    4c12:	88 ec       	ldi	r24, 0xC8	; 200
    4c14:	90 e0       	ldi	r25, 0x00	; 0
    4c16:	98 a3       	std	Y+32, r25	; 0x20
    4c18:	8f 8f       	std	Y+31, r24	; 0x1f
    4c1a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4c1c:	98 a1       	ldd	r25, Y+32	; 0x20
    4c1e:	01 97       	sbiw	r24, 0x01	; 1
    4c20:	f1 f7       	brne	.-4      	; 0x4c1e <main+0x40c>
    4c22:	98 a3       	std	Y+32, r25	; 0x20
    4c24:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c26:	89 a1       	ldd	r24, Y+33	; 0x21
    4c28:	9a a1       	ldd	r25, Y+34	; 0x22
    4c2a:	01 97       	sbiw	r24, 0x01	; 1
    4c2c:	9a a3       	std	Y+34, r25	; 0x22
    4c2e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c30:	89 a1       	ldd	r24, Y+33	; 0x21
    4c32:	9a a1       	ldd	r25, Y+34	; 0x22
    4c34:	00 97       	sbiw	r24, 0x00	; 0
    4c36:	69 f7       	brne	.-38     	; 0x4c12 <main+0x400>
    4c38:	14 c0       	rjmp	.+40     	; 0x4c62 <main+0x450>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c3a:	6b a1       	ldd	r22, Y+35	; 0x23
    4c3c:	7c a1       	ldd	r23, Y+36	; 0x24
    4c3e:	8d a1       	ldd	r24, Y+37	; 0x25
    4c40:	9e a1       	ldd	r25, Y+38	; 0x26
    4c42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c46:	dc 01       	movw	r26, r24
    4c48:	cb 01       	movw	r24, r22
    4c4a:	9a a3       	std	Y+34, r25	; 0x22
    4c4c:	89 a3       	std	Y+33, r24	; 0x21
    4c4e:	89 a1       	ldd	r24, Y+33	; 0x21
    4c50:	9a a1       	ldd	r25, Y+34	; 0x22
    4c52:	9e 8f       	std	Y+30, r25	; 0x1e
    4c54:	8d 8f       	std	Y+29, r24	; 0x1d
    4c56:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4c58:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4c5a:	01 97       	sbiw	r24, 0x01	; 1
    4c5c:	f1 f7       	brne	.-4      	; 0x4c5a <main+0x448>
    4c5e:	9e 8f       	std	Y+30, r25	; 0x1e
    4c60:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(1000);
				// convert char to string
				char key_1[1] = "\0";
    4c62:	fe 01       	movw	r30, r28
    4c64:	e6 5a       	subi	r30, 0xA6	; 166
    4c66:	ff 4f       	sbci	r31, 0xFF	; 255
    4c68:	80 91 9c 00 	lds	r24, 0x009C
    4c6c:	80 83       	st	Z, r24
				char key_2[1] = "\0";
    4c6e:	fe 01       	movw	r30, r28
    4c70:	e5 5a       	subi	r30, 0xA5	; 165
    4c72:	ff 4f       	sbci	r31, 0xFF	; 255
    4c74:	80 91 9c 00 	lds	r24, 0x009C
    4c78:	80 83       	st	Z, r24
				key_1[0] = buffer[0];
    4c7a:	fe 01       	movw	r30, r28
    4c7c:	e7 5a       	subi	r30, 0xA7	; 167
    4c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c80:	80 81       	ld	r24, Z
    4c82:	fe 01       	movw	r30, r28
    4c84:	e6 5a       	subi	r30, 0xA6	; 166
    4c86:	ff 4f       	sbci	r31, 0xFF	; 255
    4c88:	80 83       	st	Z, r24
				key_2[0] = password_entered[entries_counter];
    4c8a:	fe 01       	movw	r30, r28
    4c8c:	e7 5b       	subi	r30, 0xB7	; 183
    4c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c90:	80 81       	ld	r24, Z
    4c92:	28 2f       	mov	r18, r24
    4c94:	30 e0       	ldi	r19, 0x00	; 0
    4c96:	ce 01       	movw	r24, r28
    4c98:	8b 5a       	subi	r24, 0xAB	; 171
    4c9a:	9f 4f       	sbci	r25, 0xFF	; 255
    4c9c:	fc 01       	movw	r30, r24
    4c9e:	e2 0f       	add	r30, r18
    4ca0:	f3 1f       	adc	r31, r19
    4ca2:	80 81       	ld	r24, Z
    4ca4:	fe 01       	movw	r30, r28
    4ca6:	e5 5a       	subi	r30, 0xA5	; 165
    4ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    4caa:	80 83       	st	Z, r24
				if (key_1[0] == key_2[0]) {
    4cac:	fe 01       	movw	r30, r28
    4cae:	e6 5a       	subi	r30, 0xA6	; 166
    4cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    4cb2:	90 81       	ld	r25, Z
    4cb4:	fe 01       	movw	r30, r28
    4cb6:	e5 5a       	subi	r30, 0xA5	; 165
    4cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    4cba:	80 81       	ld	r24, Z
    4cbc:	98 17       	cp	r25, r24
    4cbe:	09 f4       	brne	.+2      	; 0x4cc2 <main+0x4b0>
    4cc0:	8f c0       	rjmp	.+286    	; 0x4de0 <main+0x5ce>
					//do nothing
				} else {
					LCD_CMD(0x01);
    4cc2:	81 e0       	ldi	r24, 0x01	; 1
    4cc4:	0e 94 8a 1c 	call	0x3914	; 0x3914 <LCD_CMD>
					LCD_STRING("Wrong Password");
    4cc8:	8c e7       	ldi	r24, 0x7C	; 124
    4cca:	90 e0       	ldi	r25, 0x00	; 0
    4ccc:	0e 94 85 22 	call	0x450a	; 0x450a <LCD_STRING>
					wrong_pass++;
    4cd0:	de 01       	movw	r26, r28
    4cd2:	a6 5b       	subi	r26, 0xB6	; 182
    4cd4:	bf 4f       	sbci	r27, 0xFF	; 255
    4cd6:	fe 01       	movw	r30, r28
    4cd8:	e6 5b       	subi	r30, 0xB6	; 182
    4cda:	ff 4f       	sbci	r31, 0xFF	; 255
    4cdc:	80 81       	ld	r24, Z
    4cde:	8f 5f       	subi	r24, 0xFF	; 255
    4ce0:	8c 93       	st	X, r24
					if (wrong_pass >= 3) {
    4ce2:	fe 01       	movw	r30, r28
    4ce4:	e6 5b       	subi	r30, 0xB6	; 182
    4ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ce8:	80 81       	ld	r24, Z
    4cea:	83 30       	cpi	r24, 0x03	; 3
    4cec:	30 f0       	brcs	.+12     	; 0x4cfa <main+0x4e8>
						Alarm();
    4cee:	0e 94 d1 27 	call	0x4fa2	; 0x4fa2 <Alarm>
						wrong_pass = 0;
    4cf2:	fe 01       	movw	r30, r28
    4cf4:	e6 5b       	subi	r30, 0xB6	; 182
    4cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    4cf8:	10 82       	st	Z, r1
    4cfa:	80 e0       	ldi	r24, 0x00	; 0
    4cfc:	90 e0       	ldi	r25, 0x00	; 0
    4cfe:	aa e7       	ldi	r26, 0x7A	; 122
    4d00:	b4 e4       	ldi	r27, 0x44	; 68
    4d02:	89 8f       	std	Y+25, r24	; 0x19
    4d04:	9a 8f       	std	Y+26, r25	; 0x1a
    4d06:	ab 8f       	std	Y+27, r26	; 0x1b
    4d08:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d0a:	69 8d       	ldd	r22, Y+25	; 0x19
    4d0c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4d0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4d10:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4d12:	20 e0       	ldi	r18, 0x00	; 0
    4d14:	30 e0       	ldi	r19, 0x00	; 0
    4d16:	4a ef       	ldi	r20, 0xFA	; 250
    4d18:	54 e4       	ldi	r21, 0x44	; 68
    4d1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d1e:	dc 01       	movw	r26, r24
    4d20:	cb 01       	movw	r24, r22
    4d22:	8d 8b       	std	Y+21, r24	; 0x15
    4d24:	9e 8b       	std	Y+22, r25	; 0x16
    4d26:	af 8b       	std	Y+23, r26	; 0x17
    4d28:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4d2a:	6d 89       	ldd	r22, Y+21	; 0x15
    4d2c:	7e 89       	ldd	r23, Y+22	; 0x16
    4d2e:	8f 89       	ldd	r24, Y+23	; 0x17
    4d30:	98 8d       	ldd	r25, Y+24	; 0x18
    4d32:	20 e0       	ldi	r18, 0x00	; 0
    4d34:	30 e0       	ldi	r19, 0x00	; 0
    4d36:	40 e8       	ldi	r20, 0x80	; 128
    4d38:	5f e3       	ldi	r21, 0x3F	; 63
    4d3a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d3e:	88 23       	and	r24, r24
    4d40:	2c f4       	brge	.+10     	; 0x4d4c <main+0x53a>
		__ticks = 1;
    4d42:	81 e0       	ldi	r24, 0x01	; 1
    4d44:	90 e0       	ldi	r25, 0x00	; 0
    4d46:	9c 8b       	std	Y+20, r25	; 0x14
    4d48:	8b 8b       	std	Y+19, r24	; 0x13
    4d4a:	3f c0       	rjmp	.+126    	; 0x4dca <main+0x5b8>
	else if (__tmp > 65535)
    4d4c:	6d 89       	ldd	r22, Y+21	; 0x15
    4d4e:	7e 89       	ldd	r23, Y+22	; 0x16
    4d50:	8f 89       	ldd	r24, Y+23	; 0x17
    4d52:	98 8d       	ldd	r25, Y+24	; 0x18
    4d54:	20 e0       	ldi	r18, 0x00	; 0
    4d56:	3f ef       	ldi	r19, 0xFF	; 255
    4d58:	4f e7       	ldi	r20, 0x7F	; 127
    4d5a:	57 e4       	ldi	r21, 0x47	; 71
    4d5c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d60:	18 16       	cp	r1, r24
    4d62:	4c f5       	brge	.+82     	; 0x4db6 <main+0x5a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d64:	69 8d       	ldd	r22, Y+25	; 0x19
    4d66:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4d68:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4d6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4d6c:	20 e0       	ldi	r18, 0x00	; 0
    4d6e:	30 e0       	ldi	r19, 0x00	; 0
    4d70:	40 e2       	ldi	r20, 0x20	; 32
    4d72:	51 e4       	ldi	r21, 0x41	; 65
    4d74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d78:	dc 01       	movw	r26, r24
    4d7a:	cb 01       	movw	r24, r22
    4d7c:	bc 01       	movw	r22, r24
    4d7e:	cd 01       	movw	r24, r26
    4d80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d84:	dc 01       	movw	r26, r24
    4d86:	cb 01       	movw	r24, r22
    4d88:	9c 8b       	std	Y+20, r25	; 0x14
    4d8a:	8b 8b       	std	Y+19, r24	; 0x13
    4d8c:	0f c0       	rjmp	.+30     	; 0x4dac <main+0x59a>
    4d8e:	88 ec       	ldi	r24, 0xC8	; 200
    4d90:	90 e0       	ldi	r25, 0x00	; 0
    4d92:	9a 8b       	std	Y+18, r25	; 0x12
    4d94:	89 8b       	std	Y+17, r24	; 0x11
    4d96:	89 89       	ldd	r24, Y+17	; 0x11
    4d98:	9a 89       	ldd	r25, Y+18	; 0x12
    4d9a:	01 97       	sbiw	r24, 0x01	; 1
    4d9c:	f1 f7       	brne	.-4      	; 0x4d9a <main+0x588>
    4d9e:	9a 8b       	std	Y+18, r25	; 0x12
    4da0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4da2:	8b 89       	ldd	r24, Y+19	; 0x13
    4da4:	9c 89       	ldd	r25, Y+20	; 0x14
    4da6:	01 97       	sbiw	r24, 0x01	; 1
    4da8:	9c 8b       	std	Y+20, r25	; 0x14
    4daa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4dac:	8b 89       	ldd	r24, Y+19	; 0x13
    4dae:	9c 89       	ldd	r25, Y+20	; 0x14
    4db0:	00 97       	sbiw	r24, 0x00	; 0
    4db2:	69 f7       	brne	.-38     	; 0x4d8e <main+0x57c>
    4db4:	25 c0       	rjmp	.+74     	; 0x4e00 <main+0x5ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4db6:	6d 89       	ldd	r22, Y+21	; 0x15
    4db8:	7e 89       	ldd	r23, Y+22	; 0x16
    4dba:	8f 89       	ldd	r24, Y+23	; 0x17
    4dbc:	98 8d       	ldd	r25, Y+24	; 0x18
    4dbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dc2:	dc 01       	movw	r26, r24
    4dc4:	cb 01       	movw	r24, r22
    4dc6:	9c 8b       	std	Y+20, r25	; 0x14
    4dc8:	8b 8b       	std	Y+19, r24	; 0x13
    4dca:	8b 89       	ldd	r24, Y+19	; 0x13
    4dcc:	9c 89       	ldd	r25, Y+20	; 0x14
    4dce:	98 8b       	std	Y+16, r25	; 0x10
    4dd0:	8f 87       	std	Y+15, r24	; 0x0f
    4dd2:	8f 85       	ldd	r24, Y+15	; 0x0f
    4dd4:	98 89       	ldd	r25, Y+16	; 0x10
    4dd6:	01 97       	sbiw	r24, 0x01	; 1
    4dd8:	f1 f7       	brne	.-4      	; 0x4dd6 <main+0x5c4>
    4dda:	98 8b       	std	Y+16, r25	; 0x10
    4ddc:	8f 87       	std	Y+15, r24	; 0x0f
    4dde:	10 c0       	rjmp	.+32     	; 0x4e00 <main+0x5ee>
					}
					_delay_ms(1000);
					break;
				}
				entries_counter++;
    4de0:	de 01       	movw	r26, r28
    4de2:	a7 5b       	subi	r26, 0xB7	; 183
    4de4:	bf 4f       	sbci	r27, 0xFF	; 255
    4de6:	fe 01       	movw	r30, r28
    4de8:	e7 5b       	subi	r30, 0xB7	; 183
    4dea:	ff 4f       	sbci	r31, 0xFF	; 255
    4dec:	80 81       	ld	r24, Z
    4dee:	8f 5f       	subi	r24, 0xFF	; 255
    4df0:	8c 93       	st	X, r24
			// checking the password
			LCD_CMD(0x01);
			LCD_STRING("Waiting...");
			_delay_ms(1000);
			entries_counter = 0;
			while (entries_counter != 4) {
    4df2:	fe 01       	movw	r30, r28
    4df4:	e7 5b       	subi	r30, 0xB7	; 183
    4df6:	ff 4f       	sbci	r31, 0xFF	; 255
    4df8:	80 81       	ld	r24, Z
    4dfa:	84 30       	cpi	r24, 0x04	; 4
    4dfc:	09 f0       	breq	.+2      	; 0x4e00 <main+0x5ee>
    4dfe:	9e ce       	rjmp	.-708    	; 0x4b3c <main+0x32a>
					_delay_ms(1000);
					break;
				}
				entries_counter++;
			}
			if (entries_counter == 4) {
    4e00:	fe 01       	movw	r30, r28
    4e02:	e7 5b       	subi	r30, 0xB7	; 183
    4e04:	ff 4f       	sbci	r31, 0xFF	; 255
    4e06:	80 81       	ld	r24, Z
    4e08:	84 30       	cpi	r24, 0x04	; 4
    4e0a:	09 f0       	breq	.+2      	; 0x4e0e <main+0x5fc>
    4e0c:	82 c0       	rjmp	.+260    	; 0x4f12 <main+0x700>
				pass = 1;
    4e0e:	fe 01       	movw	r30, r28
    4e10:	e5 5b       	subi	r30, 0xB5	; 181
    4e12:	ff 4f       	sbci	r31, 0xFF	; 255
    4e14:	81 e0       	ldi	r24, 0x01	; 1
    4e16:	80 83       	st	Z, r24
				LCD_CMD(0x01);
    4e18:	81 e0       	ldi	r24, 0x01	; 1
    4e1a:	0e 94 8a 1c 	call	0x3914	; 0x3914 <LCD_CMD>
				LCD_STRING("Correct Password");
    4e1e:	8b e8       	ldi	r24, 0x8B	; 139
    4e20:	90 e0       	ldi	r25, 0x00	; 0
    4e22:	0e 94 85 22 	call	0x450a	; 0x450a <LCD_STRING>
				Open_Gate();
    4e26:	0e 94 b7 27 	call	0x4f6e	; 0x4f6e <Open_Gate>
				FAN_Init();
    4e2a:	0e 94 85 23 	call	0x470a	; 0x470a <FAN_Init>
    4e2e:	80 e0       	ldi	r24, 0x00	; 0
    4e30:	90 e0       	ldi	r25, 0x00	; 0
    4e32:	aa e7       	ldi	r26, 0x7A	; 122
    4e34:	b4 e4       	ldi	r27, 0x44	; 68
    4e36:	8b 87       	std	Y+11, r24	; 0x0b
    4e38:	9c 87       	std	Y+12, r25	; 0x0c
    4e3a:	ad 87       	std	Y+13, r26	; 0x0d
    4e3c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e40:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e42:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e44:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e46:	20 e0       	ldi	r18, 0x00	; 0
    4e48:	30 e0       	ldi	r19, 0x00	; 0
    4e4a:	4a ef       	ldi	r20, 0xFA	; 250
    4e4c:	54 e4       	ldi	r21, 0x44	; 68
    4e4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e52:	dc 01       	movw	r26, r24
    4e54:	cb 01       	movw	r24, r22
    4e56:	8f 83       	std	Y+7, r24	; 0x07
    4e58:	98 87       	std	Y+8, r25	; 0x08
    4e5a:	a9 87       	std	Y+9, r26	; 0x09
    4e5c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4e5e:	6f 81       	ldd	r22, Y+7	; 0x07
    4e60:	78 85       	ldd	r23, Y+8	; 0x08
    4e62:	89 85       	ldd	r24, Y+9	; 0x09
    4e64:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e66:	20 e0       	ldi	r18, 0x00	; 0
    4e68:	30 e0       	ldi	r19, 0x00	; 0
    4e6a:	40 e8       	ldi	r20, 0x80	; 128
    4e6c:	5f e3       	ldi	r21, 0x3F	; 63
    4e6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4e72:	88 23       	and	r24, r24
    4e74:	2c f4       	brge	.+10     	; 0x4e80 <main+0x66e>
		__ticks = 1;
    4e76:	81 e0       	ldi	r24, 0x01	; 1
    4e78:	90 e0       	ldi	r25, 0x00	; 0
    4e7a:	9e 83       	std	Y+6, r25	; 0x06
    4e7c:	8d 83       	std	Y+5, r24	; 0x05
    4e7e:	3f c0       	rjmp	.+126    	; 0x4efe <main+0x6ec>
	else if (__tmp > 65535)
    4e80:	6f 81       	ldd	r22, Y+7	; 0x07
    4e82:	78 85       	ldd	r23, Y+8	; 0x08
    4e84:	89 85       	ldd	r24, Y+9	; 0x09
    4e86:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e88:	20 e0       	ldi	r18, 0x00	; 0
    4e8a:	3f ef       	ldi	r19, 0xFF	; 255
    4e8c:	4f e7       	ldi	r20, 0x7F	; 127
    4e8e:	57 e4       	ldi	r21, 0x47	; 71
    4e90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4e94:	18 16       	cp	r1, r24
    4e96:	4c f5       	brge	.+82     	; 0x4eea <main+0x6d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e98:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ea0:	20 e0       	ldi	r18, 0x00	; 0
    4ea2:	30 e0       	ldi	r19, 0x00	; 0
    4ea4:	40 e2       	ldi	r20, 0x20	; 32
    4ea6:	51 e4       	ldi	r21, 0x41	; 65
    4ea8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4eac:	dc 01       	movw	r26, r24
    4eae:	cb 01       	movw	r24, r22
    4eb0:	bc 01       	movw	r22, r24
    4eb2:	cd 01       	movw	r24, r26
    4eb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4eb8:	dc 01       	movw	r26, r24
    4eba:	cb 01       	movw	r24, r22
    4ebc:	9e 83       	std	Y+6, r25	; 0x06
    4ebe:	8d 83       	std	Y+5, r24	; 0x05
    4ec0:	0f c0       	rjmp	.+30     	; 0x4ee0 <main+0x6ce>
    4ec2:	88 ec       	ldi	r24, 0xC8	; 200
    4ec4:	90 e0       	ldi	r25, 0x00	; 0
    4ec6:	9c 83       	std	Y+4, r25	; 0x04
    4ec8:	8b 83       	std	Y+3, r24	; 0x03
    4eca:	8b 81       	ldd	r24, Y+3	; 0x03
    4ecc:	9c 81       	ldd	r25, Y+4	; 0x04
    4ece:	01 97       	sbiw	r24, 0x01	; 1
    4ed0:	f1 f7       	brne	.-4      	; 0x4ece <main+0x6bc>
    4ed2:	9c 83       	std	Y+4, r25	; 0x04
    4ed4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ed6:	8d 81       	ldd	r24, Y+5	; 0x05
    4ed8:	9e 81       	ldd	r25, Y+6	; 0x06
    4eda:	01 97       	sbiw	r24, 0x01	; 1
    4edc:	9e 83       	std	Y+6, r25	; 0x06
    4ede:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ee0:	8d 81       	ldd	r24, Y+5	; 0x05
    4ee2:	9e 81       	ldd	r25, Y+6	; 0x06
    4ee4:	00 97       	sbiw	r24, 0x00	; 0
    4ee6:	69 f7       	brne	.-38     	; 0x4ec2 <main+0x6b0>
    4ee8:	14 c0       	rjmp	.+40     	; 0x4f12 <main+0x700>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4eea:	6f 81       	ldd	r22, Y+7	; 0x07
    4eec:	78 85       	ldd	r23, Y+8	; 0x08
    4eee:	89 85       	ldd	r24, Y+9	; 0x09
    4ef0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ef2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ef6:	dc 01       	movw	r26, r24
    4ef8:	cb 01       	movw	r24, r22
    4efa:	9e 83       	std	Y+6, r25	; 0x06
    4efc:	8d 83       	std	Y+5, r24	; 0x05
    4efe:	8d 81       	ldd	r24, Y+5	; 0x05
    4f00:	9e 81       	ldd	r25, Y+6	; 0x06
    4f02:	9a 83       	std	Y+2, r25	; 0x02
    4f04:	89 83       	std	Y+1, r24	; 0x01
    4f06:	89 81       	ldd	r24, Y+1	; 0x01
    4f08:	9a 81       	ldd	r25, Y+2	; 0x02
    4f0a:	01 97       	sbiw	r24, 0x01	; 1
    4f0c:	f1 f7       	brne	.-4      	; 0x4f0a <main+0x6f8>
    4f0e:	9a 83       	std	Y+2, r25	; 0x02
    4f10:	89 83       	std	Y+1, r24	; 0x01

	u8 pass = 0;
	u8 wrong_pass = 0;

	while (1) {
		while (!pass) {
    4f12:	fe 01       	movw	r30, r28
    4f14:	e5 5b       	subi	r30, 0xB5	; 181
    4f16:	ff 4f       	sbci	r31, 0xFF	; 255
    4f18:	80 81       	ld	r24, Z
    4f1a:	88 23       	and	r24, r24
    4f1c:	09 f4       	brne	.+2      	; 0x4f20 <main+0x70e>
    4f1e:	be cc       	rjmp	.-1668   	; 0x489c <main+0x8a>
				Open_Gate();
				FAN_Init();
				_delay_ms(1000);
			}
		}
		if (pass == 1) {
    4f20:	fe 01       	movw	r30, r28
    4f22:	e5 5b       	subi	r30, 0xB5	; 181
    4f24:	ff 4f       	sbci	r31, 0xFF	; 255
    4f26:	80 81       	ld	r24, Z
    4f28:	81 30       	cpi	r24, 0x01	; 1
    4f2a:	99 f7       	brne	.-26     	; 0x4f12 <main+0x700>
			check_gate();
    4f2c:	0e 94 3c 29 	call	0x5278	; 0x5278 <check_gate>
			Stepper_Angle();
    4f30:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <Stepper_Angle>
			Read_Temp();
    4f34:	0e 94 e6 28 	call	0x51cc	; 0x51cc <Read_Temp>
			if ((int) celsius >= 18) {
    4f38:	80 91 3a 02 	lds	r24, 0x023A
    4f3c:	90 91 3b 02 	lds	r25, 0x023B
    4f40:	a0 91 3c 02 	lds	r26, 0x023C
    4f44:	b0 91 3d 02 	lds	r27, 0x023D
    4f48:	bc 01       	movw	r22, r24
    4f4a:	cd 01       	movw	r24, r26
    4f4c:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    4f50:	dc 01       	movw	r26, r24
    4f52:	cb 01       	movw	r24, r22
    4f54:	82 31       	cpi	r24, 0x12	; 18
    4f56:	91 05       	cpc	r25, r1
    4f58:	2c f0       	brlt	.+10     	; 0x4f64 <main+0x752>
				FAN_Speed(500);
    4f5a:	84 ef       	ldi	r24, 0xF4	; 244
    4f5c:	91 e0       	ldi	r25, 0x01	; 1
    4f5e:	0e 94 bc 23 	call	0x4778	; 0x4778 <FAN_Speed>
    4f62:	d7 cf       	rjmp	.-82     	; 0x4f12 <main+0x700>
			} else {
				FAN_Speed(250);
    4f64:	8a ef       	ldi	r24, 0xFA	; 250
    4f66:	90 e0       	ldi	r25, 0x00	; 0
    4f68:	0e 94 bc 23 	call	0x4778	; 0x4778 <FAN_Speed>
    4f6c:	d2 cf       	rjmp	.-92     	; 0x4f12 <main+0x700>

00004f6e <Open_Gate>:
			}
		}
	}
	return 0;
}
void Open_Gate() {
    4f6e:	df 93       	push	r29
    4f70:	cf 93       	push	r28
    4f72:	cd b7       	in	r28, 0x3d	; 61
    4f74:	de b7       	in	r29, 0x3e	; 62
	Servo_Angle(180);
    4f76:	64 eb       	ldi	r22, 0xB4	; 180
    4f78:	70 e0       	ldi	r23, 0x00	; 0
    4f7a:	80 e0       	ldi	r24, 0x00	; 0
    4f7c:	90 e0       	ldi	r25, 0x00	; 0
    4f7e:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <Servo_Angle>
}
    4f82:	cf 91       	pop	r28
    4f84:	df 91       	pop	r29
    4f86:	08 95       	ret

00004f88 <Close_Gate>:
void Close_Gate() {
    4f88:	df 93       	push	r29
    4f8a:	cf 93       	push	r28
    4f8c:	cd b7       	in	r28, 0x3d	; 61
    4f8e:	de b7       	in	r29, 0x3e	; 62
	Servo_Angle(90);
    4f90:	6a e5       	ldi	r22, 0x5A	; 90
    4f92:	70 e0       	ldi	r23, 0x00	; 0
    4f94:	80 e0       	ldi	r24, 0x00	; 0
    4f96:	90 e0       	ldi	r25, 0x00	; 0
    4f98:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <Servo_Angle>
}
    4f9c:	cf 91       	pop	r28
    4f9e:	df 91       	pop	r29
    4fa0:	08 95       	ret

00004fa2 <Alarm>:
void Alarm() {
    4fa2:	df 93       	push	r29
    4fa4:	cf 93       	push	r28
    4fa6:	cd b7       	in	r28, 0x3d	; 61
    4fa8:	de b7       	in	r29, 0x3e	; 62
    4faa:	6d 97       	sbiw	r28, 0x1d	; 29
    4fac:	0f b6       	in	r0, 0x3f	; 63
    4fae:	f8 94       	cli
    4fb0:	de bf       	out	0x3e, r29	; 62
    4fb2:	0f be       	out	0x3f, r0	; 63
    4fb4:	cd bf       	out	0x3d, r28	; 61
	for (u8 i = 0; i < 5; i++) {
    4fb6:	1d 8e       	std	Y+29, r1	; 0x1d
    4fb8:	f5 c0       	rjmp	.+490    	; 0x51a4 <Alarm+0x202>
		PORTD |= (1 << 6) | (1 << 5);
    4fba:	a2 e3       	ldi	r26, 0x32	; 50
    4fbc:	b0 e0       	ldi	r27, 0x00	; 0
    4fbe:	e2 e3       	ldi	r30, 0x32	; 50
    4fc0:	f0 e0       	ldi	r31, 0x00	; 0
    4fc2:	80 81       	ld	r24, Z
    4fc4:	80 66       	ori	r24, 0x60	; 96
    4fc6:	8c 93       	st	X, r24
    4fc8:	80 e0       	ldi	r24, 0x00	; 0
    4fca:	90 e0       	ldi	r25, 0x00	; 0
    4fcc:	aa e7       	ldi	r26, 0x7A	; 122
    4fce:	b4 e4       	ldi	r27, 0x44	; 68
    4fd0:	89 8f       	std	Y+25, r24	; 0x19
    4fd2:	9a 8f       	std	Y+26, r25	; 0x1a
    4fd4:	ab 8f       	std	Y+27, r26	; 0x1b
    4fd6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4fd8:	69 8d       	ldd	r22, Y+25	; 0x19
    4fda:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4fdc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4fde:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4fe0:	20 e0       	ldi	r18, 0x00	; 0
    4fe2:	30 e0       	ldi	r19, 0x00	; 0
    4fe4:	4a ef       	ldi	r20, 0xFA	; 250
    4fe6:	54 e4       	ldi	r21, 0x44	; 68
    4fe8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fec:	dc 01       	movw	r26, r24
    4fee:	cb 01       	movw	r24, r22
    4ff0:	8d 8b       	std	Y+21, r24	; 0x15
    4ff2:	9e 8b       	std	Y+22, r25	; 0x16
    4ff4:	af 8b       	std	Y+23, r26	; 0x17
    4ff6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4ff8:	6d 89       	ldd	r22, Y+21	; 0x15
    4ffa:	7e 89       	ldd	r23, Y+22	; 0x16
    4ffc:	8f 89       	ldd	r24, Y+23	; 0x17
    4ffe:	98 8d       	ldd	r25, Y+24	; 0x18
    5000:	20 e0       	ldi	r18, 0x00	; 0
    5002:	30 e0       	ldi	r19, 0x00	; 0
    5004:	40 e8       	ldi	r20, 0x80	; 128
    5006:	5f e3       	ldi	r21, 0x3F	; 63
    5008:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    500c:	88 23       	and	r24, r24
    500e:	2c f4       	brge	.+10     	; 0x501a <Alarm+0x78>
		__ticks = 1;
    5010:	81 e0       	ldi	r24, 0x01	; 1
    5012:	90 e0       	ldi	r25, 0x00	; 0
    5014:	9c 8b       	std	Y+20, r25	; 0x14
    5016:	8b 8b       	std	Y+19, r24	; 0x13
    5018:	3f c0       	rjmp	.+126    	; 0x5098 <Alarm+0xf6>
	else if (__tmp > 65535)
    501a:	6d 89       	ldd	r22, Y+21	; 0x15
    501c:	7e 89       	ldd	r23, Y+22	; 0x16
    501e:	8f 89       	ldd	r24, Y+23	; 0x17
    5020:	98 8d       	ldd	r25, Y+24	; 0x18
    5022:	20 e0       	ldi	r18, 0x00	; 0
    5024:	3f ef       	ldi	r19, 0xFF	; 255
    5026:	4f e7       	ldi	r20, 0x7F	; 127
    5028:	57 e4       	ldi	r21, 0x47	; 71
    502a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    502e:	18 16       	cp	r1, r24
    5030:	4c f5       	brge	.+82     	; 0x5084 <Alarm+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5032:	69 8d       	ldd	r22, Y+25	; 0x19
    5034:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5036:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5038:	9c 8d       	ldd	r25, Y+28	; 0x1c
    503a:	20 e0       	ldi	r18, 0x00	; 0
    503c:	30 e0       	ldi	r19, 0x00	; 0
    503e:	40 e2       	ldi	r20, 0x20	; 32
    5040:	51 e4       	ldi	r21, 0x41	; 65
    5042:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5046:	dc 01       	movw	r26, r24
    5048:	cb 01       	movw	r24, r22
    504a:	bc 01       	movw	r22, r24
    504c:	cd 01       	movw	r24, r26
    504e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5052:	dc 01       	movw	r26, r24
    5054:	cb 01       	movw	r24, r22
    5056:	9c 8b       	std	Y+20, r25	; 0x14
    5058:	8b 8b       	std	Y+19, r24	; 0x13
    505a:	0f c0       	rjmp	.+30     	; 0x507a <Alarm+0xd8>
    505c:	88 ec       	ldi	r24, 0xC8	; 200
    505e:	90 e0       	ldi	r25, 0x00	; 0
    5060:	9a 8b       	std	Y+18, r25	; 0x12
    5062:	89 8b       	std	Y+17, r24	; 0x11
    5064:	89 89       	ldd	r24, Y+17	; 0x11
    5066:	9a 89       	ldd	r25, Y+18	; 0x12
    5068:	01 97       	sbiw	r24, 0x01	; 1
    506a:	f1 f7       	brne	.-4      	; 0x5068 <Alarm+0xc6>
    506c:	9a 8b       	std	Y+18, r25	; 0x12
    506e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5070:	8b 89       	ldd	r24, Y+19	; 0x13
    5072:	9c 89       	ldd	r25, Y+20	; 0x14
    5074:	01 97       	sbiw	r24, 0x01	; 1
    5076:	9c 8b       	std	Y+20, r25	; 0x14
    5078:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    507a:	8b 89       	ldd	r24, Y+19	; 0x13
    507c:	9c 89       	ldd	r25, Y+20	; 0x14
    507e:	00 97       	sbiw	r24, 0x00	; 0
    5080:	69 f7       	brne	.-38     	; 0x505c <Alarm+0xba>
    5082:	14 c0       	rjmp	.+40     	; 0x50ac <Alarm+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5084:	6d 89       	ldd	r22, Y+21	; 0x15
    5086:	7e 89       	ldd	r23, Y+22	; 0x16
    5088:	8f 89       	ldd	r24, Y+23	; 0x17
    508a:	98 8d       	ldd	r25, Y+24	; 0x18
    508c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5090:	dc 01       	movw	r26, r24
    5092:	cb 01       	movw	r24, r22
    5094:	9c 8b       	std	Y+20, r25	; 0x14
    5096:	8b 8b       	std	Y+19, r24	; 0x13
    5098:	8b 89       	ldd	r24, Y+19	; 0x13
    509a:	9c 89       	ldd	r25, Y+20	; 0x14
    509c:	98 8b       	std	Y+16, r25	; 0x10
    509e:	8f 87       	std	Y+15, r24	; 0x0f
    50a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    50a2:	98 89       	ldd	r25, Y+16	; 0x10
    50a4:	01 97       	sbiw	r24, 0x01	; 1
    50a6:	f1 f7       	brne	.-4      	; 0x50a4 <Alarm+0x102>
    50a8:	98 8b       	std	Y+16, r25	; 0x10
    50aa:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		PORTD &= ~((1 << 6) | (1 << 5));
    50ac:	a2 e3       	ldi	r26, 0x32	; 50
    50ae:	b0 e0       	ldi	r27, 0x00	; 0
    50b0:	e2 e3       	ldi	r30, 0x32	; 50
    50b2:	f0 e0       	ldi	r31, 0x00	; 0
    50b4:	80 81       	ld	r24, Z
    50b6:	8f 79       	andi	r24, 0x9F	; 159
    50b8:	8c 93       	st	X, r24
    50ba:	80 e0       	ldi	r24, 0x00	; 0
    50bc:	90 e0       	ldi	r25, 0x00	; 0
    50be:	aa e7       	ldi	r26, 0x7A	; 122
    50c0:	b4 e4       	ldi	r27, 0x44	; 68
    50c2:	8b 87       	std	Y+11, r24	; 0x0b
    50c4:	9c 87       	std	Y+12, r25	; 0x0c
    50c6:	ad 87       	std	Y+13, r26	; 0x0d
    50c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    50ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    50cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    50ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    50d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    50d2:	20 e0       	ldi	r18, 0x00	; 0
    50d4:	30 e0       	ldi	r19, 0x00	; 0
    50d6:	4a ef       	ldi	r20, 0xFA	; 250
    50d8:	54 e4       	ldi	r21, 0x44	; 68
    50da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50de:	dc 01       	movw	r26, r24
    50e0:	cb 01       	movw	r24, r22
    50e2:	8f 83       	std	Y+7, r24	; 0x07
    50e4:	98 87       	std	Y+8, r25	; 0x08
    50e6:	a9 87       	std	Y+9, r26	; 0x09
    50e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    50ea:	6f 81       	ldd	r22, Y+7	; 0x07
    50ec:	78 85       	ldd	r23, Y+8	; 0x08
    50ee:	89 85       	ldd	r24, Y+9	; 0x09
    50f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    50f2:	20 e0       	ldi	r18, 0x00	; 0
    50f4:	30 e0       	ldi	r19, 0x00	; 0
    50f6:	40 e8       	ldi	r20, 0x80	; 128
    50f8:	5f e3       	ldi	r21, 0x3F	; 63
    50fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    50fe:	88 23       	and	r24, r24
    5100:	2c f4       	brge	.+10     	; 0x510c <Alarm+0x16a>
		__ticks = 1;
    5102:	81 e0       	ldi	r24, 0x01	; 1
    5104:	90 e0       	ldi	r25, 0x00	; 0
    5106:	9e 83       	std	Y+6, r25	; 0x06
    5108:	8d 83       	std	Y+5, r24	; 0x05
    510a:	3f c0       	rjmp	.+126    	; 0x518a <Alarm+0x1e8>
	else if (__tmp > 65535)
    510c:	6f 81       	ldd	r22, Y+7	; 0x07
    510e:	78 85       	ldd	r23, Y+8	; 0x08
    5110:	89 85       	ldd	r24, Y+9	; 0x09
    5112:	9a 85       	ldd	r25, Y+10	; 0x0a
    5114:	20 e0       	ldi	r18, 0x00	; 0
    5116:	3f ef       	ldi	r19, 0xFF	; 255
    5118:	4f e7       	ldi	r20, 0x7F	; 127
    511a:	57 e4       	ldi	r21, 0x47	; 71
    511c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5120:	18 16       	cp	r1, r24
    5122:	4c f5       	brge	.+82     	; 0x5176 <Alarm+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5124:	6b 85       	ldd	r22, Y+11	; 0x0b
    5126:	7c 85       	ldd	r23, Y+12	; 0x0c
    5128:	8d 85       	ldd	r24, Y+13	; 0x0d
    512a:	9e 85       	ldd	r25, Y+14	; 0x0e
    512c:	20 e0       	ldi	r18, 0x00	; 0
    512e:	30 e0       	ldi	r19, 0x00	; 0
    5130:	40 e2       	ldi	r20, 0x20	; 32
    5132:	51 e4       	ldi	r21, 0x41	; 65
    5134:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5138:	dc 01       	movw	r26, r24
    513a:	cb 01       	movw	r24, r22
    513c:	bc 01       	movw	r22, r24
    513e:	cd 01       	movw	r24, r26
    5140:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5144:	dc 01       	movw	r26, r24
    5146:	cb 01       	movw	r24, r22
    5148:	9e 83       	std	Y+6, r25	; 0x06
    514a:	8d 83       	std	Y+5, r24	; 0x05
    514c:	0f c0       	rjmp	.+30     	; 0x516c <Alarm+0x1ca>
    514e:	88 ec       	ldi	r24, 0xC8	; 200
    5150:	90 e0       	ldi	r25, 0x00	; 0
    5152:	9c 83       	std	Y+4, r25	; 0x04
    5154:	8b 83       	std	Y+3, r24	; 0x03
    5156:	8b 81       	ldd	r24, Y+3	; 0x03
    5158:	9c 81       	ldd	r25, Y+4	; 0x04
    515a:	01 97       	sbiw	r24, 0x01	; 1
    515c:	f1 f7       	brne	.-4      	; 0x515a <Alarm+0x1b8>
    515e:	9c 83       	std	Y+4, r25	; 0x04
    5160:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5162:	8d 81       	ldd	r24, Y+5	; 0x05
    5164:	9e 81       	ldd	r25, Y+6	; 0x06
    5166:	01 97       	sbiw	r24, 0x01	; 1
    5168:	9e 83       	std	Y+6, r25	; 0x06
    516a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    516c:	8d 81       	ldd	r24, Y+5	; 0x05
    516e:	9e 81       	ldd	r25, Y+6	; 0x06
    5170:	00 97       	sbiw	r24, 0x00	; 0
    5172:	69 f7       	brne	.-38     	; 0x514e <Alarm+0x1ac>
    5174:	14 c0       	rjmp	.+40     	; 0x519e <Alarm+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5176:	6f 81       	ldd	r22, Y+7	; 0x07
    5178:	78 85       	ldd	r23, Y+8	; 0x08
    517a:	89 85       	ldd	r24, Y+9	; 0x09
    517c:	9a 85       	ldd	r25, Y+10	; 0x0a
    517e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5182:	dc 01       	movw	r26, r24
    5184:	cb 01       	movw	r24, r22
    5186:	9e 83       	std	Y+6, r25	; 0x06
    5188:	8d 83       	std	Y+5, r24	; 0x05
    518a:	8d 81       	ldd	r24, Y+5	; 0x05
    518c:	9e 81       	ldd	r25, Y+6	; 0x06
    518e:	9a 83       	std	Y+2, r25	; 0x02
    5190:	89 83       	std	Y+1, r24	; 0x01
    5192:	89 81       	ldd	r24, Y+1	; 0x01
    5194:	9a 81       	ldd	r25, Y+2	; 0x02
    5196:	01 97       	sbiw	r24, 0x01	; 1
    5198:	f1 f7       	brne	.-4      	; 0x5196 <Alarm+0x1f4>
    519a:	9a 83       	std	Y+2, r25	; 0x02
    519c:	89 83       	std	Y+1, r24	; 0x01
}
void Close_Gate() {
	Servo_Angle(90);
}
void Alarm() {
	for (u8 i = 0; i < 5; i++) {
    519e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    51a0:	8f 5f       	subi	r24, 0xFF	; 255
    51a2:	8d 8f       	std	Y+29, r24	; 0x1d
    51a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    51a6:	85 30       	cpi	r24, 0x05	; 5
    51a8:	08 f4       	brcc	.+2      	; 0x51ac <Alarm+0x20a>
    51aa:	07 cf       	rjmp	.-498    	; 0x4fba <Alarm+0x18>
		PORTD |= (1 << 6) | (1 << 5);
		_delay_ms(1000);
		PORTD &= ~((1 << 6) | (1 << 5));
		_delay_ms(1000);
	}
	PORTD &= ~((1 << 6) | (1 << 5));
    51ac:	a2 e3       	ldi	r26, 0x32	; 50
    51ae:	b0 e0       	ldi	r27, 0x00	; 0
    51b0:	e2 e3       	ldi	r30, 0x32	; 50
    51b2:	f0 e0       	ldi	r31, 0x00	; 0
    51b4:	80 81       	ld	r24, Z
    51b6:	8f 79       	andi	r24, 0x9F	; 159
    51b8:	8c 93       	st	X, r24
}
    51ba:	6d 96       	adiw	r28, 0x1d	; 29
    51bc:	0f b6       	in	r0, 0x3f	; 63
    51be:	f8 94       	cli
    51c0:	de bf       	out	0x3e, r29	; 62
    51c2:	0f be       	out	0x3f, r0	; 63
    51c4:	cd bf       	out	0x3d, r28	; 61
    51c6:	cf 91       	pop	r28
    51c8:	df 91       	pop	r29
    51ca:	08 95       	ret

000051cc <Read_Temp>:
void Read_Temp() {
    51cc:	df 93       	push	r29
    51ce:	cf 93       	push	r28
    51d0:	cd b7       	in	r28, 0x3d	; 61
    51d2:	de b7       	in	r29, 0x3e	; 62
	celsius = ADC_READ(4); //read from channel 4
    51d4:	84 e0       	ldi	r24, 0x04	; 4
    51d6:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <ADC_READ>
    51da:	cc 01       	movw	r24, r24
    51dc:	a0 e0       	ldi	r26, 0x00	; 0
    51de:	b0 e0       	ldi	r27, 0x00	; 0
    51e0:	bc 01       	movw	r22, r24
    51e2:	cd 01       	movw	r24, r26
    51e4:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    51e8:	dc 01       	movw	r26, r24
    51ea:	cb 01       	movw	r24, r22
    51ec:	80 93 3a 02 	sts	0x023A, r24
    51f0:	90 93 3b 02 	sts	0x023B, r25
    51f4:	a0 93 3c 02 	sts	0x023C, r26
    51f8:	b0 93 3d 02 	sts	0x023D, r27
	celsius = (celsius / 4);
    51fc:	80 91 3a 02 	lds	r24, 0x023A
    5200:	90 91 3b 02 	lds	r25, 0x023B
    5204:	a0 91 3c 02 	lds	r26, 0x023C
    5208:	b0 91 3d 02 	lds	r27, 0x023D
    520c:	bc 01       	movw	r22, r24
    520e:	cd 01       	movw	r24, r26
    5210:	20 e0       	ldi	r18, 0x00	; 0
    5212:	30 e0       	ldi	r19, 0x00	; 0
    5214:	40 e8       	ldi	r20, 0x80	; 128
    5216:	50 e4       	ldi	r21, 0x40	; 64
    5218:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    521c:	dc 01       	movw	r26, r24
    521e:	cb 01       	movw	r24, r22
    5220:	80 93 3a 02 	sts	0x023A, r24
    5224:	90 93 3b 02 	sts	0x023B, r25
    5228:	a0 93 3c 02 	sts	0x023C, r26
    522c:	b0 93 3d 02 	sts	0x023D, r27
	itoa((int) celsius, string, 10); //convert to char
    5230:	80 91 3a 02 	lds	r24, 0x023A
    5234:	90 91 3b 02 	lds	r25, 0x023B
    5238:	a0 91 3c 02 	lds	r26, 0x023C
    523c:	b0 91 3d 02 	lds	r27, 0x023D
    5240:	bc 01       	movw	r22, r24
    5242:	cd 01       	movw	r24, r26
    5244:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    5248:	dc 01       	movw	r26, r24
    524a:	cb 01       	movw	r24, r22
    524c:	28 e0       	ldi	r18, 0x08	; 8
    524e:	32 e0       	ldi	r19, 0x02	; 2
    5250:	b9 01       	movw	r22, r18
    5252:	4a e0       	ldi	r20, 0x0A	; 10
    5254:	50 e0       	ldi	r21, 0x00	; 0
    5256:	0e 94 e0 29 	call	0x53c0	; 0x53c0 <itoa>
	LCD_SETPOS(2, 0);
    525a:	82 e0       	ldi	r24, 0x02	; 2
    525c:	60 e0       	ldi	r22, 0x00	; 0
    525e:	0e 94 ae 22 	call	0x455c	; 0x455c <LCD_SETPOS>
	LCD_STRING("Temp=");
    5262:	8e e9       	ldi	r24, 0x9E	; 158
    5264:	90 e0       	ldi	r25, 0x00	; 0
    5266:	0e 94 85 22 	call	0x450a	; 0x450a <LCD_STRING>
	LCD_STRING(string);
    526a:	88 e0       	ldi	r24, 0x08	; 8
    526c:	92 e0       	ldi	r25, 0x02	; 2
    526e:	0e 94 85 22 	call	0x450a	; 0x450a <LCD_STRING>
}
    5272:	cf 91       	pop	r28
    5274:	df 91       	pop	r29
    5276:	08 95       	ret

00005278 <check_gate>:
void check_gate() {
    5278:	df 93       	push	r29
    527a:	cf 93       	push	r28
    527c:	cd b7       	in	r28, 0x3d	; 61
    527e:	de b7       	in	r29, 0x3e	; 62
	if (Read_Channel(DIO_CHANNEL_B0) == STD_LOW) {
    5280:	88 e0       	ldi	r24, 0x08	; 8
    5282:	0e 94 2c 09 	call	0x1258	; 0x1258 <Read_Channel>
    5286:	88 23       	and	r24, r24
    5288:	19 f4       	brne	.+6      	; 0x5290 <check_gate+0x18>
		Open_Gate();
    528a:	0e 94 b7 27 	call	0x4f6e	; 0x4f6e <Open_Gate>
    528e:	02 c0       	rjmp	.+4      	; 0x5294 <check_gate+0x1c>
	} else {
		Close_Gate();
    5290:	0e 94 c4 27 	call	0x4f88	; 0x4f88 <Close_Gate>
	}
}
    5294:	cf 91       	pop	r28
    5296:	df 91       	pop	r29
    5298:	08 95       	ret

0000529a <__mulsi3>:
    529a:	62 9f       	mul	r22, r18
    529c:	d0 01       	movw	r26, r0
    529e:	73 9f       	mul	r23, r19
    52a0:	f0 01       	movw	r30, r0
    52a2:	82 9f       	mul	r24, r18
    52a4:	e0 0d       	add	r30, r0
    52a6:	f1 1d       	adc	r31, r1
    52a8:	64 9f       	mul	r22, r20
    52aa:	e0 0d       	add	r30, r0
    52ac:	f1 1d       	adc	r31, r1
    52ae:	92 9f       	mul	r25, r18
    52b0:	f0 0d       	add	r31, r0
    52b2:	83 9f       	mul	r24, r19
    52b4:	f0 0d       	add	r31, r0
    52b6:	74 9f       	mul	r23, r20
    52b8:	f0 0d       	add	r31, r0
    52ba:	65 9f       	mul	r22, r21
    52bc:	f0 0d       	add	r31, r0
    52be:	99 27       	eor	r25, r25
    52c0:	72 9f       	mul	r23, r18
    52c2:	b0 0d       	add	r27, r0
    52c4:	e1 1d       	adc	r30, r1
    52c6:	f9 1f       	adc	r31, r25
    52c8:	63 9f       	mul	r22, r19
    52ca:	b0 0d       	add	r27, r0
    52cc:	e1 1d       	adc	r30, r1
    52ce:	f9 1f       	adc	r31, r25
    52d0:	bd 01       	movw	r22, r26
    52d2:	cf 01       	movw	r24, r30
    52d4:	11 24       	eor	r1, r1
    52d6:	08 95       	ret

000052d8 <__divmodsi4>:
    52d8:	97 fb       	bst	r25, 7
    52da:	09 2e       	mov	r0, r25
    52dc:	05 26       	eor	r0, r21
    52de:	0e d0       	rcall	.+28     	; 0x52fc <__divmodsi4_neg1>
    52e0:	57 fd       	sbrc	r21, 7
    52e2:	04 d0       	rcall	.+8      	; 0x52ec <__divmodsi4_neg2>
    52e4:	14 d0       	rcall	.+40     	; 0x530e <__udivmodsi4>
    52e6:	0a d0       	rcall	.+20     	; 0x52fc <__divmodsi4_neg1>
    52e8:	00 1c       	adc	r0, r0
    52ea:	38 f4       	brcc	.+14     	; 0x52fa <__divmodsi4_exit>

000052ec <__divmodsi4_neg2>:
    52ec:	50 95       	com	r21
    52ee:	40 95       	com	r20
    52f0:	30 95       	com	r19
    52f2:	21 95       	neg	r18
    52f4:	3f 4f       	sbci	r19, 0xFF	; 255
    52f6:	4f 4f       	sbci	r20, 0xFF	; 255
    52f8:	5f 4f       	sbci	r21, 0xFF	; 255

000052fa <__divmodsi4_exit>:
    52fa:	08 95       	ret

000052fc <__divmodsi4_neg1>:
    52fc:	f6 f7       	brtc	.-4      	; 0x52fa <__divmodsi4_exit>
    52fe:	90 95       	com	r25
    5300:	80 95       	com	r24
    5302:	70 95       	com	r23
    5304:	61 95       	neg	r22
    5306:	7f 4f       	sbci	r23, 0xFF	; 255
    5308:	8f 4f       	sbci	r24, 0xFF	; 255
    530a:	9f 4f       	sbci	r25, 0xFF	; 255
    530c:	08 95       	ret

0000530e <__udivmodsi4>:
    530e:	a1 e2       	ldi	r26, 0x21	; 33
    5310:	1a 2e       	mov	r1, r26
    5312:	aa 1b       	sub	r26, r26
    5314:	bb 1b       	sub	r27, r27
    5316:	fd 01       	movw	r30, r26
    5318:	0d c0       	rjmp	.+26     	; 0x5334 <__udivmodsi4_ep>

0000531a <__udivmodsi4_loop>:
    531a:	aa 1f       	adc	r26, r26
    531c:	bb 1f       	adc	r27, r27
    531e:	ee 1f       	adc	r30, r30
    5320:	ff 1f       	adc	r31, r31
    5322:	a2 17       	cp	r26, r18
    5324:	b3 07       	cpc	r27, r19
    5326:	e4 07       	cpc	r30, r20
    5328:	f5 07       	cpc	r31, r21
    532a:	20 f0       	brcs	.+8      	; 0x5334 <__udivmodsi4_ep>
    532c:	a2 1b       	sub	r26, r18
    532e:	b3 0b       	sbc	r27, r19
    5330:	e4 0b       	sbc	r30, r20
    5332:	f5 0b       	sbc	r31, r21

00005334 <__udivmodsi4_ep>:
    5334:	66 1f       	adc	r22, r22
    5336:	77 1f       	adc	r23, r23
    5338:	88 1f       	adc	r24, r24
    533a:	99 1f       	adc	r25, r25
    533c:	1a 94       	dec	r1
    533e:	69 f7       	brne	.-38     	; 0x531a <__udivmodsi4_loop>
    5340:	60 95       	com	r22
    5342:	70 95       	com	r23
    5344:	80 95       	com	r24
    5346:	90 95       	com	r25
    5348:	9b 01       	movw	r18, r22
    534a:	ac 01       	movw	r20, r24
    534c:	bd 01       	movw	r22, r26
    534e:	cf 01       	movw	r24, r30
    5350:	08 95       	ret

00005352 <__prologue_saves__>:
    5352:	2f 92       	push	r2
    5354:	3f 92       	push	r3
    5356:	4f 92       	push	r4
    5358:	5f 92       	push	r5
    535a:	6f 92       	push	r6
    535c:	7f 92       	push	r7
    535e:	8f 92       	push	r8
    5360:	9f 92       	push	r9
    5362:	af 92       	push	r10
    5364:	bf 92       	push	r11
    5366:	cf 92       	push	r12
    5368:	df 92       	push	r13
    536a:	ef 92       	push	r14
    536c:	ff 92       	push	r15
    536e:	0f 93       	push	r16
    5370:	1f 93       	push	r17
    5372:	cf 93       	push	r28
    5374:	df 93       	push	r29
    5376:	cd b7       	in	r28, 0x3d	; 61
    5378:	de b7       	in	r29, 0x3e	; 62
    537a:	ca 1b       	sub	r28, r26
    537c:	db 0b       	sbc	r29, r27
    537e:	0f b6       	in	r0, 0x3f	; 63
    5380:	f8 94       	cli
    5382:	de bf       	out	0x3e, r29	; 62
    5384:	0f be       	out	0x3f, r0	; 63
    5386:	cd bf       	out	0x3d, r28	; 61
    5388:	09 94       	ijmp

0000538a <__epilogue_restores__>:
    538a:	2a 88       	ldd	r2, Y+18	; 0x12
    538c:	39 88       	ldd	r3, Y+17	; 0x11
    538e:	48 88       	ldd	r4, Y+16	; 0x10
    5390:	5f 84       	ldd	r5, Y+15	; 0x0f
    5392:	6e 84       	ldd	r6, Y+14	; 0x0e
    5394:	7d 84       	ldd	r7, Y+13	; 0x0d
    5396:	8c 84       	ldd	r8, Y+12	; 0x0c
    5398:	9b 84       	ldd	r9, Y+11	; 0x0b
    539a:	aa 84       	ldd	r10, Y+10	; 0x0a
    539c:	b9 84       	ldd	r11, Y+9	; 0x09
    539e:	c8 84       	ldd	r12, Y+8	; 0x08
    53a0:	df 80       	ldd	r13, Y+7	; 0x07
    53a2:	ee 80       	ldd	r14, Y+6	; 0x06
    53a4:	fd 80       	ldd	r15, Y+5	; 0x05
    53a6:	0c 81       	ldd	r16, Y+4	; 0x04
    53a8:	1b 81       	ldd	r17, Y+3	; 0x03
    53aa:	aa 81       	ldd	r26, Y+2	; 0x02
    53ac:	b9 81       	ldd	r27, Y+1	; 0x01
    53ae:	ce 0f       	add	r28, r30
    53b0:	d1 1d       	adc	r29, r1
    53b2:	0f b6       	in	r0, 0x3f	; 63
    53b4:	f8 94       	cli
    53b6:	de bf       	out	0x3e, r29	; 62
    53b8:	0f be       	out	0x3f, r0	; 63
    53ba:	cd bf       	out	0x3d, r28	; 61
    53bc:	ed 01       	movw	r28, r26
    53be:	08 95       	ret

000053c0 <itoa>:
    53c0:	fb 01       	movw	r30, r22
    53c2:	9f 01       	movw	r18, r30
    53c4:	e8 94       	clt
    53c6:	42 30       	cpi	r20, 0x02	; 2
    53c8:	c4 f0       	brlt	.+48     	; 0x53fa <itoa+0x3a>
    53ca:	45 32       	cpi	r20, 0x25	; 37
    53cc:	b4 f4       	brge	.+44     	; 0x53fa <itoa+0x3a>
    53ce:	4a 30       	cpi	r20, 0x0A	; 10
    53d0:	29 f4       	brne	.+10     	; 0x53dc <itoa+0x1c>
    53d2:	97 fb       	bst	r25, 7
    53d4:	1e f4       	brtc	.+6      	; 0x53dc <itoa+0x1c>
    53d6:	90 95       	com	r25
    53d8:	81 95       	neg	r24
    53da:	9f 4f       	sbci	r25, 0xFF	; 255
    53dc:	64 2f       	mov	r22, r20
    53de:	77 27       	eor	r23, r23
    53e0:	0e 94 11 2a 	call	0x5422	; 0x5422 <__udivmodhi4>
    53e4:	80 5d       	subi	r24, 0xD0	; 208
    53e6:	8a 33       	cpi	r24, 0x3A	; 58
    53e8:	0c f0       	brlt	.+2      	; 0x53ec <itoa+0x2c>
    53ea:	89 5d       	subi	r24, 0xD9	; 217
    53ec:	81 93       	st	Z+, r24
    53ee:	cb 01       	movw	r24, r22
    53f0:	00 97       	sbiw	r24, 0x00	; 0
    53f2:	a1 f7       	brne	.-24     	; 0x53dc <itoa+0x1c>
    53f4:	16 f4       	brtc	.+4      	; 0x53fa <itoa+0x3a>
    53f6:	5d e2       	ldi	r21, 0x2D	; 45
    53f8:	51 93       	st	Z+, r21
    53fa:	10 82       	st	Z, r1
    53fc:	c9 01       	movw	r24, r18
    53fe:	0c 94 01 2a 	jmp	0x5402	; 0x5402 <strrev>

00005402 <strrev>:
    5402:	dc 01       	movw	r26, r24
    5404:	fc 01       	movw	r30, r24
    5406:	67 2f       	mov	r22, r23
    5408:	71 91       	ld	r23, Z+
    540a:	77 23       	and	r23, r23
    540c:	e1 f7       	brne	.-8      	; 0x5406 <strrev+0x4>
    540e:	32 97       	sbiw	r30, 0x02	; 2
    5410:	04 c0       	rjmp	.+8      	; 0x541a <strrev+0x18>
    5412:	7c 91       	ld	r23, X
    5414:	6d 93       	st	X+, r22
    5416:	70 83       	st	Z, r23
    5418:	62 91       	ld	r22, -Z
    541a:	ae 17       	cp	r26, r30
    541c:	bf 07       	cpc	r27, r31
    541e:	c8 f3       	brcs	.-14     	; 0x5412 <strrev+0x10>
    5420:	08 95       	ret

00005422 <__udivmodhi4>:
    5422:	aa 1b       	sub	r26, r26
    5424:	bb 1b       	sub	r27, r27
    5426:	51 e1       	ldi	r21, 0x11	; 17
    5428:	07 c0       	rjmp	.+14     	; 0x5438 <__udivmodhi4_ep>

0000542a <__udivmodhi4_loop>:
    542a:	aa 1f       	adc	r26, r26
    542c:	bb 1f       	adc	r27, r27
    542e:	a6 17       	cp	r26, r22
    5430:	b7 07       	cpc	r27, r23
    5432:	10 f0       	brcs	.+4      	; 0x5438 <__udivmodhi4_ep>
    5434:	a6 1b       	sub	r26, r22
    5436:	b7 0b       	sbc	r27, r23

00005438 <__udivmodhi4_ep>:
    5438:	88 1f       	adc	r24, r24
    543a:	99 1f       	adc	r25, r25
    543c:	5a 95       	dec	r21
    543e:	a9 f7       	brne	.-22     	; 0x542a <__udivmodhi4_loop>
    5440:	80 95       	com	r24
    5442:	90 95       	com	r25
    5444:	bc 01       	movw	r22, r24
    5446:	cd 01       	movw	r24, r26
    5448:	08 95       	ret

0000544a <_exit>:
    544a:	f8 94       	cli

0000544c <__stop_program>:
    544c:	ff cf       	rjmp	.-2      	; 0x544c <__stop_program>
